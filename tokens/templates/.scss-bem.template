<%
//
// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// A copy of the License is located at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

%>
<%
    // for backward compatibility we need to have the user explicitly hide it
    var showFileHeader = (this.options && this.options.hasOwnProperty('showFileHeader')) ? this.options.showFileHeader : true;
    if(showFileHeader) {
        var header = '';
        header += "//  Do not edit directly\n";
        header += "//  Generated on " + new Date().toUTCString();
        header += "\n\n";
        print(header);
    }

    print("\n");

    // output the list of tokens as Sass variables
    //
    _.each(allProperties, function(prop) {
        var output = '';
        if(prop.comment) {
            output += ' // ' + prop.comment;
        }
        output += '// --' + prop.name + ': ' + prop.value + ';'
        output += '\n';
        print(output);
    });

    print('\n');

    // output the list of tokens as a Sass nested map
    // (the values are pointing to the variables)
    //
    print(`$${this.mapName||'tokens'}: (${processJsonNode(properties, this.mapName).join(",")}\n);\n`);

    // recursive function to process a properties JSON node
    //
    function processJsonNode(obj, root) {
        var output = [];
        if (obj.hasOwnProperty('value')) {
            // if we have found a leaf (a property with a value) append the value
            output.push(`\n\t"${_.replace(obj.name, `${root}--`, "")}": ${obj.value}`);
        } else {
            // if we have found a group of properties, use the Sass group "(...)" syntax and loop -recursively- on the children
            output.push(Object.keys(obj).map((newKey) => processJsonNode(obj[newKey], root)));
        }
        return output;
    }
%>