# This workflow will roll a release
name: Release process
on:
  # debugging only
  pull_request:
    types: [synchronize]

  # manual run
  workflow_dispatch:
    branding:
      icon: tag
    inputs:
      semver:
        description: "Release: [major | minor | patch | premajor | preminor | prepatch | prerelease]"
        required: true
        default: "prerelease"
    # Eventually set this up to run on any merge to master
    # push:
    #     branches: ["master", "main"]
    # # Sequence of patterns matched against refs/tags
    #     tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Cut a tag & release
    runs-on: ubuntu-latest
    outputs:
      previous-version: ${{ steps.get-versions.outputs.previous-version }}
      bump-version: ${{ steps.get-versions.outputs.bump-version }}
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Create release branch
        run: git checkout -b release/v${{ steps.get-versions.outputs.bump-version }} || exit 1

      # Caching speeds up the npm install step
      - name: Access cached node modules
        id: get-node-cache
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.get-node-cache.outputs.cache-hit != 'true'
        run: npm ci

      # Caching removes the need to run a build every time
      - name: Access cached compiled assets
        id: get-compiled-cache
        uses: actions/cache@v2
        with:
          path: |
            elements/*/dist
          key: ${{ runner.os }}-build-${{ github.head_ref }}

      - name: Build
        id: build
        if: steps.get-compiled-cache.outputs.cache-hit != 'true'
        run: npm run build
      # - name: Create changelog
      #   id: changelog
      #   uses: TriPSs/conventional-changelog-action@v3
      #   with:
      #     github-token: ${{ env.GITHUB_TOKEN }}
      #     git-user-name: ${{ GITHUB_ACTOR }}
      #     output-file: "false"
      # - name: Get versions
      #   id: get-versions
      #   run: |
      #     echo "::set-output name=previous-version::$(echo $(node -e "console.log(require('./lerna.json').version)"))"
      #     ./node_modules/.bin/lerna version --include-merged-tags --no-git-tag-version --no-push --preid="prerelease" || exit 1
      #     echo "::set-output name=bump-version::$(echo $(node -e "console.log(require('./lerna.json').version)"))"
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name: ${{ steps.changelog.outputs.tag }}
      #     release_name: ${{ steps.changelog.outputs.tag }}
      #     body: ${{ steps.changelog.outputs.clean_changelog }}
      #     draft: true # TODO change to false or remove when ready
      #     prerelease: true
