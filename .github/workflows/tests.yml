# This workflow will build and run the test suite
# on all opened and updated (and labeled) PRs where
# at least one file does not match paths-ignore.
name: Build & test

on:
  # manual run
  workflow_dispatch:
    branding:
      icon: eye
  # Build when a PR
  pull_request:
    types: [opened, synchronize, labeled, ready_for_review]
    # Will only run if files other than these are edited
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE/**"
      - ".storybook/**"
      - "docs/**"
      - "generators/**"
      - "**/*.md"
      - "**/*.text"
  # Build when PRs are merged into master/main
  push:
    branches: ["master", "main"]

env:
  # For github action
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USER }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_KEY }}
  # For webdriver script
  BROWSERSTACK_USER: ${{ secrets.BROWSERSTACK_USER }}
  BROWSERSTACK_KEY: ${{ secrets.BROWSERSTACK_KEY }}
  # Turn this on to debug an action
  # GITHUB_CONTEXT: ${{ toJson(github) }}
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    # Confirm that the PR is not in draft
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    steps:
      # Turn this on to debug an action
      # - run: echo "$GITHUB_CONTEXT"

      - name: Checkout repository
        uses: actions/checkout@v2

      # Caching speeds up the npm install step
      - name: Cache node modules & compiled assets
        id: cache
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            **/node_modules
            elements/*/dist
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build
        id: build
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm build

      # Upload compiled assets to make them available for downstream jobs
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: compiled-assets
          path: elements/*/dist/*
          if-no-files-found: error

  # Test command can run concurrent with e2e so it downloads the
  # compiled assets from the build and uses those instead of reinstalling.
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Caching speeds up the npm install step
      - name: Access the cache
        id: cache
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            **/node_modules
            elements/*/dist
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}

      # Download the compiled assets
      # - uses: actions/download-artifact@v2

      # - name: Copy compiled artifacts to their folders
      #   run: |
      #     cd compiled-assets
      #     for elementName in *; do
      #       echo "Unpacking ${elementName} compiled assets."
      #       mv ${elementName}/dist ../elements/${elementName}/dist
      #       ls ../elements/${elementName}/dist
      #     done
      #     cd ../ && rm -rf compiled-assets
      - name: Run tests
        run: npm test -- --build=false --verbose
  # E2E command can run concurrent with test so it downloads the
  # compiled assets from the build and uses those instead of reinstalling.
  # Only run visual tests if the PR is labeled "ready to merge" or "run e2e"
  # e2e:
  #   needs: build
  #   if: contains(github.event.pull_request.labels.*.name, 'ready to merge') || contains(github.event.pull_request.labels.*.name, 'run e2e')
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Start BrowserStackLocal
  #       uses: "browserstack/github-actions/setup-local@master"
  #       with:
  #         local-testing: start
  #         local-identifier: random
  #         # local-logging-level: all-logs
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     # Download the compiled assets
  #     - uses: actions/download-artifact@v2
  #     - name: Copy compiled artifacts to their folders
  #       run: |
  #         ls
  #         ls elements/*/dist
  #         for compiled-assets/elementName in ./; do
  #           echo "Unpacking ${elementName} compiled assets "
  #           mv compiled-assets/${elementName}/dist elements/${elementName}/dist
  #         done
  #         rm -rf compiled-assets
  #     - name: Visual regression tests
  #       run: npm run e2e -- --verbose
  #     - name: Archive code coverage results
  #       uses: actions/upload-artifact@v2
  #         with:
  #           name: code-coverage-report
  #           path: output/test/code-coverage.html
  #     - name: Stop BrowserStackLocal
  #       uses: "browserstack/github-actions/setup-local@master"
  #       with:
  #         local-testing: stop
