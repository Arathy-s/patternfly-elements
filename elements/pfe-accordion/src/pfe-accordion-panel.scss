@import "shared-assets";

/// ===========================================================================
/// DEFAULT ACCORDION PANEL
/// ===========================================================================

:host {
<<<<<<< HEAD
  @include pfe-collapsible($state: closed);  
  @include pfe-box-sizing;
   
  margin: 0;
  width: pfe-local(Width);
  max-width: calc(100% - #{pfe-var(surface--border-width--heavy)});
  height: auto;
  position: relative;

  // Since the default bg color is transparent, look to broadcast values
  background-color: pfe-local(BackgroundColor, transparent);
  color:            pfe-local(Color);

  // Border settings
  border: 0 pfe-var(surface--border-style) pfe-local(BorderColor);
  border-top-width:     pfe-local(BorderTopWidth);
  border-right-width:   pfe-local(BorderRightWidth);
  border-bottom-width:  pfe-local(BorderBottomWidth);
  border-left: pfe-local(BorderLeftWidth) pfe-var(surface--border-style) transparent;

  box-shadow: pfe-local(BoxShadow);
  z-index:    pfe-local(ZIndex);
=======
   @include pfe-collapsible($state: closed);
   @include pfe-accordion-props;
   @include pfe-box-sizing;
   box-sizing: border-box;
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020
}

:host(.animating) {
  display: block;
  transition: height 0.3s ease-in-out;
}

.container {
  @extend %container;
  @include pfe-clearfix;
<<<<<<< HEAD

  padding: pfe-local(Padding); //, $region: panel-container, $fallback: 0 calc(#{pfe-var(container-spacer)} * 3) pfe-var(container-spacer) calc(#{pfe-var(container-spacer)} * 1.5));

  // Ensure the box shadow does not propagate to nest accordions
  --pfe-accordion--BoxShadow: none;

  :host([pfe-disclosure="true"]) & {
    padding: pfe-local(Padding, 0 calc(#{pfe-var(container-spacer)} * 3) pfe-var(container-spacer) calc(#{pfe-var(container-spacer)} * 1.5 - 4px));
=======
  @include pfe-panel-container;
  padding: pfe-local(Padding, $region: panel-container, $fallback: 0 pfe-local(Padding, $region: panel, $fallback: calc(#{pfe-local(Padding, $region: base)} * 3)) pfe-local(Padding, $region: base) pfe-local(Padding, $region: panel, $fallback: calc(#{pfe-local(Padding, $region: base)} * 1.5)));
  :host([disclosure="true"]) & {
    padding: pfe-local(Padding, $region: panel-container, $fallback: pfe-local(Padding, $region: panel, $fallback: calc(#{pfe-local(Padding, $region: base)} * 1.5)));
  }
  pfe-jump-links-nav & {
    padding: pfe-local(Padding, $region: panel-container, $fallback: 0);
    --pfe-accordion__panel-container--Padding: 0;
    @media (max-width: pfe-breakpoint(md, $max: true)) {
      padding: pfe-local(Padding, $region: panel-container, $fallback: 0);
    }
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020
  }
}

:host(:last-of-type[expanded]) {
  margin-bottom: 0;
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================

:host([expanded]),
:host(.animating) {
<<<<<<< HEAD
=======
  @include pfe-print-local(pfe-accordion-variables($state: expanded));
  @include pfe-panel-variables;
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020
  @include pfe-collapsible($state: open);

  border: 0 pfe-var(surface--border-style) pfe-local(BorderColor);

  border-top-width:   pfe-local(BorderTopWidth, 0);
  border-right-width: pfe-local(BorderRightWidth, pfe-var(surface--border-width));
  border-bottom-width: pfe-local(BorderBottomWidth);
  border-left-width:  pfe-local(BorderLeftWidth);
  border-left-color:  pfe-local(accent);

  // Defaults for light theme
  background-color: pfe-local(BackgroundColor--expanded);
  color: pfe-local(Color--expanded);
  
  box-shadow: pfe-local(BoxShadow);
  max-width:  calc(100% - #{pfe-local(BorderLeftWidth)} - 5px); // 5px is the BoxShadow size
  z-index:    pfe-local(ZIndex);

  @include browser-query(ie11) {
    border-top-width: 0;
    border-left-color: pfe-var(ui-accent);
    border-right-color: pfe-var(surface--border);
  }
}

<<<<<<< HEAD
:host([expanded]:not([on="light"])),
:host(.animating:not([on="light"])){
  box-shadow: pfe-local(BoxShadow, none);
  max-width:  calc(100% - #{pfe-local(BorderLeftWidth)}); // 5px is the BoxShadow size
}

:host([pfe-disclosure="true"]) {
  border-right-width: pfe-local(BorderRightWidth, pfe-var(surface--border-width));
  border-left-width:  pfe-local(BorderLeftWidth, pfe-var(surface--border-width));
}


:host([expanded][pfe-disclosure="true"]),
:host(.animating[pfe-disclosure="true"]) {
  border-left-width: pfe-local(BorderLeftWidth);
=======
:host([on="dark"][expanded]),
:host([on="dark"].animating){
  @include pfe-print-local(pfe-accordion-variables($state: expanded, $context: dark));
  @include pfe-panel-variables($context: dark);
}

:host([on="saturated"][expanded]),
:host([on="saturated"].animating){
  @include pfe-print-local(pfe-accordion-variables($state: expanded, $context: saturated));
  @include pfe-panel-variables($context: saturated);
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020
}
