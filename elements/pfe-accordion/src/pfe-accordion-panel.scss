@import "shared-assets";

/// ===========================================================================
/// DEFAULT ACCORDION PANEL
/// ===========================================================================

:host {
  @include pfe-clearfix;
  @include pfe-collapsible($state: closed);
  @include pfe-box-sizing;

   margin: 0;
   
   height: auto;
   width: 100%;
   position: relative;
   overflow: visible;
   z-index:    0;
 
   // Since the default bg color is transparent, look to broadcast values
   background-color: pfe-local(BackgroundColor, transparent);
   color:            pfe-local(Color);
   
   @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
   }
 
   // Border settings
   border-style: pfe-var(surface--border-style);
   border-width:     pfe-local(BorderWidth);
   border-color:  transparent;
   border-top-color: pfe-local(BorderColor);

   ::slotted(*) {
    // Ensure the box shadow does not propagate to nested accordions
    --pfe-accordion--BoxShadow: none;
   }

  // @TODO: These styles should exist inside pfe-jump-links-nav rather than inside pfe-accordion
  pfe-jump-links-nav & {
    padding: pfe-local(Padding, $region: panel-container, $fallback: 0);
    --pfe-accordion__panel-container--Padding: 0;
    @media (max-width: pfe-breakpoint(md, $max: true)) {
      padding: pfe-local(Padding, $region: panel-container, $fallback: 0);
    }
  }
}

:host::before {
  position: absolute;
  top: 0;
  left: -1px;
  content: " ";
  width: pfe-local(accent--width);
  height: calc(100% + 2px);
  background-color: transparent;
  z-index: calc(#{pfe-local(ZIndex)} + 1);
}
 
:host(:not([expanded]):last-of-type)::before {
  height: 100%;
}
 
:host([expanded]:last-of-type)::before {
  height: calc(100% + 1px);;
}
   
:host([expanded])::before,
:host(.animating)::before {
  background-color: pfe-local(accent);
}

:host([disclosure="true"]) {
  border-right-color: pfe-local(BorderColor);
  border-left-color:  pfe-local(BorderColor);
}

#container {
  @extend %container;

  padding: pfe-local(Padding);
  max-width: pfe-local(MaxWidth--content);

  :host([disclosure="true"]) & {
    padding: pfe-local(Padding, $region: panel-container, $fallback: 0 calc(#{pfe-var(container-padding)} * 3) calc(#{pfe-var(container-padding)}) calc(#{pfe-var(container-padding)} * 1.5));
  }
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================
:host([expanded]),
:host(.animating) {
  @include pfe-collapsible($state: open);
  
  box-shadow: pfe-local(BoxShadow);

  border-color: pfe-local(BorderColor);
  border-top-color: transparent;
}

:host([expanded]:not(:last-of-type)),
:host(.animating:not(:last-of-type)) {
  border-bottom-color: transparent;
}

:host(.animating) {
  display: block;
  transition: height 0.3s ease-in-out;
}

:host(:not([on="light"])) {
  --pfe-accordion--BoxShadow: "none";
}

:host([on="light"][expanded]),
:host([on="light"].animating) {
  --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded)};
  --pfe-accordion--Color:           #{pfe-local(Color--expanded)};
  --pfe-accordion--accent:          #{pfe-local(accent--expanded)};
}

:host([on="dark"][expanded]),
:host([on="dark"].animating) {
  --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded, rgba(247, 247, 249, .1))};
  --pfe-accordion--Color:           #{pfe-local(Color--expanded, pfe-broadcasted(text--on-dark))};
  --pfe-accordion--accent:          #{pfe-local(accent--expanded, pfe-var(ui-accent--on-dark))};
}

:host([on="saturated"][expanded]),
:host([on="saturated"].animating) {
  --pfe-accordion--BackgroundColor: #{pfe-local(BackgroundColor--expanded, rgba(0, 0, 0, 0.2))};
  --pfe-accordion--Color:           #{pfe-local(Color--expanded, pfe-broadcasted(text--on-saturated))};
  --pfe-accordion--accent:          #{pfe-local(accent--expanded, pfe-var(ui-accent--on-saturated))};
}