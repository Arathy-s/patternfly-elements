@import "shared-assets";

/// ===========================================================================
/// DEFAULT ACCORDION HEADING
/// ===========================================================================
:host {
  transition: transform 0.3s pfe-var(animation-timing);
  display: block;

  // Shadow template styles
  > * {
    margin: 0;
  }
}

button {
  @include pfe-trigger;

  // @TODO workaround, can we get the variables working?
  @include browser-query(edge) {
    text-align: left;
  }

  @include browser-query(ie11) {
    padding: 16px 24px;
    &:hover {
      border-left-color: pfe-fetch(ui-base);
    }
  }
}

:host(:not([pfe-disclosure="true"])) {
  button[aria-expanded="true"]::after {
    @include pfe-chevron($state: open);
  }
  button[aria-expanded="false"]::after {
    @include pfe-chevron($state: closed);
  }
}

// Add border bottom to the last button in an accordion set.
:host(:last-of-type) button:not([aria-expanded="true"]) {
  @include pfe-trigger-last;
}

:host(:last-of-type.animating) button {
  @include pfe-print-local((BorderBottomWidth: 0));
}

/// ===========================================================================
/// EXPANDED STYLES
/// ===========================================================================

// Default styles
button[aria-expanded="true"] {
  $accordion: pfe-accordion-variables($state: expanded);
  @include pfe-print-local($accordion);
  @include browser-query(ie11) {
    border-bottom-width: 0;
    border-left-color: pfe-fetch(ui-base);
    border-right-color: pfe-fetch(surface--border);
  }
}

// Styles contextual to theme
@each $context in $THEMES {
  @if $context != light {
    :host([on="#{$context}"]) button[aria-expanded="true"] {
      $accordion: pfe-accordion-variables($state: expanded, $theme: #{$context});
      @include pfe-print-local($accordion);
    }
  }
}

/// ===========================================================================
/// DISCLOSURE STYLES
/// ===========================================================================

:host([pfe-disclosure="true"]) {
  button {
    @include pfe-print-local((
      trigger: (
        Padding: pfe-local(Padding, $region: base) calc(#{pfe-local(Padding, $region: base)} * 1.5) pfe-local(Padding, $region: base) calc((#{pfe-local(Padding, $region: base)} * 3) + 2px)
      )
    ));
    @include browser-query(ie11) {
      padding: 16px 24px 16px 47px;
      border-right-color: pfe-fetch(surface--border);
      border-left-color: pfe-fetch(surface--border);
      border-left-width: pfe-fetch(surface--border-width);
    }

    &[aria-expanded="true"] {
      padding-left: calc(( #{pfe-var(container-spacer)} * 3 ) - 1px ) !important;
      border-left-width: pfe-var(surface--border-width--heavy);

      &::before {
        @include pfe-chevron($state: open, $position: before);
        left: calc( #{pfe-var(container-spacer)} * 1.3125 ); // 21px
      }
    }
    &[aria-expanded="false"]::before {
      @include pfe-chevron($state: closed, $position: before);
    }
  }
}

// Set the header border while animating
:host([pfe-disclosure="true"].animating) {
   // set border-left color while animating
  @include pfe-print-local((
    BorderLeftWidth: pfe-var(surface--border-width--heavy),
    BorderColor--accent: pfe-var(ui-base)
  ));

  button {
    padding-left: calc(#{pfe-var(container-spacer)} * 3 - 1px) !important;

    &::before {
      left: calc( #{pfe-var(container-spacer)} * 1.3125 ); // 21px
    }
  }
}

// Override border-left color for different themes.
@each $context in $THEMES {
  :host([pfe-disclosure="true"][on="#{$context}"].animating) {
    $accordion: pfe-accordion-variables($state: expanded, $theme: #{$context});
    @include pfe-print-local($accordion);
  }
}


