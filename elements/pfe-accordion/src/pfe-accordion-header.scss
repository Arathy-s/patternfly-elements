@import "shared-assets";

/// ===========================================================================
/// ACCORDION HEADER
/// ===========================================================================
:host {
  @include pfe-hidden;
  
  transition: transform 0.3s pfe-var(animation-timing);
  display: block;

  // Shadow template styles
  > * {
    margin: 0;
  }
}

button {
  margin: 0;
  width: pfe-local(Width);
  max-width: calc(100% - #{pfe-local(BorderLeftWidth)});
  height: auto;
  position: relative;

  // Since the default bg color is transparent, look to broadcast values
  background-color: pfe-local(BackgroundColor);
  color:            pfe-local(Color);

  // Border settings
  border: 0 pfe-var(surface--border-style) pfe-local(BorderColor);
  border-top-width:     pfe-local(BorderTopWidth);
  border-right-width:   pfe-local(BorderRightWidth);
  border-bottom-width:  0;
  border-left: pfe-local(BorderLeftWidth) pfe-var(surface--border-style) transparent;

  box-shadow: pfe-local(BoxShadow, none);
  z-index:    pfe-local(ZIndex);

  // -webkit-appearance: button;
  cursor: pointer;

  font-family: inherit;
  font-size:   pfe-local(FontSize--header, calc(#{pfe-var(font-size)} * 1.1));
  font-weight: pfe-var(font-weight--bold);
  text-align:  pfe-local(TextAlign);
  line-height: pfe-var(line-height);
  padding:     pfe-local(Padding);

  &::after {
    @include pfe-chevron($state: closed, $position: after, $offset: .55em);
  }

  &:hover {
    outline: none;
    border-left-width: pfe-var(surface--border-width--heavy);
    border-left-color: pfe-local(accent);
  }

  &:focus {
      outline: none;
      text-decoration: underline;
      :host([is-navigation]) & {
        border-left-color: pfe-local(accent);
      }
  }

<<<<<<< HEAD
  // &::-moz-focus-inner {
  //     border: 0;
  // }

  :host([is-direct-link]) &::after {
    transform: rotate(-45deg);
=======
:host(:not([disclosure="true"])) {
  button::after {
    @include pfe-chevron($state: closed);
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020
  }

  // While animating, hide the bottom border for the last item
  :host(:last-of-type.animating) & {
    border-bottom-width: 0;
  }

  // Add border bottom to the last button in an accordion set
  :host(:last-of-type) &:not([aria-expanded="true"]) {
    border-bottom-width:  pfe-local(BorderBottomWidth);
  }

<<<<<<< HEAD
  // @TODO workaround, can we get the variables working?
  @include browser-query(edge) {
    text-align: left;
  }

  @include browser-query(ie11) {
    padding: 16px 24px;
    &:hover {
      border-left-color: pfe-fetch(ui-accent);
    }
  }

  &[aria-expanded="true"] {
    border-color: pfe-local(BorderColor);
    border-right-width: pfe-local(BorderRightWidth, pfe-var(surface--border-width));
    border-left-width: pfe-local(BorderLeftWidth);
    border-left-color: pfe-local(accent);

    // Defaults for light theme
    background-color: pfe-local(BackgroundColor--expanded);
    color:            pfe-local(Color--expanded);

    box-shadow: pfe-local(BoxShadow);
    z-index:    pfe-local(ZIndex);

    &::after {
      @include pfe-chevron($state: open, $position: after, $offset: .55em);
    }
    
    @include browser-query(ie11) {
      border-bottom-width: 0;
      border-left-color: pfe-fetch(ui-accent);
      border-right-color: pfe-fetch(surface--border);
    }
=======
:host(:last-of-type.animating) button {
  --pfe-accordion--BorderBottomWidth: 0;
}

// Styles based on background color
button[aria-expanded="true"] {
  :host([on="dark"]) & {
    $accordion: pfe-accordion-variables($state: expanded, $context: dark);
    @include pfe-print-local($accordion);
  }

  :host([on="saturated"]) & {
    $accordion: pfe-accordion-variables($state: expanded, $context: saturated);
    @include pfe-print-local($accordion);
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020
  }
}

/// ===========================================================================
/// DISCLOSURE STYLES
/// ===========================================================================
:host([pfe-disclosure="true"]) button {
  border-left: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor);
  border-right: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor);

<<<<<<< HEAD
  padding-left: calc(#{$chevron--spacing} - #{pfe-var(surface--border-width)});
  padding-right: pfe-var(container-spacer);
  @include browser-query(ie11) {
    padding: 16px 24px 16px 47px;
    border-right-color: pfe-fetch(surface--border);
    border-left-color: pfe-fetch(surface--border);
    border-left-width: pfe-fetch(surface--border-width);
  }

  &::before {
    @include pfe-chevron($state: closed, $position: before, $offset: .55em);
  }
=======
:host([disclosure="true"]) {
  button {
    padding-left: calc(#{pfe-local(Padding, $region: base)} * 3);
    @include browser-query(ie11) {
      padding: 16px 24px 16px 47px;
      border-right-color: pfe-fetch(surface--border);
      border-left-color: pfe-fetch(surface--border);
      border-left-width: pfe-fetch(surface--border-width);
    }
>>>>>>> 4454e8389b7d09ecd2cf1501cb3fda6e61f94020

  &::after {
    display: none;
  }
  
  &[aria-expanded="true"]::before {
    transform: rotate(45deg);
  }
  
  &[aria-expanded="true"],
  &:hover {
    border-left: pfe-var(surface--border-width--heavy) pfe-var(surface--border-style) pfe-local(accent);
    padding-left: calc(#{$chevron--spacing} - #{pfe-var(surface--border-width--heavy)});
    &::before {
      margin-left: -3px;
    }
  }
}
