{"version":3,"sources":["pfe-alert.scss","pfe-alert.css","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AAwEA;EAGE,cAAc;ACzEhB;;AD4EA;EACE,aAAa;ACzEf;;ADkFE;EACE,iBEVgC;EFUhC,gDEVgC;EFWhC,qBEXgC;EFWhC,oDEXgC;EFYhC,mBEZgC;EFYhC,kDEZgC;EFahC,yBEbgC;EFahC,4DEbgC;EFehC,aEfgC;EFehC,wCEfgC;EFgBhC,iBAAa;EAAb,aAAa;EACb,oEAAsC;EAAtC,4DAAsC;EAAtC,8CAAsC;EAAtC,sCAAsC;EACtC,QElBgC;EFkBhC,+BElBgC;AD9DpC;;ADoFE;EACE,qBAAqB;EACrB,mBAAmB;ACjFvB;;ADqFE;EACE,qBAAqB;EACrB,mBAAmB;AClFvB;;ADqFE;EACE,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,uBAA2B;EAA3B,mCAA2B;MAA3B,oBAA2B;UAA3B,2BAA2B;EAC3B,kBErCgC;EFqChC,iFErCgC;AD7CpC;;ADqFE;EACE,iBEzCgC;EFyChC,+DEzCgC;ADzCpC;;ADqFE;EACE,eE7CgC;EF6ChC,kDE7CgC;EF8ChC,cE9CgC;EF8ChC,8CE9CgC;EF+ChC,eE/CgC;EF+ChC,kDE/CgC;EFgDhC,gBEhDgC;EFgDhC,qDEhDgC;EFiDhC,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;AClFlB;;ADqFE;EACE,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,wBAAuB;EAAvB,+BAAuB;MAAvB,qBAAuB;UAAvB,uBAAuB;EACvB,WExDgC;EFwDhC,wEExDgC;EFyDhC,YEzDgC;EFyDhC,0EEzDgC;EF0DhC,cE1DgC;EF0DhC,6CE1DgC;ADxBpC;;ADqFE;EACE,cE9DgC;EF8DhC,qDE9DgC;EF+DhC,6BE/DgC;EF+DhC,8EE/DgC;EFgEhC,YEhEgC;EFgEhC,oDEhEgC;EFiEhC,WEjEgC;EFiEhC,wFEjEgC;EFkEhC,YElEgC;EFkEhC,0FElEgC;EFmEhC,eAAe;AClFnB;;AD4EG;EASG,mDEtE8B;ADXpC;;ADwEG;EAYG,mDEzE8B;ADPpC;;ADoFE;EACE,eE9EgC;EF8EhC,wDE9EgC;ADHpC;;ADoFE;EACE,gBElFgC;EFkFhC,sFElFgC;ADCpC;;ADqFA;;EAEE,kBExFkC;EFwFlC,yGExFkC;EFyFlC,UEzFkC;EFyFlC,wDEzFkC;EF0FlC,mDE1FkC;EF2FlC,6BE3FkC;EF2FlC,mFE3FkC;EF4FlC,cE5FkC;EF4FlC,0DE5FkC;EF6FlC,eE7FkC;EF6FlC,8DE7FkC;ADWpC;;ADoFA;;EAEE,0BEjGkC;EFiGlC,8FEjGkC;UFiGlC,sFEjGkC;EFmGlC,cEnGkC;EFmGlC,iEEnGkC;ADiBpC;;ADuFA;;EAEE,6BAA2E;EAA3E,oHAA2E;ACpF7E;;ADwFA;EAEE,iCAAyB;EACzB,iCAAyB;EAEzB,kCAA0B;EAE1B,qCAA6B;ACxF/B;;AD4FA;EAEE,iCAAyB;EACzB,iCAAyB;EAEzB,kCAA0B;EAE1B,qCAA6B;AC5F/B;;ADgGA;EAEE,kCAA0B;EAE1B,iCAAyB;EACzB,iCAAyB;EAEzB,qCAA6B;AChG/B;;ADoGA;EAEE,iCAAyB;EACzB,iCAAyB;EAEzB,kCAA0B;EAE1B,qCAA6B;ACpG/B;;ADuGA;EACE,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;ACpGpB","file":"pfe-alert.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n\n$LOCAL: alert;\n\n// Example local variable, using BEM format\n// --pfe-alert__region--Property: value;\n\n// This variable is global so that helper functions can reference it\n$LOCAL-VARIABLES: (\n  // cyan-50\n  BackgroundColor: #F2F9F9,\n  BorderWidth: 3px,\n  // cyan-300\n  BorderColor: #009596,\n  BorderStyle: solid,\n  // --pf-global--spacer--md\n  Padding: 16px,\n  // the amount of space between icon and content\n  Gap: 4px,\n  header: (\n    // --pf-global--spacer--xs\n    MarginBottom: var(--pfe-alert--Gap, 4px),\n  ),\n  headerActions: (\n    MarginRight: 4px,\n  ),\n  title: (\n    Color: #003737,\n    FontSize: 14px,\n    FontWeight: 500,\n  ),\n  icon: (\n    // cyan-300\n    Color: #009596,\n    Width: var(--pfe-alert__icon--Size, 24px),\n    Height: var(--pfe-alert__icon--Size, 24px),\n  ),\n  description: (\n    FontSize: 14px,\n  ),\n  close-button: (\n    // Black-600\n    Color: #6A6E73,\n    BackgroundColor: transparent,\n    Border: none,\n    Height: var(--pfe-alert__close-button--Size, 24px),\n    Width: var(--pfe-alert__close-button--Size, 24px),\n  ),\n  close-button--hover: (\n    Color: #151515,\n  ),\n  action-group: (\n    MarginTop: var(--pfe-alert--Padding, 16px),\n    Gap: 24px,\n  ),\n  action-group-item: (\n    MarginRight: var(--pfe-alert__action-group--Gap, 24px),\n    Padding: 0,\n    border: none,\n    BackgroundColor: transparent,\n    Color: #0066CC,\n    FontSize: 14px,\n  ),\n  action-group-item--hover: (\n    // blue-500\n    Color: #004080,\n    TextDecoration: underline,\n  ),\n);\n\n:host {\n  // Avoid printing local variables on host, instead use the pfe-local() function to set property values\n  // Example: color: pfe-local(Color);\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-alert {\n  // container? Yeah it's a good question. I originally want to try have the entired\n  // BEM markup in the render function (meaning the top level div having a class of .pfe-alert)\n  // but that doesn't work with Shadydom. So I just swapped it out for this container div for now.\n  // I like the encapsulation and having declaritively having all of the aria states in the render\n  // function. But I'm still on the fence. :shrug:\n  &__container {\n    border-width: pfe-local(BorderWidth);\n    border-color: pfe-local(BorderColor);\n    border-style: pfe-local(BorderStyle);\n    background-color: pfe-local(BackgroundColor);\n    // --pf-global--spacer--md\n    padding: pfe-local(Padding);\n    display: grid;\n    grid-template-columns: min-content 1fr;\n    gap: pfe-local(Gap);\n  }\n\n  // ie11 fallback\n  &__left-column {\n    display: inline-block;\n    vertical-align: top;\n  }\n\n  // ie11 fallback\n  &__middle-column {\n    display: inline-block;\n    vertical-align: top;\n  }\n\n  &__header {\n    display: flex;\n    align-items: center;\n    justify-content: flex-start;\n    margin-bottom: pfe-local(MarginBottom, $region: header);\n  }\n\n  &__header-actions {\n    margin-right: pfe-local(MarginRight, $region: headerActions);\n  }\n\n  &__title {\n    font-size: pfe-local(FontSize, $region: title);\n    color: pfe-local(Color, $region: title);\n    font-size: pfe-local(FontSize, $region: title);\n    font-weight: pfe-local(FontWeight, $region: title);\n    flex: 1 1 auto;\n  }\n\n  &__icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: pfe-local(Width, $region: icon);\n    height: pfe-local(Height, $region: icon);\n    color: pfe-local(Color, $region: icon);\n  }\n\n  &__close-button {\n    color: pfe-local(Color, $region: close-button);\n    background-color: pfe-local(BackgroundColor, $region: close-button);\n    border: pfe-local(Border, $region: close-button);\n    width: pfe-local(Width, $region: close-button);\n    height: pfe-local(Height, $region: close-button);\n    cursor: pointer;\n\n    &:hover {\n      color: pfe-local(Width, $region: close-button--hover);\n    }\n    &:focus {\n      color: pfe-local(Width, $region: close-button--hover);\n    }\n  }\n\n  &__description {\n    font-size: pfe-local(FontSize, $region: description);\n  }\n\n  &__action-group {\n    margin-top: pfe-local(MarginTop, $region: action-group);\n  }\n}\n\n.pfe-alert__action-group-item,\n#action-group::slotted(.pfe-alert__action-group-item) {\n  margin-right: pfe-local(MarginRight, $region: action-group-item);\n  padding: pfe-local(Padding, $region: action-group-item);\n  border: pfe-local(Border, $region: action-group-item);\n  background-color: pfe-local(BackgroundColor, $region: action-group-item);\n  color: pfe-local(Color, $region: action-group-item);\n  font-size: pfe-local(FontSize, $region: action-group-item);\n}\n.pfe-alert__action-group-item:hover,\n#action-group::slotted(.pfe-alert__action-group-item:hover) {\n  text-decoration: pfe-local(TextDecoration, $region: action-group-item--hover);\n  // blue-500\n  color: pfe-local(Color, $region: action-group-item--hover);\n}\n// Turn a button into a regular looking link\n// I'm using important because pfe-base takes\n// precedence.\nbutton.pfe-alert__action-group-item,\n#action-group::slotted(.pfe-alert__action-group-item) {\n  margin-right: pfe-local(MarginRight, $region: action-group-item) !important;\n}\n\n// @todo these need to be empty variables.\n:host([state=\"info\"]) .pfe-alert__container {\n  // blue-300\n  --pfe-alert--BorderColor: #2B9AF3;\n  --pfe-alert__icon--Color: #2B9AF3;\n  // blue-600\n  --pfe-alert__title--Color: #002952;\n  // blue-50\n  --pfe-alert--BackgroundColor: #E7F1FA;\n}\n\n// @todo these need to be empty variables.\n:host([state=\"success\"]) .pfe-alert__container {\n  // green-500\n  --pfe-alert--BorderColor: #3E8635;\n  --pfe-alert__icon--Color: #3E8635;\n  // green-600\n  --pfe-alert__title--Color: #1E4F18;\n  // green-50\n  --pfe-alert--BackgroundColor: #F3FAF2;\n}\n\n// @todo these need to be empty variables.\n:host([state=\"warning\"]) .pfe-alert__container {\n  // gold-600\n  --pfe-alert__title--Color: #795600;\n  // gold-400\n  --pfe-alert--BorderColor: #F0AB00;\n  --pfe-alert__icon--Color: #F0AB00;\n  // gold-50\n  --pfe-alert--BackgroundColor: #FDF7E7;\n}\n\n// @todo these need to be empty variables.\n:host([state=\"danger\"]) .pfe-alert__container {\n  // red-100\n  --pfe-alert--BorderColor: #C9190B;\n  --pfe-alert__icon--Color: #C9190B;\n  // red-300\n  --pfe-alert__title--Color: #7D1007;\n  // gold-50\n  --pfe-alert--BackgroundColor: #FAEAE8;\n}\n\n:host(:not([variant])) .pfe-alert__container {\n  border-left: none;\n  border-bottom: none;\n  border-right: none;\n}",":host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-alert__container {\n  border-width: var(--pfe-alert--BorderWidth, 3px);\n  border-color: var(--pfe-alert--BorderColor, #009596);\n  border-style: var(--pfe-alert--BorderStyle, solid);\n  background-color: var(--pfe-alert--BackgroundColor, #F2F9F9);\n  padding: var(--pfe-alert--Padding, 16px);\n  display: grid;\n  grid-template-columns: min-content 1fr;\n  gap: var(--pfe-alert--Gap, 4px);\n}\n\n.pfe-alert__left-column {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.pfe-alert__middle-column {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.pfe-alert__header {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  margin-bottom: var(--pfe-alert__header--MarginBottom, var(--pfe-alert--Gap, 4px));\n}\n\n.pfe-alert__header-actions {\n  margin-right: var(--pfe-alert__headerActions--MarginRight, 4px);\n}\n\n.pfe-alert__title {\n  font-size: var(--pfe-alert__title--FontSize, 14px);\n  color: var(--pfe-alert__title--Color, #003737);\n  font-size: var(--pfe-alert__title--FontSize, 14px);\n  font-weight: var(--pfe-alert__title--FontWeight, 500);\n  flex: 1 1 auto;\n}\n\n.pfe-alert__icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--pfe-alert__icon--Width, var(--pfe-alert__icon--Size, 24px));\n  height: var(--pfe-alert__icon--Height, var(--pfe-alert__icon--Size, 24px));\n  color: var(--pfe-alert__icon--Color, #009596);\n}\n\n.pfe-alert__close-button {\n  color: var(--pfe-alert__close-button--Color, #6A6E73);\n  background-color: var(--pfe-alert__close-button--BackgroundColor, transparent);\n  border: var(--pfe-alert__close-button--Border, none);\n  width: var(--pfe-alert__close-button--Width, var(--pfe-alert__close-button--Size, 24px));\n  height: var(--pfe-alert__close-button--Height, var(--pfe-alert__close-button--Size, 24px));\n  cursor: pointer;\n}\n\n.pfe-alert__close-button:hover {\n  color: var(--pfe-alert__close-button--hover--Width);\n}\n\n.pfe-alert__close-button:focus {\n  color: var(--pfe-alert__close-button--hover--Width);\n}\n\n.pfe-alert__description {\n  font-size: var(--pfe-alert__description--FontSize, 14px);\n}\n\n.pfe-alert__action-group {\n  margin-top: var(--pfe-alert__action-group--MarginTop, var(--pfe-alert--Padding, 16px));\n}\n\n.pfe-alert__action-group-item,\n#action-group::slotted(.pfe-alert__action-group-item) {\n  margin-right: var(--pfe-alert__action-group-item--MarginRight, var(--pfe-alert__action-group--Gap, 24px));\n  padding: var(--pfe-alert__action-group-item--Padding, 0);\n  border: var(--pfe-alert__action-group-item--Border);\n  background-color: var(--pfe-alert__action-group-item--BackgroundColor, transparent);\n  color: var(--pfe-alert__action-group-item--Color, #0066CC);\n  font-size: var(--pfe-alert__action-group-item--FontSize, 14px);\n}\n\n.pfe-alert__action-group-item:hover,\n#action-group::slotted(.pfe-alert__action-group-item:hover) {\n  text-decoration: var(--pfe-alert__action-group-item--hover--TextDecoration, underline);\n  color: var(--pfe-alert__action-group-item--hover--Color, #004080);\n}\n\nbutton.pfe-alert__action-group-item,\n#action-group::slotted(.pfe-alert__action-group-item) {\n  margin-right: var(--pfe-alert__action-group-item--MarginRight, var(--pfe-alert__action-group--Gap, 24px)) !important;\n}\n\n:host([state=\"info\"]) .pfe-alert__container {\n  --pfe-alert--BorderColor: #2B9AF3;\n  --pfe-alert__icon--Color: #2B9AF3;\n  --pfe-alert__title--Color: #002952;\n  --pfe-alert--BackgroundColor: #E7F1FA;\n}\n\n:host([state=\"success\"]) .pfe-alert__container {\n  --pfe-alert--BorderColor: #3E8635;\n  --pfe-alert__icon--Color: #3E8635;\n  --pfe-alert__title--Color: #1E4F18;\n  --pfe-alert--BackgroundColor: #F3FAF2;\n}\n\n:host([state=\"warning\"]) .pfe-alert__container {\n  --pfe-alert__title--Color: #795600;\n  --pfe-alert--BorderColor: #F0AB00;\n  --pfe-alert__icon--Color: #F0AB00;\n  --pfe-alert--BackgroundColor: #FDF7E7;\n}\n\n:host([state=\"danger\"]) .pfe-alert__container {\n  --pfe-alert--BorderColor: #C9190B;\n  --pfe-alert__icon--Color: #C9190B;\n  --pfe-alert__title--Color: #7D1007;\n  --pfe-alert--BackgroundColor: #FAEAE8;\n}\n\n:host(:not([variant])) .pfe-alert__container {\n  border-left: none;\n  border-bottom: none;\n  border-right: none;\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"],"sourceRoot":"../src"}