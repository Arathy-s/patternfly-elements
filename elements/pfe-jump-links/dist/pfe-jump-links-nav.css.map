{"version":3,"sources":["pfe-jump-links-nav.scss","../../pfe-sass/extends/_extends.scss","pfe-jump-links-nav.css","../../pfe-sass/mixins/_mixins.scss","../../pfe-sass/mixins/_custom-properties.scss","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_copy-mixins.scss"],"names":[],"mappings":"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","file":"pfe-jump-links-nav.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: jump-links;\n\n$LOCAL-VARIABLES: (\n  horizontal-spacer: calc(#{pfe-var(container-padding)} * 2),\n  vertical-spacer: calc(#{pfe-var(container-padding)} * 2),\n  BackgroundColor: transparent,\n  BorderColor: pfe-var(ui-accent),\n  FontSize: pfe-var(FontSize--md),\n  Padding: 0,\n  heading: (\n    FontSize: pfe-var(FontSize--sm)\n  ),\n  link: (\n    horizontal-spacer: calc(#{pfe-var(content-spacer)} / 3),\n    vertical-spacer: calc(#{pfe-var(content-spacer)} / 6),\n  ),\n  nav: (\n      offset: calc(#{pfe-var(container-spacer)} * 4)\n  )\n);\n\n:host {\n  --context: var(--pfe-jump-links--context);\n\n  box-sizing: border-box;\n  font-family: pfe-var(font-family);\n  font-weight: pfe-var(font-weight--normal);\n  font-weight: 400; // @TODO: remove once font-weight--normal is 400\n  display: block;\n  position: sticky;\n  top: var(--pfe-jump-links-nav--offset, #{pfe-var(container-spacer)});\n  padding-left: 0;\n  background-color: pfe-local(BackgroundColor);\n  z-index: pfe-zindex(subnavigation);\n\n  @media(min-width: pfe-breakpoint(lg)) {\n    border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n    padding: pfe-local(Padding, $region: nav, $fallback: 0);\n  }\n}\n\n@include pfe-contexts((light, dark));\n\n:host([sticky=\"false\"]) {\n  position: relative;\n}\n\n.pfe-jump-links-nav__heading > h3 {\n  @include pfe-typography(sm, $region: heading, $light-dom-heading: true);\n  color: pfe-broadcasted(text);\n  text-transform: uppercase;\n\n  @media (max-width: pfe-breakpoint(lg, $max: true)) {\n    visibility: hidden;\n  }\n  \n  &:not(:empty) {\n    padding-bottom: pfe-var(container-padding);\n    border-bottom: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(surface--border);\n  }\n\n  :host([hide-label]) & {\n    @extend %sr-only;\n  }\n}\n\nnav {\n  visibility: visible;\n  margin: 0;\n  list-style: none;\n  padding: 0;\n}\n\nul {\n  padding: 0;\n\n  // The solid line connecting the navigation list items\n  border-left: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(ui-disabled);\n}\n\nli {\n  // The accent mark on an item, transparent until active\n  border-left: pfe-var(surface--border-width--heavy) pfe-var(surface--border-style) transparent;\n\n  display: block;\n  text-decoration: none;\n  margin-left: calc(#{pfe-var(surface--border-width)} * -1);\n\n  &[active] {\n    border-left-color: pfe-local(BorderColor);\n  }\n}\n\na {\n  position: relative;\n  display: table;\n\n  color: pfe-var(ui-disabled--text);\n  font-size: pfe-local(FontSize);\n  text-decoration: none;\n  line-height: pfe-var(line-height);\n\n  padding-top:    calc(#{pfe-local(vertical-spacer, $region: link)} * 2);\n  padding-right:  calc(#{pfe-local(horizontal-spacer, $region: link)} * 2);\n  padding-bottom: calc(#{pfe-local(vertical-spacer, $region: link)} * 2);\n  padding-left:   calc(#{pfe-local(horizontal-spacer, $region: link)} * 2);\n\n  .has-sub-section > & {\n    padding-bottom: pfe-local(vertical-spacer, $region: link);\n  }\n\n  .sub-section > & {\n    margin-left: calc(#{pfe-var(container-spacer)} * 0.75);\n    font-size: calc(#{pfe-local(FontSize)} * 0.85);\n    padding: pfe-local(vertical-spacer, $region: link) calc(#{pfe-local(horizontal-spacer, $region: link)} * 2);\n\n    @media(min-width: pfe-breakpoint(lg)) {\n      display: none;\n    }\n    \n    &:last-child {\n      padding-bottom: pfe-local(horizontal-spacer, $region: link);\n    }\n\n    [aria-expanded=\"true\"] & {\n      display: table;\n      height: auto;\n    }\n  }\n\n  &:focus {\n    outline: none;\n\n    &::after {\n      content: \"\";\n      position: absolute;\n      width: calc(100% - #{pfe-var(surface--border-width--heavy)});\n      height: calc(100% - #{pfe-var(surface--border-width--heavy)});\n      top: 0;\n      left: 0;\n      border-radius: pfe-var(surface--border-radius);\n      border: pfe-var(ui--focus-outline-width) pfe-var(ui--focus-outline-style) pfe-broadcasted(link);\n    }\n  }\n\n  &:hover,\n  [active] & {\n    color: pfe-broadcasted(text);\n  }\n}\n\n// Nested lists\nul ul {\n  display: flex;\n  flex-direction: column;\n  flex: 0;\n\n  margin: 0;\n  padding: 0;\n\n  border-left: none !important;\n\n  overflow-y: hidden;\n  transition: flex 1s linear;\n  \n  li {\n    border-left: none !important;\n  }\n\n  &[aria-expanded=\"true\"] {\n    flex: 1;\n  }\n}\n\n//accordion padding override\n:host {\n  --pfe-accordion__panel-container--Padding: 0;\n}\n\n// 0 -> md breakpoint\n@media (max-width: pfe-breakpoint(md, $max: true)) {\n  //accordion padding override\n  :host {\n    --pfe-accordion__panel-container--Padding: 20px;\n  }\n}\n\n\n// --------------------- //\n// Accordion styles\npfe-accordion {\n  z-index: pfe-zindex(subnavigation);\n  // 0 -> LG breakpoint\n  @media (max-width: pfe-breakpoint(lg, $max: true)) {\n    border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(ui-disabled);\n  }\n}\n  \npfe-accordion-header {\n  // @TODO: When variables are available in accordion, remove theme changes from this file\n  // hide accordion left border:\n  --pfe-theme--color--surface--border: transparent;\n  --pfe-theme--color--ui-base--on-dark: transparent;\n  --pfe-theme--color--ui-base: transparent;\n\n  position: sticky;\n  top: 0;\n\n  // 0 -> LG breakpoint\n  @media (max-width: pfe-breakpoint(lg, $max: true)) {\n    background-color: pfe-var(surface--lightest);\n    --context: #{pfe-var(surface--lightest--context)};\n  }\n  // LG breakpoint+\n  @media(min-width: pfe-breakpoint(lg)) {\n    visibility: collapse !important;\n    display: none;\n  }\n}\n\npfe-accordion-panel {\n  // hide accordion left border:\n  border-left-color: transparent;\n  border-right: none;\n\n  // LG breakpoint+\n  @media(min-width: pfe-breakpoint(lg)) {\n    visibility: collapse;\n    display: none;\n    opacity: 1;\n    display: block;\n    \n    > pfe-jump-links-nav {\n      width: 100%;\n      display: block;\n      visibility: visible;\n    }\n  }\n}\n// --------------------- //\n\n@each $color in (lightest, darkest) {\n  :host([color=\"#{$color}\"]) {\n    background-color: pfe-local(BackgroundColor, $fallback: pfe-var(surface--#{$color}));\n    --context: #{pfe-var(surface--#{$color}--context)};\n\n    @if $color == darkest {\n      border: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(ui-disabled--text);    }\n  }\n}\n\n// Return the local variable to jump-links\n// $LOCAL: $temp;\n\n// :host([color=\"darkest\"]) {\n//   pfe-accordion-header,\n//   pfe-accordion-panel,\n//   button[aria-expanded=\"true\"] {\n//     --pfe-jump-links--BackgroundColor: #{pfe-var(surface--darkest)};\n//     --pfe-jump-links--context: #{pfe-var(surface--darkest--context)};\n//   }\n\n//   .pfe-jump-links-nav__heading > h3,\n//   ::slotted([slot=\"pfe-jump-links-nav--heading\"]) {\n//     color: pfe-var(text--on-dark);\n//   }\n\n//   ul {\n//     border-left: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-var(text--muted);\n\n//     pfe-accordion {\n//       --pfe-accordion--BackgroundColor: #{pfe-var(surface--#{$color})};\n//       --context: #{pfe-var(surface--#{$color}--context)};\n//     }\n\n//     @if $color == darkest {\n//       ul {\n//         border-left: pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-broadcasted(text--muted);\n\n//         li[active] {\n//           border-left: pfe-var(ui--border-width--active) pfe-var(surface--border-style) pfe-broadcasted(link);\n//         }\n\n//         a:focus::after {\n//           border-color: pfe-var(link--on-dark);   // @TODO: What this is used for?\n//         }\n//       }\n//     }\n//   }\n// }\n\n:host([horizontal]) {\n  padding: 0;\n  top: var(--pfe-jump-links-panel--offset, 0);\n  width: 100%;\n  z-index: pfe-zindex(navigation);\n\n  nav {\n    // min-height: calc(#{pfe-var(container-spacer)} * 5.5);\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: center;\n    align-items: center;\n\n    position: relative;\n\n    padding-left: calc(#{pfe-var(container-spacer)} * 2);\n    padding-right: calc(#{pfe-var(container-spacer)} * 2);\n\n    @media(min-width: pfe-breakpoint(lg)) {\n      padding-left: calc(#{pfe-var(container-spacer)} * 4);\n      padding-right: calc(#{pfe-var(container-spacer)} * 4);\n    }\n\n    .pfe-jump-links-nav__heading > h3 {\n      flex-basis: 100%;\n      text-align: center;\n    }\n\n    ::slotted([slot=\"logo\"]) {\n      max-height: calc(#{pfe-var(container-spacer)} * 3.5);\n    }\n\n    ::slotted([slot=\"logo\"]),\n    ::slotted([slot=\"cta\"]) {\n      max-width: calc(#{pfe-var(container-spacer)} * 7);\n      @media(min-width: pfe-breakpoint(lg)) {\n        max-width: calc(#{pfe-var(container-spacer)} * 14);\n      }\n    }\n  }\n\n  #container {\n    flex: 1;\n    display: flex;\n    justify-items: center;\n    flex-direction: column;\n  }\n\n  ul {\n    border: none;\n    text-align: center;\n\n    flex: 1;\n    display: flex;\n\n    padding: 0;\n    width: auto;\n    margin: 0 auto;\n\n    li {\n      padding: 0 calc(#{pfe-var(container-spacer)} * 1.5);\n\n      display: flex;\n      // height: calc(#{pfe-var(container-spacer)} * 5);\n      align-items: center;\n\n      border-top: pfe-var(surface--border-width--heavy) pfe-var(surface--border-style) transparent;\n      border-bottom: pfe-var(surface--border-width--heavy) pfe-var(surface--border-style) transparent;\n      border-left: none;\n      border-right: none;\n\n      &[active] {\n        border-top: pfe-var(surface--border-width--heavy) pfe-var(surface--border-style) pfe-var(ui-accent);\n      }\n    }\n\n    a {\n      text-decoration: none;\n      color: pfe-var(ui-disabled--text);\n\n      padding-top:    pfe-local(vertical-spacer, $region: link, $fallback: pfe-var(container-spacer));\n      padding-right:  pfe-local(horizontal-spacer, $region: link, $fallback: pfe-var(container-spacer));\n      padding-bottom: pfe-local(vertical-spacer, $region: link, $fallback: pfe-var(container-spacer));\n      padding-left:   pfe-local(horizontal-spacer, $region: link, $fallback: pfe-var(container-spacer));\n\n      [active] &,\n      &:hover {\n        color: pfe-broadcasted(text);\n      }\n    }\n  }\n\n  @media (max-width: pfe-breakpoint(lg, $max: true)) {\n    nav {\n      min-height: calc(#{pfe-var(container-spacer)} * 5.5);\n      background-color: pfe-var(surface--lighter);\n      --context: #{pfe-var(surface--lighter--context)};\n    }\n\n    .pfe-jump-links-nav {\n      display: none;\n    }\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-spacer);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n",":host([hide-label]) .pfe-jump-links-nav__heading > h3 {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  :host {\n    /* IE10+ */\n    color: #151515 !important;\n  }\n}\n\n:host {\n  --context: var(--pfe-jump-links--context);\n  box-sizing: border-box;\n  font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n  font-weight: 400;\n  display: block;\n  position: sticky;\n  top: var(--pfe-jump-links-nav--offset, var(--pfe-theme--container-spacer, 1rem));\n  padding-left: 0;\n  background-color: var(--pfe-jump-links--BackgroundColor, transparent);\n  z-index: var(--pfe-theme--zindex--subnavigation, 97);\n}\n\n@media (min-width: 992px) {\n  :host {\n    border: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) transparent;\n    padding: var(--pfe-jump-links__nav--Padding, 0);\n  }\n}\n\n:host([on=\"light\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text, #151515);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link, #06c);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover, #004080);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus, #004080);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited, #6753ac);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited, none);\n}\n\n:host([on=\"dark\"]) {\n  --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n  --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #73bcf7);\n  --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #bee1f4);\n  --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #bee1f4);\n  --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #bee1f4);\n  --pfe-broadcasted--link-decoration: var(--pfe-theme--link-decoration--on-dark, none);\n  --pfe-broadcasted--link-decoration--hover: var(--pfe-theme--link-decoration--hover--on-dark, underline);\n  --pfe-broadcasted--link-decoration--focus: var(--pfe-theme--link-decoration--focus--on-dark, underline);\n  --pfe-broadcasted--link-decoration--visited: var(--pfe-theme--link-decoration--visited--on-dark, none);\n}\n\n:host([sticky=\"false\"]) {\n  position: relative;\n}\n\n.pfe-jump-links-nav__heading > h3 {\n  font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n  font-size: var(--pf-c-title--m-sm--FontSize, var(--pf-global--FontSize--sm, 0.875rem));\n  line-height: var(--pfe-theme--line-height, 1.5);\n  font-weight: var(--pfe-theme--font-weight--normal, 400);\n  color: var(--pfe-broadcasted--text, #3c3f42);\n  text-transform: uppercase;\n}\n\n.pfe-jump-links-nav__heading > h3:not(:last-child) {\n  margin-bottom: var(--pfe-theme--content-spacer--heading--sm, 1rem);\n}\n\n@media (max-width: 991px) {\n  .pfe-jump-links-nav__heading > h3 {\n    visibility: hidden;\n  }\n}\n\n.pfe-jump-links-nav__heading > h3:not(:empty) {\n  padding-bottom: var(--pfe-theme--container-padding, 1rem);\n  border-bottom: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-theme--color--surface--border, #d2d2d2);\n}\n\nnav {\n  visibility: visible;\n  margin: 0;\n  list-style: none;\n  padding: 0;\n}\n\nul {\n  padding: 0;\n  border-left: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-theme--color--ui-disabled, #d2d2d2);\n}\n\nli {\n  border-left: var(--pfe-theme--surface--border-width--heavy, 4px) var(--pfe-theme--surface--border-style, solid) transparent;\n  display: block;\n  text-decoration: none;\n  margin-left: calc(var(--pfe-theme--surface--border-width, 1px) * -1);\n}\n\nli[active] {\n  border-left-color: var(--pfe-jump-links--BorderColor, var(--pfe-theme--color--ui-accent, #06c));\n}\n\na {\n  position: relative;\n  display: table;\n  color: var(--pfe-theme--color--ui-disabled--text, #6a6e73);\n  font-size: var(--pfe-jump-links--FontSize, var(--pf-global--FontSize--md, 1rem));\n  text-decoration: none;\n  line-height: var(--pfe-theme--line-height, 1.5);\n  padding-top: calc(var(--pfe-jump-links__link--vertical-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 6)) * 2);\n  padding-right: calc(var(--pfe-jump-links__link--horizontal-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 3)) * 2);\n  padding-bottom: calc(var(--pfe-jump-links__link--vertical-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 6)) * 2);\n  padding-left: calc(var(--pfe-jump-links__link--horizontal-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 3)) * 2);\n}\n\n.has-sub-section > a {\n  padding-bottom: var(--pfe-jump-links__link--vertical-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 6));\n}\n\n.sub-section > a {\n  margin-left: calc(var(--pfe-theme--container-spacer, 1rem) * 0.75);\n  font-size: calc(var(--pfe-jump-links--FontSize, var(--pf-global--FontSize--md, 1rem)) * 0.85);\n  padding: var(--pfe-jump-links__link--vertical-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 6)) calc(var(--pfe-jump-links__link--horizontal-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 3)) * 2);\n}\n\n@media (min-width: 992px) {\n  .sub-section > a {\n    display: none;\n  }\n}\n\n.sub-section > a:last-child {\n  padding-bottom: var(--pfe-jump-links__link--horizontal-spacer, calc(var(--pfe-theme--content-spacer, 1.5rem) / 3));\n}\n\n[aria-expanded=\"true\"] .sub-section > a {\n  display: table;\n  height: auto;\n}\n\na:focus {\n  outline: none;\n}\n\na:focus::after {\n  content: \"\";\n  position: absolute;\n  width: calc(100% - var(--pfe-theme--surface--border-width--heavy, 4px));\n  height: calc(100% - var(--pfe-theme--surface--border-width--heavy, 4px));\n  top: 0;\n  left: 0;\n  border-radius: var(--pfe-theme--surface--border-radius, 3px);\n  border: var(--pfe-theme--ui--focus-outline-width, 1px) var(--pfe-theme--ui--focus-outline-style, solid) var(--pfe-broadcasted--link, #06c);\n}\n\na:hover,\n[active] a {\n  color: var(--pfe-broadcasted--text, #3c3f42);\n}\n\nul ul {\n  display: flex;\n  flex-direction: column;\n  flex: 0;\n  margin: 0;\n  padding: 0;\n  border-left: none !important;\n  overflow-y: hidden;\n  transition: flex 1s linear;\n}\n\nul ul li {\n  border-left: none !important;\n}\n\nul ul[aria-expanded=\"true\"] {\n  flex: 1;\n}\n\n:host {\n  --pfe-accordion__panel-container--Padding: 0;\n}\n\n@media (max-width: 767px) {\n  :host {\n    --pfe-accordion__panel-container--Padding: 20px;\n  }\n}\n\npfe-accordion {\n  z-index: var(--pfe-theme--zindex--subnavigation, 97);\n}\n\n@media (max-width: 991px) {\n  pfe-accordion {\n    border: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-theme--color--ui-disabled, #d2d2d2);\n  }\n}\n\npfe-accordion-header {\n  --pfe-theme--color--surface--border: transparent;\n  --pfe-theme--color--ui-base--on-dark: transparent;\n  --pfe-theme--color--ui-base: transparent;\n  position: sticky;\n  top: 0;\n}\n\n@media (max-width: 991px) {\n  pfe-accordion-header {\n    background-color: var(--pfe-theme--color--surface--lightest, #fff);\n    --context: var(--pfe-theme--color--surface--lightest--context, light);\n  }\n}\n\n@media (min-width: 992px) {\n  pfe-accordion-header {\n    visibility: collapse !important;\n    display: none;\n  }\n}\n\npfe-accordion-panel {\n  border-left-color: transparent;\n  border-right: none;\n}\n\n@media (min-width: 992px) {\n  pfe-accordion-panel {\n    visibility: collapse;\n    display: none;\n    opacity: 1;\n    display: block;\n  }\n  pfe-accordion-panel > pfe-jump-links-nav {\n    width: 100%;\n    display: block;\n    visibility: visible;\n  }\n}\n\n:host([color=\"lightest\"]) {\n  background-color: var(--pfe-jump-links--BackgroundColor, var(--pfe-theme--color--surface--lightest, #fff));\n  --context: var(--pfe-theme--color--surface--lightest--context, light);\n}\n\n:host([color=\"darkest\"]) {\n  background-color: var(--pfe-jump-links--BackgroundColor, var(--pfe-theme--color--surface--darkest, #151515));\n  --context: var(--pfe-theme--color--surface--darkest--context, dark);\n  border: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-theme--color--ui-disabled--text, #6a6e73);\n}\n\n:host([horizontal]) {\n  padding: 0;\n  top: var(--pfe-jump-links-panel--offset, 0);\n  width: 100%;\n  z-index: var(--pfe-theme--zindex--navigation, 98);\n}\n\n:host([horizontal]) nav {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  padding-left: calc(var(--pfe-theme--container-spacer, 1rem) * 2);\n  padding-right: calc(var(--pfe-theme--container-spacer, 1rem) * 2);\n}\n\n@media (min-width: 992px) {\n  :host([horizontal]) nav {\n    padding-left: calc(var(--pfe-theme--container-spacer, 1rem) * 4);\n    padding-right: calc(var(--pfe-theme--container-spacer, 1rem) * 4);\n  }\n}\n\n:host([horizontal]) nav .pfe-jump-links-nav__heading > h3 {\n  flex-basis: 100%;\n  text-align: center;\n}\n\n:host([horizontal]) nav ::slotted([slot=\"logo\"]) {\n  max-height: calc(var(--pfe-theme--container-spacer, 1rem) * 3.5);\n}\n\n:host([horizontal]) nav ::slotted([slot=\"logo\"]),\n:host([horizontal]) nav ::slotted([slot=\"cta\"]) {\n  max-width: calc(var(--pfe-theme--container-spacer, 1rem) * 7);\n}\n\n@media (min-width: 992px) {\n  :host([horizontal]) nav ::slotted([slot=\"logo\"]),\n  :host([horizontal]) nav ::slotted([slot=\"cta\"]) {\n    max-width: calc(var(--pfe-theme--container-spacer, 1rem) * 14);\n  }\n}\n\n:host([horizontal]) #container {\n  flex: 1;\n  display: flex;\n  justify-items: center;\n  flex-direction: column;\n}\n\n:host([horizontal]) ul {\n  border: none;\n  text-align: center;\n  flex: 1;\n  display: flex;\n  padding: 0;\n  width: auto;\n  margin: 0 auto;\n}\n\n:host([horizontal]) ul li {\n  padding: 0 calc(var(--pfe-theme--container-spacer, 1rem) * 1.5);\n  display: flex;\n  align-items: center;\n  border-top: var(--pfe-theme--surface--border-width--heavy, 4px) var(--pfe-theme--surface--border-style, solid) transparent;\n  border-bottom: var(--pfe-theme--surface--border-width--heavy, 4px) var(--pfe-theme--surface--border-style, solid) transparent;\n  border-left: none;\n  border-right: none;\n}\n\n:host([horizontal]) ul li[active] {\n  border-top: var(--pfe-theme--surface--border-width--heavy, 4px) var(--pfe-theme--surface--border-style, solid) var(--pfe-theme--color--ui-accent, #06c);\n}\n\n:host([horizontal]) ul a {\n  text-decoration: none;\n  color: var(--pfe-theme--color--ui-disabled--text, #6a6e73);\n  padding-top: var(--pfe-jump-links__link--vertical-spacer, var(--pfe-theme--container-spacer, 1rem));\n  padding-right: var(--pfe-jump-links__link--horizontal-spacer, var(--pfe-theme--container-spacer, 1rem));\n  padding-bottom: var(--pfe-jump-links__link--vertical-spacer, var(--pfe-theme--container-spacer, 1rem));\n  padding-left: var(--pfe-jump-links__link--horizontal-spacer, var(--pfe-theme--container-spacer, 1rem));\n}\n\n[active] :host([horizontal]) ul a, :host([horizontal]) ul a:hover {\n  color: var(--pfe-broadcasted--text, #3c3f42);\n}\n\n@media (max-width: 991px) {\n  :host([horizontal]) nav {\n    min-height: calc(var(--pfe-theme--container-spacer, 1rem) * 5.5);\n    background-color: var(--pfe-theme--color--surface--lighter, #f0f0f0);\n    --context: var(--pfe-theme--color--surface--lighter--context, light);\n  }\n  :host([horizontal]) .pfe-jump-links-nav {\n    display: none;\n  }\n}\n\n:host([hidden]) {\n  display: none;\n}\n","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} ","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// This will print all the broadcast variables, and set the value to the context of your choosing, like on-dark or on-saturated.\n/// @param {String} $context - Look up values from contexts, i.e. \"light\" or \"saturated\"\n/// @param {List | String} $broadcast [$BROADCAST-VARS] -  Optionally specify only one broadcast variable instead of the whole set, i.e. \"text\"\n/// @see $custom-prop-prefix\n/// @see $BROADCAST-VARS\n/// @example - scss - Usage in a container component, i.e. pfe-card\n///    :host {\n///      @include pfe-set-broadcast-context(dark);\n///    }\n/// @example - css - Rendered output\n///   :host {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///\n@mixin pfe-set-broadcast-context($context, $broadcast: $BROADCAST-VARS) {\n  @each $type in $broadcast {\n    $list: ();\n    $string: \"\";\n    $context_string: \"\";\n    $state: \"\";\n\n    @if str-starts-with($type, \"link\") {\n      $list: append($list, \"#{$type}\");\n\n      @each $s in (hover, focus, visited) {\n        $state: \"--#{$s}\";\n        $string: \"#{$type}#{$state}\";\n\n        @if not index($list, $string) {\n          $list: append($list, \"#{$type}#{$state}\");\n        }\n      }\n    } @else {\n      @if not index($list, $string) {\n        $list: append($list, \"#{$type}\");\n      }\n    }\n\n    @if index($CONTEXTS, $context) != null {\n      @if $context != \"light\" {\n        $context_string: \"--on-#{$context}\";\n      }\n    }\n\n    @each $item in $list {\n      @if not index($BROADCAST-VARS, $type) {\n        @warn \"--#{$custom-prop-prefix}-broadcasted--#{$item} variable is not in the $BROADCAST-VARS list.\";\n      } @else if not pfe-broadcasted(#{$item}#{$context_string}) {\n        @warn \"#{$item}#{$context_string} value does not currently exist.\";\n      } @else {\n        @if index($CONTEXTS, $context) != null {\n          --#{$custom-prop-prefix}-broadcasted--#{$item}: #{pfe-var(#{$item}#{$context_string})};\n        } @else {\n          @error \"The #{$context} context does not appear to be part of a supported context.\";\n        }\n      }\n    }\n  }\n}\n\n/// Returns CSS Variable for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $value - The value of the css variable being defined\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example - scss\n///   :host {\n///       padding-top:      pfe-local(paddingTop);\n///       padding-bottom:   pfe-local(paddingBottom);\n///   }\n@mixin pfe-print-local($map: $LOCAL-VARIABLES) {\n  @each $property, $value in $map {\n    $name: \"--#{$property}\";\n    $styles: $value;\n\n    @if type-of($value) == \"map\" {\n      @each $prop, $v in $value {\n        $name: \"__#{$property}--#{$prop}\";\n        $styles: $v;\n\n        // Print the variable definition\n        --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n      }\n    } @else {\n      // Print the variable definition\n      --#{$custom-prop-prefix}-#{$LOCAL}#{$name}: #{$styles};\n    }\n  }\n}\n\n/// Surface properties\n/// This mixin creates an attribute for all the surface colors, then prints the local background color variable for the component, with the correct context colors.\n/// @param {List | String} $surfaces [$SURFACES] - defaults to the global $SURFACES list of all supported colors\n/// @param {String} $attr-name [pfe-var] - defaults to pfe-var, optionally pass in a custom name for the data attribute\n/// @example - scss - In your component stylesheet\n///   $LOCAL: band;\n///   @include pfe-surfaces;\n/// @example - css - Rendered result\n///   :host([color=\"darker\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darker, #464646);\n///     --context: dark;\n///   }\n///   :host([color=\"darkest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n///     --context: dark;\n///   }\n///   :host([color=\"base\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--base, #dfdfdf);\n///     --context: light;\n///   }\n///   :host([color=\"lighter\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lighter, #ececec);\n///     --context: light;\n///   }\n///   :host([color=\"lightest\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--lightest, #fff);\n///     --context: light;\n///   }\n///   :host([color=\"accent\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--accent, #ee0000);\n///     --context: saturated;\n///   }\n///   :host([color=\"complement\"]) {\n///     --pfe-band--BackgroundColor: var(--pfe-theme--color--surface--complement, #0477a4);\n///     --context: saturated;\n///   }\n@mixin pfe-surfaces($surfaces: $SURFACE, $attr-name: color) {\n  @each $color in $surfaces {\n    $context: #{pfe-get-context(surface--#{$color}--context)};\n    :host([#{$attr-name}=\"#{$color}\"]) {\n      @include pfe-print-local(\n        (\n          BackgroundColor: pfe-var(surface--#{$color}),\n          context: pfe-var(surface--#{$color}--context, #{$context})\n        )\n      );\n      @extend %fallback-surface;\n    }\n  }\n}\n\n/// Prints the `on` attribute with IE11 fallbacks\n/// @param {List} contexts [$CONTEXTS] - defaults to the global $CONTEXTS list of all supported contexts\n/// @param {Boolean} ie-fallback [true] - defaults to true, prints IE11 fallbacks\n/// @example - scss - In your component styles\n///   @include pfe-contexts; // imports on=\"light\" etc support\n/// @example - css - Rendered outputs\n///   :host([on=\"dark\"]) {\n///     --pfe-broadcasted--text: var(--pfe-theme--color--text--on-dark, #fff);\n///     --pfe-broadcasted--link: var(--pfe-theme--color--link--on-dark, #99ccff);\n///     --pfe-broadcasted--link--hover: var(--pfe-theme--color--link--hover--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--focus: var(--pfe-theme--color--link--focus--on-dark, #cce6ff);\n///     --pfe-broadcasted--link--visited: var(--pfe-theme--color--link--visited--on-dark, #b38cd9);\n///     --pfe-broadcasted--link-decoration: none;\n///     --pfe-broadcasted--link-decoration--hover: underline;\n///     --pfe-broadcasted--link-decoration--focus: underline;\n///     --pfe-broadcasted--link-decoration--visited: none;\n///   }\n///   @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n///     :host([on=\"dark\"]) {\n///       color: #fff;\n///       color: var(--pfe-theme--color--text--on-dark, #fff);\n///     }\n///   }\n///   // ...as well as all the values for :host([on=\"saturated\"])  and  :host([on=\"light\"])\n@mixin pfe-contexts($contexts: $CONTEXTS, $ie-fallback: true) {\n  // Helper attributes to aid in theming\n  @each $context in $contexts {\n    :host([on=\"#{$context}\"]) {\n      @include pfe-set-broadcast-context($context);\n    }\n  }\n  @if $ie-fallback {\n    :host {\n      @extend %fallback-text;\n    }\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","@import \"../maps/_typography\";\n\n/// Mixin for creating an accessible focus state\n/// @group tools\n/// @param {Color} $color [$pfe-color--link]\n/// @see {variable} $pfe-color--link\n/// @example - scss\n/// .thing {\n///   @include pfe-accessibility-focus($pfe-color--link--on-dark);\n/// }\n/// @example - css\n/// .thing {\n///   outline-offset: 1px;\n///   outline-style: dotted;\n///   outline-width: 1px;\n///   text-decoration: none !important;\n///   outline-color: #73bcf7;\n/// }\n@mixin pfe-accessibility-focus($color: $pfe-color--link) {\n  outline-offset: 1px;\n  outline-style: dotted;\n  outline-width: 1px;\n  text-decoration: none !important;\n\n  @if type-of($color) ==color {\n    outline-color: $color;\n  }\n}\n\n@mixin pfe-underline($color: default-link-hover-line, $opacity: 1) {\n  text-decoration: underline;\n  text-decoration-skip: ink;\n}\n\n/// Mixin for authors outside of PFE to control spacing between content\n/// @group typography\n/// @param {*} $sizing [lg, md, sm] \n/// @param {*} $type [heading, body] \n/// @example - scss\n///   @include pfe-content--text--spacing-block(sm);\n@mixin pfe-content--text--spacing-block($sizing: md, $type: body) {\n    &:not(:last-child):not(:empty) {\n        margin-bottom: pfe-var(content-spacer--#{$type}--#{$sizing}); //16px\n    }\n} \n\n/// Mixin for authors outside of PFE to customize block level elements\n/// The variable stack includes a hook just for headings when they appear in the \n/// light DOM within components: --pf-c--FontSize\n///\n/// Components can't control the font size of block level elements like HTML headings \n/// when they are in the light DOM.  A component _could_ redefine the variables for \n/// standard headings by using the variable hooks such as: `--pf-c--content--h4--FontSize` \n/// but it can't know if the light DOM might contain an H1, H2, H3, etc. it shouldn't\n/// redefine the variables for all possible headings. Instead, there is one dedicated\n/// variable for this purpose. \n/// @group typography\n/// @param {*} $sizing [h1, h2, h3, h4, h5, h6, p, small] \n/// @example - scss\n///  .project-wrapper h3  {\n///      @include pfe-title(xl); \n///  }\n/// @example - css\n///  .project-wrapper  h3 {\n///    font-family: \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif;\n///    font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif);\n///    line-height: 1.3;\n///    line-height: var(--pfe-theme--line-height--heading, 1.3);\n///    font-weight: 500;\n///    font-weight: var(--pfe-theme--font-weight--normal, 500);\n///    font-size: 1.25rem;\n///    font-size: var(--pf-c--FontSize, var(--pf-c--content--h3--FontSize, var(--pf-global--FontSize--xl, 1.25rem)));\n///  }\n@mixin pfe-content ($element: \"p\", $base: false){\n    // TEXT\n    @if $element == \"p\" or $element == \"small\" {\n        // Extend includes: line height, weight, font family\n        @extend %pfe-content-base;\n\n        // Accomodate for irregular variable naming\n        @if $element == \"p\" {\n            font-size: var(--pf-c--FontSize, pfe-var(content--FontSize));\n        }\n        @else {\n            font-size: var(--pf-c--FontSize, pfe-var(content--#{$element}--FontSize));\n        }\n        @if $base {\n            font-family: pfe-var(font-family);\n            line-height: pfe-var(line-height);\n            font-weight: pfe-var(font-weight--normal);\n        }\n        // spacing\n        @include pfe-content--text--spacing-block(sm);\n    } \n    @else { // HEADINGS\n        font-family: pfe-var(font-family--heading);\n        line-height: pfe-var(line-height--heading);\n        font-weight: pfe-var(font-weight--normal);\n\n        font-size: var(--pf-c--FontSize, #{pfe-var(content--#{$element}--FontSize)});\n        // spacing\n        @include pfe-content--text--spacing-block(sm, heading);\n    }\n}\n\n\n\n/// Mixin to generate a typography stack - font-family, font-size, line-height, font-weight\n/// and spacing between elements. It accepts a few inputs and determines what variable stack\n/// and CSS properties to output. NOTE! There is an alias mixin `pfe-c-typography` below for easier usage within components. \n/// @group typography\n/// @param {String} $sizing [xl] - Human-readable description for the font-size of the stack you are building.\n/// @param {String} $type [title] - Describes the type of element being created and determines which variable stack to pull from. Also accepts \"text\".\n/// @param {Bool} $base [true] You may opt out of other typography properties (besides size) such as font-weight and line-height (and font-family on text).  \n/// @param {Bool} $spacing [true] - You may opt out of the margin-bottom which adds space below the typographical element \n/// @param {Bool} $important [false] - Boolean value for if properties need to be postfixed with `!important`. Use of `!important` is only recommended for utility classes.\n/// @param {Boolean} $use-local [false] - Set this to true when using the mixin within components. This will print a local CSS variable at the beginning of the CSS variable stack and will omit title/text variables. Note that this mixin will not utilize any values from the $LOCAL-VARIABLES map.\n/// @param {String} $region [null] - For use with local variables only. For more about the regional designation, see pfe-var().\n/// @param {Boolean} $light-dom-heading: [false] - Print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss.\n/// @requires {function} pfe-var\n/// @requires {function} pfe-local\n/// @requires {variable} $pf-title-set--mega\n/// @requires {variable} $pf-title-set--regular\n/// @requires {variable} $pf-title-set--tiny\n/// @example - scss - Basic example for xs text typography set\n/// .small-text {\n///   @include pfe-typography(\n///     $sizing: \"xs\",\n///     $type: \"text\",\n///     $base: true,\n///     $important: true,\n///     $use-local: false\n///   )\n/// }\n/// @example - css - Rendered result\n/// .small-text {\n///   font-size: 0.75rem !important;\n///   font-size: var(--pf-c-text--m-xs--FontSize, var(--pf-global--FontSize--xs, 0.75rem)) !important;\n///   font-family: \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif !important;\n///   font-family: var(--pfe-theme--font-family, \"Red Hat Text\", \"RedHatText\", \"Overpass\", Overpass, Arial, sans-serif) !important;\n///   line-height: 1.5 !important;\n///   line-height: var(--pfe-theme--line-height, 1.5) !important;\n///   font-weight: 400 !important;\n///   font-weight: var(--pfe-theme--font-weight--normal, 400) !important;\n/// }\n/// \n/// .small-text:not(:last-child):not(:empty) {\n///   margin-bottom: 0.5rem !important;\n///   margin-bottom: var(--pfe-theme--content-spacer--body--sm, 0.5rem) !important;\n/// }\n/// @example - scss - Basic example for 5xl title typography set\n/// .large-heading {\n///   @include pfe-typography(\n///     $sizing: \"5xl\",\n///     $type: \"title\",\n///     $important: true,\n///     $use-local: false\n///   )\n/// }\n/// @example - css - Rendered result\n/// .large-heading {\n///   font-family: \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif !important;\n///   font-family: var(--pfe-theme--font-family--heading, \"Red Hat Display\", \"RedHatDisplay\", \"Overpass\", Overpass, Arial, sans-serif) !important;\n///   font-size: 2.5rem !important;\n///   font-size: var(--pf-c-title--m-5xl--FontSize, var(--pf-global--FontSize--5xl, 2.5rem)) !important;\n///   line-height: 1.2 !important;\n///   line-height: var(--pfe-theme--line-height--heading-mega, 1.2) !important;\n///   font-weight: 300 !important;\n///   font-weight: var(--pfe-theme--font-weight--light, 300) !important;\n/// }\n/// \n/// .large-heading:not(:last-child) {\n///   margin-bottom: 1.5rem !important;\n///   margin-bottom: var(--pfe-theme--content-spacer--heading--md, 1.5rem) !important;\n/// }\n@mixin pfe-typography (\n        $sizing: \"xl\", \n        $type: \"title\", \n        $base: true, \n        $spacing: true, \n        $use-local: false,\n        $region: null,\n        $light-dom-heading: false,\n        $important: false\n    ){\n\n    // Ensure that even numerical entries are treated like strings, \"6xl\" vs. 6xl\n    $sizing: \"#{$sizing}\";\n\n    // Adds !important to the end of the property; useful for utility classes only. Use with caution. \n    $rules: \"\";\n    @if $important {\n        $rules: \" !important\";\n    }\n    // Text / body copy typography!\n    @if $type == \"text\" {  \n        // Capture the values of properties to use directly or wrapped in the pfe-local function below\n        $font-family: pfe-var(font-family);\n        $line-height: pfe-var(line-height);\n        $font-weight: pfe-var(font-weight--normal);\n        $margin-bottom: pfe-var(content-spacer--body--sm);\n\n        @if $use-local {\n            $font-size: pfe-var(FontSize--#{$sizing});\n            font-size: pfe-local(FontSize, $font-size, $region)#{$rules};\n            @if $base { \n                font-family: pfe-local(LineHeight, $font-family, $region)#{$rules};\n                line-height: pfe-local(LineHeight, $line-height, $region)#{$rules};\n                font-weight: pfe-local(FontWeight, $font-weight, $region)#{$rules};\n            }\n            @if $spacing { \n                &:not(:last-child) {\n                    margin-bottom: pfe-local(MarginBottom, $margin-bottom, $region)#{$rules};\n                }\n            }\n        }\n        @else {\n            // include text var and global var in stack\n            $font-size: pfe-var(text--m-#{$sizing}--FontSize);\n            font-size:   $font-size#{$rules};\n            @if $base {  // these styles are ordinarily inherited from the body tag, but some projects may need extra specificity\n                font-family: $font-family#{$rules};\n                line-height: $line-height#{$rules};\n                font-weight: $font-weight#{$rules};\n            }\n            @if $spacing { \n                &:not(:last-child):not(:empty) {\n                    margin-bottom: $margin-bottom#{$rules}; //16px\n                }\n            }\n        }\n        // this CSS custom property is an extra hook for components to override things, like .pfe-card { --pf-c-FontSize: 32px; }\n        @if $use-local and $light-dom-heading {\n            --pf-c--FontSize: #{pfe-local(FontSize)};\n        }\n    }\n    // Title typography!\n    @else {\n        // Capture the values of properties to use directly or wrapped in the pfe-local function below\n        // Initialize variables at the $pf-title-set--tiny size\n        // $sizing == \"lg\" or \"md\" or \"sm\" or \"xs\" \n        $line-height: pfe-var(line-height);\n        $font-weight: pfe-var(font-weight--normal);\n        $margin-bottom: pfe-var(content-spacer--heading--sm);\n\n        @if index($pf-title-set--mega, $sizing) != null {\n            $line-height: pfe-var(line-height--heading-mega);\n            $font-weight: pfe-var(font-weight--light);\n            @if $spacing { \n                $margin-bottom: pfe-var(content-spacer--heading--md);\n            }\n        }\n        // $sizing == \"4xl\" or \"3xl\" or \"2xl\" \n        @else if index($pf-title-set--regular, $sizing) != null {\n            $line-height: pfe-var(line-height--heading);\n            $font-weight: pfe-var(font-weight--normal);\n            @if $spacing { \n                $margin-bottom: pfe-var(content-spacer--heading--sm);\n            }\n        }\n        // If this value was not found in the tiny set, it's likely not supported\n        @else if index($pf-title-set--tiny, $sizing) == null {\n            @warn \"#{$sizing} was not found in $pf-title-set--mega, $pf-title-set--regular, or $pf-title-set--tiny.\";\n        }\n\n        // For component use, this option allows the mixin to use values set in the component level map\n        @if $use-local {\n            // remove title var from stack, use global only\n            $font-size: pfe-var(FontSize--#{$sizing});\n\n            font-family: pfe-var(font-family--heading)#{$rules};\n            font-size: pfe-local(FontSize, $font-size, $region)#{$rules};\n            @if $base == true {\n                line-height: pfe-local(LineHeight, $line-height, $region)#{$rules};\n                font-weight: pfe-local(FontWeight, $font-weight, $region)#{$rules};\n            }\n            @if $spacing { \n                &:not(:last-child) {\n                    margin-bottom: pfe-local(MarginBottom, $margin-bottom, $region)#{$rules};\n                }\n            }\n        }\n         \n        @else {\n            // include title var and global var in stack\n            $font-size: pfe-var(title--m-#{$sizing}--FontSize);\n            font-family: pfe-var(font-family--heading)#{$rules};\n            font-size: $font-size#{$rules};\n            @if $base == true {\n                line-height: $line-height#{$rules};\n                font-weight: $font-weight#{$rules};\n            }\n            @if $spacing { \n                &:not(:last-child) {\n                    margin-bottom: $margin-bottom#{$rules};\n                }\n            }\n        }\n        // this CSS custom property is an extra hook for components to override things, like .pfe-card { --pf-c-FontSize: 32px; }\n        @if $use-local and $light-dom-heading {\n            --pf-c--FontSize: #{pfe-local(FontSize)};\n        }\n    }\n}\n\n/// ALIAS Typography mixin for generating the font-size only within components. Still accepts all arguments.\n/// @group typography\n/// @param {String} $sizing [xl] - Human-readable description for the font-size of the stack you are building.\n/// @param {String} $type [title] - Describes the type of element being created and determines which variable stack to pull from. Also accepts \"text\".\n/// @param {Bool} $base [false] You may opt out of other typography properties (besides size) such as font-weight and line-height (and font-family on text).  \n/// @param {Bool} $spacing [false] - You may opt out of the margin-bottom which adds space below the typographical element \n/// @param {Bool} $important [false] - Boolean value for if properties need to be postfixed with `!important`. Use of `!important` is only recommended for utility classes.\n/// @param {Boolean} $use-local [true] - Set this to true when using the mixin within components. This will print a local CSS variable at the beginning of the CSS variable stack and will omit title/text variables. Note that this mixin will not utilize any values from the $LOCAL-VARIABLES map.\n/// @param {String} $region [null] - For use with local variables only. For more about the regional designation, see pfe-var().\n/// @param {Boolean} $light-dom-heading: [false] - Print the --pf-c--FontSize variable with a value of the font-size variable stack. For more information about --pf-c--FontSize, see the HTML HEADINGS section in pfe-base.scss.\n/// @requires {function} pfe-var\n/// @requires {function} pfe-local\n/// @requires {variable} $pf-title-set--mega\n/// @requires {variable} $pf-title-set--regular\n/// @requires {variable} $pf-title-set--tiny\n/// @example - scss - Basic example for medium text sizing\n/// $LOCAL: jump-links;\n/// .jump-links-text {\n///    @include pfe-c-typography($type: text, $sizing: md, $region: header, $light-dom-heading: true)\n/// }\n/// @example - css - Rendered result\n/// .jump-links-text {\n///   font-size: 1rem;\n///   font-size: var(--pfe-clipboard__header--FontSize, var(--pf-global--FontSize--md, 1rem));\n///   --pf-c--FontSize: var(--pfe-clipboard--FontSize, 1rem);\n/// }\n@mixin pfe-c-typography (\n        $sizing: \"xl\", \n        $type: \"title\", \n        $base: false,     // different than mixin above\n        $spacing: false,  // different than mixin above\n        $use-local: true, \n        $region: null,\n        $light-dom-heading: false,\n        $important: false\n) {\n  @include pfe-typography(\n        $sizing: $sizing,\n        $type: $type,\n        $base: $base,\n        $spacing: $spacing,\n        $use-local: $use-local,\n        $region: $region,\n        $light-dom-heading: $light-dom-heading,\n        $important: $important,\n  );\n}"],"sourceRoot":"../src"}