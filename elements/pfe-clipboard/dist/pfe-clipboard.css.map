{"version":3,"sources":["pfe-clipboard.scss","../../pfe-sass/functions/_custom-properties.scss","pfe-clipboard.css","../../pfe-sass/mixins/_mixins.scss"],"names":[],"mappings":"AAoBA;EACE,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,mBAAc;EAAd,sBAAc;MAAd,kBAAc;UAAd,cAAc;EACd,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,8BAAsB;EAAtB,2BAAsB;EAAtB,sBAAsB;EACtB,sBAAkC;EAAlC,iFAAkC;EAClC,gBCqDkC;EDrDlC,wFCqDkC;EDpDlC,0BAAyC;EAAzC,0DAAyC;EACzC,eAAe;EACf,iBCkDkC;EDlDlC,gDCkDkC;ACrEpC;;AFsBA;EACE,aAAa;AEnBf;;AFwBE;EACE,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,UCuCgC;EDvChC,0ECuCgC;EDrChC,YCqCgC;EDrChC,gDCqCgC;EDpChC,uBCoCgC;EDpChC,2DCoCgC;EDlChC,mGAAkB;AEvBtB;;AFgBG;EAUG,wBAAuC;EAAvC,iGAAuC;AEtB7C;;AFyBE;EACE,sBAAkC;EAAlC,iFAAkC;AEtBtC;;AFyBE;EACE,yBAAiD;EAAjD,iHAAiD;AEtBrD;;AF2BA;;EAEE,wBAAwB;AExB1B;;AF0BA;;EAEE,wBAAwB;AEvB1B;;AF4BA;;EAEE,WAAW;AEzBb;;AF6BA;;EAEE,wGAAuB;AE1BzB;;AF8BA;;EAEE,wGAAuB;AE3BzB;;ACxDM;EAAsF,UAAA;EHuF1F;IAEE,qBAAqB;EE3BvB;EF6BA;IACE,qBAAqB;IACrB,eAAe;EE3BjB;EF6BA;IACE,qBAAqB;EE3BvB;EF6BA;IACE,qBAAqB;EE3BvB;AACF","file":"pfe-clipboard.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: clipboard;\n\n// This variable is global so that helper functions can reference it\n$LOCAL-VARIABLES: (\n  FontSize: 1rem,\n  Padding: 6px 16px,\n  FontWeight: pfe-var(font-weight--light),\n  Color: pfe-broadcasted(link),\n  Color--hover: pfe-broadcasted(link--hover),\n  Color--focus: pfe-broadcasted(link--focus),\n  text--success--Color: pfe-var(feedback--success),\n  icon--Width: pfe-var(icon-size),\n  icon--Height: auto,\n  icon--Margin: 0 0.4825rem 0 0, // 7.72px\n  icon--Color: pfe-var(text--muted)\n);\n\n:host {\n  display: flex;\n  flex: 0 0 auto;\n  align-items: center;\n  max-width: fit-content;\n  color: pfe-local(Color) !important;\n  font-weight: pfe-local(FontWeight);\n  font-size: pfe-local(FontSize) !important;\n  cursor: pointer;\n  padding: pfe-local(Padding);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n//-- Custom styles applied to slot's shadow element\n.pfe-clipboard {\n  &__icon {\n    display: flex;\n    width: pfe-local(icon--Width);\n    // This is needed if the icon isn't square\n    height: pfe-local(icon--Height);\n    margin: pfe-local(icon--Margin);\n    // Customize icon color for pfe-icons\n    --pfe-icon--Color: #{pfe-local(icon--Color)};\n    svg {\n      // Customize icon color of fallback svg icon\n      fill: pfe-local(icon--Color) !important;\n    }\n  }\n  &__text {\n    color: pfe-local(Color) !important;\n  }\n\n  &__text--success {\n    color: pfe-local(text--success--Color) !important;\n  }\n}\n\n// Flipped clipboard text and success text\n:host([copied]) .pfe-clipboard__text,\n.pfe-clipboard[copied] .pfe-clipboard__text {\n  display: none !important;\n}\n:host(:not([copied])) .pfe-clipboard__text--success,\n.pfe-clipboard:not([copied]) .pfe-clipboard__text--success {\n  display: none !important;\n}\n\n//-- Custom styles applied to slot\n// Targets icon in the shadowdom and lightdom\n::slotted([slot=\"icon\"]),\n.pfe-clipboard__icon > * {\n  width: 100%;\n}\n\n// Note: Focus states need to be defined before hover states\n:host(:not([aria-disabled=\"true\"]):focus),\n:host(:not([aria-disabled=\"true\"]).focus-within) {\n  --pfe-clipboard--Color: #{pfe-local(Color--focus)};\n}\n\n// Note: Hover states need to be defined after focus states\n:host(:not([aria-disabled=\"true\"]):hover),\n:host(:not([aria-disabled=\"true\"])) ::slotted(:hover) {\n  --pfe-clipboard--Color: #{pfe-local(Color--hover)};\n}\n\n@include browser-query(ie11) {\n  :host {\n    // fallback for inline-flex\n    display: inline-block;\n  }\n  .pfe-clipboard__icon {\n    display: inline-block;\n    margin-right: 0;\n  }\n  .pfe-clipboard__text {\n    display: inline-block;\n  }\n  .pfe-clipboard__text--success {\n    display: inline-block;\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $repo\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: to-string($repo\"-theme\"), $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $repo\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}",":host {\n  display: flex;\n  flex: 0 0 auto;\n  align-items: center;\n  max-width: fit-content;\n  color: var(--pfe-clipboard--Color, var(--pfe-broadcasted--link, #06c)) !important;\n  font-weight: var(--pfe-clipboard--FontWeight, var(--pfe-theme--font-weight--light, 300));\n  font-size: var(--pfe-clipboard--FontSize, 1rem) !important;\n  cursor: pointer;\n  padding: var(--pfe-clipboard--Padding, 6px 16px);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-clipboard__icon {\n  display: flex;\n  width: var(--pfe-clipboard--icon--Width, var(--pfe-theme--icon-size, 1em));\n  height: var(--pfe-clipboard--icon--Height, auto);\n  margin: var(--pfe-clipboard--icon--Margin, 0 0.4825rem 0 0);\n  --pfe-icon--Color: var(--pfe-clipboard--icon--Color, var(--pfe-theme--color--text--muted, #6a6e73));\n}\n\n.pfe-clipboard__icon svg {\n  fill: var(--pfe-clipboard--icon--Color, var(--pfe-theme--color--text--muted, #6a6e73)) !important;\n}\n\n.pfe-clipboard__text {\n  color: var(--pfe-clipboard--Color, var(--pfe-broadcasted--link, #06c)) !important;\n}\n\n.pfe-clipboard__text--success {\n  color: var(--pfe-clipboard--text--success--Color, var(--pfe-theme--color--feedback--success, #3e8635)) !important;\n}\n\n:host([copied]) .pfe-clipboard__text,\n.pfe-clipboard[copied] .pfe-clipboard__text {\n  display: none !important;\n}\n\n:host(:not([copied])) .pfe-clipboard__text--success,\n.pfe-clipboard:not([copied]) .pfe-clipboard__text--success {\n  display: none !important;\n}\n\n::slotted([slot=\"icon\"]),\n.pfe-clipboard__icon > * {\n  width: 100%;\n}\n\n:host(:not([aria-disabled=\"true\"]):focus),\n:host(:not([aria-disabled=\"true\"]).focus-within) {\n  --pfe-clipboard--Color: var(--pfe-clipboard--Color--focus, var(--pfe-broadcasted--link--focus, #004080));\n}\n\n:host(:not([aria-disabled=\"true\"]):hover),\n:host(:not([aria-disabled=\"true\"])) ::slotted(:hover) {\n  --pfe-clipboard--Color: var(--pfe-clipboard--Color--hover, var(--pfe-broadcasted--link--hover, #004080));\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  /* IE10+ */\n  :host {\n    display: inline-block;\n  }\n  .pfe-clipboard__icon {\n    display: inline-block;\n    margin-right: 0;\n  }\n  .pfe-clipboard__text {\n    display: inline-block;\n  }\n  .pfe-clipboard__text--success {\n    display: inline-block;\n  }\n}\n","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} "],"sourceRoot":"../src"}