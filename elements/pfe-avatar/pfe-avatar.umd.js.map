{"version":3,"file":"pfe-avatar.umd.js","sources":["hslrgb.js","pfe-avatar.umd.js","djb-hash.js"],"sourcesContent":["function h2rgb(v1, v2, vH) {\n  if (vH < 0) vH += 1;\n  if (vH > 1) vH -= 1;\n  if (6 * vH < 1) return v1 + (v2 - v1) * 6 * vH;\n  if (2 * vH < 1) return v2;\n  if (3 * vH < 2) return v1 + (v2 - v1) * (2 / 3 - vH) * 6;\n  return v1;\n}\n\n/**\n * Convert an HSL color to RGB.\n *\n * @param {Number} H the hue component\n * @param {Number} S the saturation component\n * @param {Number} L the luminance component\n * @return {Array} [R, G, B]\n *\n * @see https://www.easyrgb.com/en/math.php\n */\nexport function hsl2rgb(_H, _S, _L) {\n  let R, G, B;\n\n  const H = Math.max(0, Math.min(1, _H));\n  const S = Math.max(0, Math.min(1, _S));\n  const L = Math.max(0, Math.min(1, _L));\n\n  if (S == 0) {\n    R = L * 255;\n    G = L * 255;\n    B = L * 255;\n  } else {\n    let a, b;\n\n    if (L < 0.5) {\n      b = L * (1 + S);\n    } else {\n      b = L + S - S * L;\n    }\n\n    a = 2 * L - b;\n\n    R = 255 * h2rgb(a, b, H + 1 / 3);\n    G = 255 * h2rgb(a, b, H);\n    B = 255 * h2rgb(a, b, H - 1 / 3);\n  }\n\n  return [R, G, B];\n}\n\n/**\n * Convert an RGBcolor to HSL .\n *\n * @param {Number} R the red component\n * @param {Number} G the green component\n * @param {Number} B the blue component\n * @return {Array} [H, S, L]\n *\n * @see https://www.easyrgb.com/en/math.php\n */\nexport function rgb2hsl(_R, _G, _B) {\n  let H, S, L;\n\n  const R = Math.max(0, Math.min(255, _R));\n  const G = Math.max(0, Math.min(255, _G));\n  const B = Math.max(0, Math.min(255, _B));\n\n  const r = R / 255;\n  const g = G / 255;\n  const b = B / 255;\n\n  const var_min = Math.min(Math.min(r, g), b);\n  const var_max = Math.max(Math.max(r, g), b);\n  const del_max = var_max - var_min;\n\n  L = (var_max + var_min) / 2;\n\n  if (del_max === 0) {\n    H = 0;\n    S = 0;\n  } else {\n    if (L < 0.5) {\n      S = del_max / (var_max + var_min);\n    } else {\n      S = del_max / (2 - var_max - var_min);\n    }\n\n    const del_r = ((var_max - r) / 6 + del_max / 2) / del_max;\n    const del_g = ((var_max - g) / 6 + del_max / 2) / del_max;\n    const del_b = ((var_max - b) / 6 + del_max / 2) / del_max;\n\n    if (r == var_max) {\n      H = del_b - del_g;\n    } else if (g == var_max) {\n      H = 1 / 3 + del_r - del_b;\n    } else if (b == var_max) {\n      H = 2 / 3 + del_g - del_r;\n    }\n\n    if (H < 0) {\n      H += 1;\n    } else if (H > 1) {\n      H -= 1;\n    }\n  }\n\n  return [H, S, L];\n}\n","/*\n * Copyright 2018 Red Hat, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport PFElement from \"../pfelement/pfelement.umd\";\nimport { hash } from \"./djb-hash.js\";\nimport { hsl2rgb, rgb2hsl } from \"./hslrgb.js\";\n\nclass PfeAvatar extends PFElement {\n  get html() {\n    return `\n<style>\n:host {\n  --pfe-avatar--pattern-color1: var(\n    --pfe-avatar--color--background,\n    var(--pfe-theme--color--ui-accent, #cce6ff)\n  );\n  --pfe-avatar--pattern-color2: var(\n    --pfe-avatar--color--foreground,\n    var(--pfe-theme--color--ui-accent--hover, #cce6ff)\n  );\n  --pfe-avatar--text-color: var(--pfe-theme--color--text--on-dark, #333);\n  --pfe-avatar--font-size: var(--pfe-theme--font-size--heading--alpha, 1em);\n  --pfe-avatar--width: 128px;\n  display: block;\n  position: relative;\n  width: var(--pfe-avatar--width);\n  height: var(--pfe-avatar--width); }\n  :host canvas {\n    width: 100%;\n    height: 100%;\n    image-rendering: optimizeSpeed;\n    \n    image-rendering: -moz-crisp-edges;\n    \n    image-rendering: -webkit-optimize-contrast;\n    \n    image-rendering: -o-crisp-edges;\n    \n    image-rendering: pixelated;\n    \n    -ms-interpolation-mode: nearest-neighbor;\n     }\n  :host #initials {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: var(--pfe-avatar--text-color);\n    font-size: calc(2 * var(--pfe-avatar--font-size));\n    line-height: 1em;\n    font-weight: bold;\n    text-shadow: 0px 1px 4px rgba(0, 0, 0, 0.3); }\n\n:host([shape=\"rounded\"]) img,\n:host([shape=\"rounded\"]) canvas {\n  border-radius: calc(var(--pfe-avatar--width) / 8 + 1px); }\n\n:host([shape=\"circle\"]) img,\n:host([shape=\"circle\"]) canvas {\n  border-radius: 50%; }\n\n:host([src]) canvas {\n  display: none; }\n\n:host([src]) img {\n  display: block;\n  width: 100%;\n  height: 100%;\n  object-fit: cover; }\n\n:host(:not([src])) img {\n  display: none; }\n\n:host(:not([show-initials])) #initials {\n  display: none; }\n\n:host([hidden]) {\n  display: none; }\n</style>\n<div id=\"initials\"></div>\n<canvas></canvas>\n<img>`;\n  }\n\n  static get tag() {\n    return \"pfe-avatar\";\n  }\n\n  get templateUrl() {\n    return \"pfe-avatar.html\";\n  }\n\n  get styleUrl() {\n    return \"pfe-avatar.scss\";\n  }\n\n  static get observedAttributes() {\n    return [\"name\", \"pattern\", \"src\", \"shape\"];\n  }\n\n  static get patterns() {\n    return {\n      triangles: \"triangles\",\n      squares: \"squares\"\n    };\n  }\n\n  static get defaultColors() {\n    return \"#3B0083 #f0ab00 #007a87 #00b9e4 #92d400\";\n  }\n\n  get name() {\n    return this.getAttribute(\"name\");\n  }\n\n  set name(val) {\n    return this.setAttribute(\"name\", val);\n  }\n\n  get src() {\n    return this.getAttribute(\"src\");\n  }\n\n  set src(href) {\n    return this.setAttribute(\"src\", href);\n  }\n\n  get pattern() {\n    return this.getAttribute(\"pattern\") || PfeAvatar.patterns.squares;\n  }\n\n  set pattern(name) {\n    if (!PfeAvatar.patterns[name]) {\n      this.log(\n        `invalid pattern \"${name}\", valid patterns are: ${Object.values(\n          PfeAvatar.patterns\n        )}`\n      );\n      return;\n    }\n    return this.setAttribute(\"pattern\", name);\n  }\n\n  constructor() {\n    super(PfeAvatar);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._initCanvas();\n\n    this.dispatchEvent(\n      new CustomEvent(`${PfeAvatar.tag}:connected`, {\n        bubbles: false\n      })\n    );\n  }\n\n  attributeChangedCallback(attr, oldValue, newValue) {\n    super.attributeChangedCallback(...arguments);\n\n    switch (attr) {\n      case \"name\":\n      case \"pattern\":\n        break;\n      case \"src\":\n        break;\n\n      default:\n    }\n\n    if (this.connected) {\n      this.update();\n    } else {\n      this.addEventListener(`${PfeAvatar.tag}:connected`, () => this.update());\n    }\n  }\n\n  _initCanvas() {\n    this._canvas = this.shadowRoot.querySelector(\"canvas\");\n    const size = this.var(\"--pfe-avatar--width\").replace(/px$/, \"\");\n    this._canvas.width = size;\n    this._canvas.height = size;\n\n    this._squareSize = this._canvas.width / 8;\n    this._triangleSize = this._canvas.width / 4;\n\n    this._ctx = this._canvas.getContext(\"2d\");\n  }\n\n  _findInitials(name) {\n    if (!name || name.length === 0) {\n      return [];\n    }\n    const nameArr = name.trim().split(/\\s+/);\n    const fi = nameArr[0][0];\n    const li = nameArr.length > 1 ? nameArr[nameArr.length - 1][0] : \"\";\n\n    // For 1 name, return 1 initial.  For two names, return two initials.  For\n    // three names, return three initials.  For more than three names, return\n    // two initials (first name and last name).\n    switch (nameArr.length) {\n      case 1:\n        return [fi];\n      case 3:\n        return [fi, nameArr[1][0], li];\n      default:\n        return [fi, li];\n    }\n  }\n\n  _setInitials(initials) {\n    this.shadowRoot.querySelector(\"#initials\").textContent = initials.join(\"\");\n  }\n\n  static _registerColors() {\n    this.colors = [];\n    const themeColors =\n      PFElement.var(\"--pfe-avatar--colors\") || this.defaultColors;\n\n    themeColors.split(/\\s+/).forEach(colorCode => {\n      let pattern;\n      switch (colorCode.length) {\n        case 4: // ex: \"#0fc\"\n          pattern = /^#([A-f0-9])([A-f0-9])([A-f0-9])$/.exec(colorCode);\n          if (pattern) {\n            pattern.shift();\n            const color = pattern.map(c => parseInt(c + c, 16));\n            this._registerColor(color);\n          } else {\n            PFElement.log(`[pfe-avatar] invalid color ${colorCode}`);\n          }\n          break;\n        case 7: // ex: \"#00ffcc\"\n          pattern = /^#([A-f0-9]{2})([A-f0-9]{2})([A-f0-9]{2})$/.exec(\n            colorCode\n          );\n          if (pattern) {\n            pattern.shift();\n            const color = pattern.map(c => parseInt(c, 16));\n            this._registerColor(color);\n          } else {\n            PFElement.log(`[pfe-avatar] invalid color ${colorCode}`);\n          }\n      }\n    });\n\n    return this.colors;\n  }\n\n  static _registerColor(color) {\n    PfeAvatar.colors.push({\n      color1: `rgb(${color.join(\",\")})`,\n      color2: `rgb(${this._adjustColor(color).join(\",\")})`\n    });\n  }\n\n  static _adjustColor(color) {\n    const dark = 0.1;\n    const l_adj = 0.1; // luminance adjustment\n    const hsl = rgb2hsl(...color);\n\n    // if luminance is too dark already, then lighten the alternate color\n    // instead of darkening it.\n    hsl[2] += hsl[2] > dark ? -l_adj : l_adj;\n\n    return hsl2rgb(...hsl);\n  }\n\n  update() {\n    this._setInitials(this._findInitials(this.name));\n\n    // if we have a src element, update the img, otherwise update the random pattern\n    if (this.hasAttribute(\"src\")) {\n      this.shadowRoot.querySelector(\"img\").src = this.src;\n    } else {\n      const bitPattern = hash(this.name).toString(2);\n      const arrPattern = bitPattern.split(\"\").map(n => Number(n));\n      this._colorIndex = Math.floor(\n        (PfeAvatar.colors.length * parseInt(bitPattern, 2)) / Math.pow(2, 32)\n      );\n      this.color1 = PfeAvatar.colors[this._colorIndex].color1;\n      this.color2 = PfeAvatar.colors[this._colorIndex].color2;\n\n      this._clear();\n      this._drawBackground();\n      if (this.pattern === PfeAvatar.patterns.squares) {\n        this._drawSquarePattern(arrPattern);\n      } else if (this.pattern === PfeAvatar.patterns.triangles) {\n        this._drawTrianglePattern(arrPattern);\n      }\n      // this._drawGradient();\n    }\n  }\n\n  _clear() {\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n\n  _drawBackground() {\n    this._ctx.fillStyle = this.color1;\n    this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n\n  _drawSquarePattern(pattern) {\n    this._ctx.fillStyle = this.color2;\n    if (this._ctx) {\n      let i = pattern.length;\n      while (i--) {\n        if (pattern[i]) {\n          this._drawMirroredSquare(i % 4, Math.floor(i / 4));\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw a square at the given position, mirrored onto both the left and right half of the canvas.\n   */\n  _drawMirroredSquare(x, y) {\n    if (this._ctx) {\n      this._drawSquare(x, y);\n      this._drawSquare(7 - x, y);\n    }\n  }\n\n  _drawSquare(x, y) {\n    this._ctx.fillRect(\n      this._squareSize * x,\n      this._squareSize * y,\n      this._squareSize,\n      this._squareSize\n    );\n  }\n\n  _drawTrianglePattern(pattern) {\n    this._ctx.fillStyle = this.color2;\n    if (this._ctx) {\n      let i = pattern.length;\n      while (i--) {\n        if (pattern[i]) {\n          const x = Math.floor(i / 2) % 2;\n          const y = Math.floor(i / 4);\n          const alt = i % 4;\n\n          const p1 = [x, y];\n          const p2 = [x, y];\n          const p3 = [x, y];\n\n          switch (alt) {\n            case 0:\n              p2[1]++;\n              p3[0]++;\n              p3[1]++;\n              break;\n            case 1:\n              p2[0]++;\n              p3[0]++;\n              p3[1]++;\n              break;\n            case 2:\n              p2[0]++;\n              p3[1]++;\n              break;\n            case 3:\n              p1[0]++;\n              p2[0]++;\n              p2[1]++;\n              p3[1]++;\n              break;\n          }\n\n          this._drawMirroredTriangle(p1, p2, p3);\n        }\n      }\n    }\n  }\n\n  /**\n   * Draw a square at the given position in the top-left quadrant of the\n   * canvas, and mirrored to the other three quadrants.\n   */\n  _drawMirroredTriangle(p1, p2, p3) {\n    if (this._ctx) {\n      this._drawTriangle(p1, p2, p3);\n      this._drawTriangle(\n        [4 - p1[0], p1[1]],\n        [4 - p2[0], p2[1]],\n        [4 - p3[0], p3[1]]\n      );\n    }\n  }\n\n  _drawTriangle(p1, p2, p3) {\n    this._ctx.beginPath();\n    this._ctx.moveTo(...p1.map(c => c * this._triangleSize));\n    this._ctx.lineTo(...p2.map(c => c * this._triangleSize));\n    this._ctx.lineTo(...p3.map(c => c * this._triangleSize));\n    this._ctx.closePath();\n    this._ctx.fill();\n    this._ctx.fill();\n  }\n\n  _drawGradient() {\n    const gradient = this._ctx.createLinearGradient(\n      0,\n      this._canvas.height,\n      this._canvas.width,\n      0\n    );\n    const color = this.color2;\n    let gradientColor1 = color;\n    let gradientColor2 = color;\n    if (/^#[A-f0-9]{3}$/.test(color)) {\n      // color is of the form \"#fff\"\n      gradientColor1 += \"c\";\n      gradientColor2 += \"0\";\n    } else if (/^#[A-f0-9]{6}$/.test(color)) {\n      // color is of the form \"#ffffff\"\n      gradientColor1 += \"cc\";\n      gradientColor2 += \"00\";\n    }\n    gradient.addColorStop(0, gradientColor1);\n    gradient.addColorStop(1, gradientColor2);\n    gradient.addColorStop(1, gradientColor1);\n    this._ctx.fillStyle = gradient;\n    this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n}\n\nPfeAvatar._registerColors();\n\nPFElement.create(PfeAvatar);\n\nexport default PfeAvatar;\n","/**\n * djb2 string hashing function.\n *\n * @see http://www.cse.yorku.ca/~oz/hash.html\n * @param {String} str the string to hash.\n * @return {Number} a positive integer\n */\n\nfunction hash(str) {\n  let hash = 5381;\n  let i = str.length;\n\n  while (i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  return hash >>> 0;\n}\n\nexport { hash };\n"],"names":["h2rgb","v1","v2","vH","PfeAvatar","PFElement","this","getAttribute","val","setAttribute","href","patterns","squares","name","log","Object","values","_initCanvas","dispatchEvent","CustomEvent","tag","attr","oldValue","newValue","arguments","connected","update","addEventListener","_this2","_canvas","shadowRoot","querySelector","size","var","replace","width","height","_squareSize","_triangleSize","_ctx","getContext","length","nameArr","trim","split","fi","li","initials","textContent","join","_setInitials","_findInitials","hasAttribute","src","bitPattern","str","hash","i","charCodeAt","toString","arrPattern","map","Number","n","_colorIndex","Math","floor","colors","parseInt","pow","color1","color2","_clear","_drawBackground","pattern","_drawSquarePattern","triangles","_drawTrianglePattern","clearRect","fillStyle","fillRect","_drawMirroredSquare","x","y","_drawSquare","p1","p2","p3","_drawMirroredTriangle","_drawTriangle","beginPath","moveTo","c","_this3","lineTo","closePath","fill","gradient","createLinearGradient","color","gradientColor1","gradientColor2","test","addColorStop","defaultColors","forEach","colorCode","exec","shift","_registerColor","push","_adjustColor","hsl","_R","_G","_B","L","H","S","r","max","min","g","b","var_min","var_max","del_max","del_r","del_g","del_b","_H","_S","_L","R","G","B","a","_registerColors","create"],"mappings":"qQAAA,SAASA,EAAMC,EAAIC,EAAIC,UACjBA,EAAK,IAAGA,GAAM,GACT,EAALA,IAAQA,GAAM,GACd,EAAIA,EAAK,EAAUF,EAAiB,GAAXC,EAAKD,GAAUE,EACxC,EAAIA,EAAK,EAAUD,EACnB,EAAIC,EAAK,EAAUF,GAAMC,EAAKD,IAAO,EAAI,EAAIE,GAAM,EAChDF,6pBCoBHG,gWAyIIA,uUAzIcC,i3DAkFb,yDAIA,sDAmBAC,KAAKC,aAAa,sBAGlBC,UACAF,KAAKG,aAAa,OAAQD,sCAI1BF,KAAKC,aAAa,qBAGnBG,UACCJ,KAAKG,aAAa,MAAOC,0CAIzBJ,KAAKC,aAAa,YAAcH,EAAUO,SAASC,sBAGhDC,MACLT,EAAUO,SAASE,UAQjBP,KAAKG,aAAa,UAAWI,QAP7BC,wBACiBD,4BAA8BE,OAAOC,OACvDZ,EAAUO,+CAlDT,8DAYA,CAAC,OAAQ,UAAW,MAAO,gDAI3B,WACM,oBACF,uDAKJ,mMA0CFM,mBAEAC,cACH,IAAIC,YAAef,EAAUgB,iBAAiB,UACnC,sDAKUC,EAAMC,EAAUC,sHACLC,WAY9BlB,KAAKmB,eACFC,cAEAC,iBAAoBvB,EAAUgB,iBAAiB,kBAAMQ,EAAKF,sDAK5DG,QAAUvB,KAAKwB,WAAWC,cAAc,cACvCC,EAAO1B,KAAK2B,IAAI,uBAAuBC,QAAQ,MAAO,SACvDL,QAAQM,MAAQH,OAChBH,QAAQO,OAASJ,OAEjBK,YAAc/B,KAAKuB,QAAQM,MAAQ,OACnCG,cAAgBhC,KAAKuB,QAAQM,MAAQ,OAErCI,KAAOjC,KAAKuB,QAAQW,WAAW,4CAGxB3B,OACPA,GAAwB,IAAhBA,EAAK4B,aACT,OAEHC,EAAU7B,EAAK8B,OAAOC,MAAM,OAC5BC,EAAKH,EAAQ,GAAG,GAChBI,EAAsB,EAAjBJ,EAAQD,OAAaC,EAAQA,EAAQD,OAAS,GAAG,GAAK,UAKzDC,EAAQD,aACT,QACI,CAACI,QACL,QACI,CAACA,EAAIH,EAAQ,GAAG,GAAII,iBAEpB,CAACD,EAAIC,yCAILC,QACNjB,WAAWC,cAAc,aAAaiB,YAAcD,EAASE,KAAK,6CA0DlEC,aAAa5C,KAAK6C,cAAc7C,KAAKO,OAGtCP,KAAK8C,aAAa,YACftB,WAAWC,cAAc,OAAOsB,IAAM/C,KAAK+C,QAC3C,KACCC,EChSZ,SAAcC,WACRC,EAAO,KACPC,EAAIF,EAAId,OAELgB,KACU,GAAPD,EAAaD,EAAIG,aAAaD,UAGjCD,IAAS,EDwROA,CAAKlD,KAAKO,MAAM8C,SAAS,GACtCC,EAAaN,EAAWV,MAAM,IAAIiB,IAAI,mBAAKC,OAAOC,UACnDC,YAAcC,KAAKC,MACrB9D,EAAU+D,OAAO1B,OAAS2B,SAASd,EAAY,GAAMW,KAAKI,IAAI,EAAG,UAE/DC,OAASlE,EAAU+D,OAAO7D,KAAK0D,aAAaM,YAC5CC,OAASnE,EAAU+D,OAAO7D,KAAK0D,aAAaO,YAE5CC,cACAC,kBACDnE,KAAKoE,UAAYtE,EAAUO,SAASC,aACjC+D,mBAAmBf,GACftD,KAAKoE,UAAYtE,EAAUO,SAASiE,gBACxCC,qBAAqBjB,0CAOzBrB,KAAKuC,UAAU,EAAG,EAAGxE,KAAKuB,QAAQM,MAAO7B,KAAKuB,QAAQO,uDAItDG,KAAKwC,UAAYzE,KAAKgE,YACtB/B,KAAKyC,SAAS,EAAG,EAAG1E,KAAKuB,QAAQM,MAAO7B,KAAKuB,QAAQO,mDAGzCsC,WACZnC,KAAKwC,UAAYzE,KAAKiE,OACvBjE,KAAKiC,aACHkB,EAAIiB,EAAQjC,OACTgB,KACDiB,EAAQjB,SACLwB,oBAAoBxB,EAAI,EAAGQ,KAAKC,MAAMT,EAAI,gDASnCyB,EAAGC,GACjB7E,KAAKiC,YACF6C,YAAYF,EAAGC,QACfC,YAAY,EAAIF,EAAGC,wCAIhBD,EAAGC,QACR5C,KAAKyC,SACR1E,KAAK+B,YAAc6C,EACnB5E,KAAK+B,YAAc8C,EACnB7E,KAAK+B,YACL/B,KAAK+B,0DAIYqC,WACdnC,KAAKwC,UAAYzE,KAAKiE,OACvBjE,KAAKiC,aACHkB,EAAIiB,EAAQjC,OACTgB,QACDiB,EAAQjB,GAAI,KACRyB,EAAIjB,KAAKC,MAAMT,EAAI,GAAK,EACxB0B,EAAIlB,KAAKC,MAAMT,EAAI,GAGnB4B,EAAK,CAACH,EAAGC,GACTG,EAAK,CAACJ,EAAGC,GACTI,EAAK,CAACL,EAAGC,UAJH1B,EAAI,QAOT,IACA,OACA,OACA,gBAEA,IACA,OACA,OACA,gBAEA,IACA,OACA,gBAEA,IACA,OACA,OACA,OACA,UAIF+B,sBAAsBH,EAAIC,EAAIC,kDAUrBF,EAAIC,EAAIC,GACxBjF,KAAKiC,YACFkD,cAAcJ,EAAIC,EAAIC,QACtBE,cACH,CAAC,EAAIJ,EAAG,GAAIA,EAAG,IACf,CAAC,EAAIC,EAAG,GAAIA,EAAG,IACf,CAAC,EAAIC,EAAG,GAAIA,EAAG,4CAKPF,EAAIC,EAAIC,yBACfhD,KAAKmD,oBACLnD,MAAKoD,iBAAUN,EAAGxB,IAAI,mBAAK+B,EAAIC,EAAKvD,0BACpCC,MAAKuD,iBAAUR,EAAGzB,IAAI,mBAAK+B,EAAIC,EAAKvD,0BACpCC,MAAKuD,iBAAUP,EAAG1B,IAAI,mBAAK+B,EAAIC,EAAKvD,uBACpCC,KAAKwD,iBACLxD,KAAKyD,YACLzD,KAAKyD,mDAIJC,EAAW3F,KAAKiC,KAAK2D,qBACzB,EACA5F,KAAKuB,QAAQO,OACb9B,KAAKuB,QAAQM,MACb,GAEIgE,EAAQ7F,KAAKiE,OACf6B,EAAiBD,EACjBE,EAAiBF,EACjB,iBAAiBG,KAAKH,OAEN,OACA,KACT,iBAAiBG,KAAKH,QAEb,QACA,QAEXI,aAAa,EAAGH,KAChBG,aAAa,EAAGF,KAChBE,aAAa,EAAGH,QACpB7D,KAAKwC,UAAYkB,OACjB1D,KAAKyC,SAAS,EAAG,EAAG1E,KAAKuB,QAAQM,MAAO7B,KAAKuB,QAAQO,2EAlNrD+B,OAAS,IAEZ9D,EAAU4B,IAAI,yBAA2B3B,KAAKkG,eAEpC5D,MAAM,OAAO6D,QAAQ,gBAC3B/B,gBACIgC,EAAUjE,aACX,OACO,oCAAoCkE,KAAKD,GACtC,GACHE,YACFT,EAAQzB,EAAQb,IAAI,mBAAKO,SAASwB,EAAIA,EAAG,QAC1CiB,eAAeV,UAEVrF,kCAAkC4F,cAG3C,OACO,6CAA6CC,KACrDD,GAEW,GACHE,YACFT,EAAQzB,EAAQb,IAAI,mBAAKO,SAASwB,EAAG,QACtCiB,eAAeV,UAEVrF,kCAAkC4F,MAK7CpG,KAAK6D,8CAGQgC,KACVhC,OAAO2C,KAAK,eACLX,EAAMlD,KAAK,uBACX3C,KAAKyG,aAAaZ,GAAOlD,KAAK,gDAI7BkD,OAGZa,ED7NH,SAAiBC,EAAIC,EAAIC,OACpBC,EAANC,SAAGC,SAMDC,EAJItD,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI,IAAKR,IAItB,IACRS,EAJIzD,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI,IAAKP,IAItB,IACRS,EAJI1D,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI,IAAKN,IAItB,IAERS,EAAU3D,KAAKwD,IAAIxD,KAAKwD,IAAIF,EAAGG,GAAIC,GACnCE,EAAU5D,KAAKuD,IAAIvD,KAAKuD,IAAID,EAAGG,GAAIC,GACnCG,EAAUD,EAAUD,QAErBC,EAAUD,GAAW,EAEV,IAAZE,MACE,MAEC,GACDV,EAAI,GACFU,GAAWD,EAAUD,GAErBE,GAAW,EAAID,EAAUD,OAGzBG,IAAUF,EAAUN,GAAK,EAAIO,EAAU,GAAKA,EAC5CE,IAAUH,EAAUH,GAAK,EAAII,EAAU,GAAKA,EAC5CG,IAAUJ,EAAUF,GAAK,EAAIG,EAAU,GAAKA,EAE9CP,GAAKM,IACHI,EAAQD,EACHN,GAAKG,IACV,EAAI,EAAIE,EAAQE,EACXN,GAAKE,MACV,EAAI,EAAIG,EAAQD,GAGlBV,EAAI,KACD,EACQ,EAAJA,OACJ,SAIF,CAACA,EAAGC,EAAGF,mBC+KWjB,aAInB,IANS,GAMHa,EAAI,IALA,GAAA,GDpQX,SAAiBkB,EAAIC,EAAIC,OAC1BC,SAAGC,SAAGC,SAEJlB,EAAIpD,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI,EAAGS,IAC5BZ,EAAIrD,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI,EAAGU,IAC5Bf,EAAInD,KAAKuD,IAAI,EAAGvD,KAAKwD,IAAI,EAAGW,OAEzB,GAALd,QACM,IAAJF,MAGC,KACDoB,EAAGb,WAUH,IAAM3H,IAFN,EAAIoH,KANJA,EAAI,GACFA,GAAK,EAAIE,GAETF,EAAIE,EAAIA,EAAIF,GAKCO,EAAGN,EAAI,EAAI,KAC1B,IAAMrH,EAAMwI,EAAGb,EAAGN,KAClB,IAAMrH,EAAMwI,EAAGb,EAAGN,EAAI,EAAI,SAGzB,CAACgB,EAAGC,EAAGC,mBCgPMvB,oBAoKtB5G,EAAUqI,kBAEVpI,EAAUqI,OAAOtI"}