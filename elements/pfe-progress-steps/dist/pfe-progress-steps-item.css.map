{"version":3,"sources":["pfe-progress-steps-item.scss","pfe-progress-steps-item.css","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"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","file":"pfe-progress-steps-item.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n\n\n$LOCAL: progress-steps-item;\n\n// Example local variable, using BEM format\n// --pfe-progress-steps__region--Property: value;\n\n// This variable is global so that helper functions can reference it\n$LOCAL-VARIABLES: (\n  // width needs to be definitively set to ensure\n  // the line is calculated properly.\n  Width: auto,\n  circle: (\n    Size: 32px,\n    Color: #06c,\n    // we need to provide a background for only a portion of the icon. we use radial-gradient\n    // fill the checkmark icon but not be visible on the sides of the icon.\n    Background: radial-gradient(circle, rgba(255,255,255,1) 60%, rgba(255,255,255,0) 61%),\n  ),\n  spacer: 8px, // --pf-global--spacer--sm\n  hover: (\n    Color: #06c\n  )\n);\n\n:host {\n  // Avoid printing local variables on host, instead use the pfe-local() function to set property values\n  // Example: color: pfe-local(Color);\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-progress-steps-item {\n  &__container {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    color: #151515;\n    font-size: 16px;\n    // This is important so the .pfe-progress-steps\n    // can dynamically set the width of the items in horizontal\n    // layout. If this isn't set then the items are unable\n    // to line up correctly.\n    width: pfe-local(Width);\n  }\n\n  &__circle-wrapper {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    position: relative;\n    // Example Stack\n    // @todo PFE philosophy is to try to keep the amount of public hooks available to a reasonable level\n    // In this case, we would only want to expose circle size as a hook.\n    // @todo use the pfe-navigation method where we use mulitple maps to reference fallback values\n    width: 32px;\n    width: var(--pfe-#{$LOCAL}__circle-wrapper--Width, var(--pfe-#{$LOCAL}__circle--Width, var(--pfe-#{$LOCAL}__circle--Size, 32px)));\n    height: 32px;\n    height: var(--pfe-#{$LOCAL}__circle-wrapper--Height, var(--pfe-#{$LOCAL}__circle--Height, var(--pfe-#{$LOCAL}__circle--Size, 32px)));\n    margin: auto;\n    position: relative;\n  }\n  &__circle--inner {\n    display: block;\n    position: absolute;\n    content: \"\";\n    border-radius: 50%;\n    border: 2px solid #D2D2D2;\n    width: 32px;\n    width: calc( var(--pfe-#{$LOCAL}__circle-inner--Width, var(--pfe-#{$LOCAL}__circle--Width, var(--pfe-#{$LOCAL}__circle--Size, 32px))) / 2.2);\n    height: 32px;\n    height: calc( var(--pfe-#{$LOCAL}__circle-inner--Height, var(--pfe-#{$LOCAL}__circle--Height, var(--pfe-#{$LOCAL}__circle--Size, 32px))) / 2.2);\n    transform: translate(-50%, -50%);\n    background: white;\n    top: 50%;\n    left: 50%;\n    z-index: 1;\n  }\n  &__circle--outer {\n    display: none;\n    position: absolute;\n    content: \"\";\n    border-radius: 50%;\n    opacity: 0.15;\n    width: 32px;\n    width: var(--pfe-#{$LOCAL}__circle-outer--Width, var(--pfe-#{$LOCAL}__circle--Width, var(--pfe-#{$LOCAL}__circle--Size, 32px)));\n    height: 32px;\n    height: var(--pfe-#{$LOCAL}__circle-outer--Height, var(--pfe-#{$LOCAL}__circle--Height, var(--pfe-#{$LOCAL}__circle--Size, 32px)));\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1;\n  }\n  &__circle--icon {\n    height: 20px;\n    width: 20px;\n  }\n  &__title,\n  &__title slot::slotted(*) {\n    font-size: 16px;\n    // @todo Use the new typography mixin\n    // @include pfe-typography(md, $type: \"title\", $base: false, $region: title);\n    color: var(--pfe-progress-steps-item__title--Color, #151515);\n  }\n  &__description {\n    color: var(--pfe-progress-steps-item__description--Color, #6A6E73);\n    font-size: 14px;\n    // @todo Use the new typography mixin\n    // @include pfe-typography(sm, $type: \"title\", $base: false, $region: title);\n    text-align: center;\n  }\n  &__spacer {\n    width: auto;\n    margin: calc(#{pfe-local(spacer)} / 2);\n  }\n  &__content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n:host([hasLink]) {\n  cursor: pointer;\n}\n\n:host([hasLink]:is(:focus,:hover)) {\n  --pfe-progress-steps-item__title--Color: var(--pfe-progress-steps-item__focus__text--Color, #0066CC);\n  --pfe-progress-steps-item__description--Color: var(--pfe-progress-steps-item__focus__text--Color, #0066CC);\n  text-decoration: var(--pfe-progress-steps-item__focus--TextDecoration, none);\n}\n\n:host([state=\"active\"]) {\n  .pfe-progress-steps-item {\n    &__circle--inner {\n      height: 20px;\n      width: 20px;\n      border: none;\n      background-color: pfe-local(Color, $region: circle);\n    }\n    &__circle--outer {\n      display: block;\n      background-color: pfe-local(Color, $region: circle);\n    }\n    &__title,\n    &__title slot::slotted(*) {\n      // leave with no fallback so it inherits correctly\n      color: var(--pfe-progress-steps-item__active__title--Color, #0066CC);\n      font-weight: 500;\n    }\n  }\n}\n\n:host([state=\"done\"]) {\n  .pfe-progress-steps-item {\n    &__circle--inner {\n      display: none;\n    }\n    &__circle--icon {\n      display: block;\n      background: pfe-local(Background, $region: circle);\n      --pf-global--success-color--100: #3E8635;\n    }\n  }\n}\n\n:host([state=\"error\"]) {\n  --pfe-progress-steps-item__title--Color: #C9190B;\n  --pfe-progress-steps-item__description--Color: #C9190B;\n  .pfe-progress-steps-item {\n    &__circle--inner {\n      display: none;\n    }\n    &__circle--icon {\n      display: block;\n      background: pfe-local(Background, $region: circle);\n      --pf-global--danger-color--100: #C9190B;\n    }\n  }\n}\n\n:host([vertical]) {\n  .pfe-progress-steps-item {\n    &__container {\n      flex-direction: row;\n      align-items: flex-start;\n    }\n    &__circle-wrapper {\n      // we need to get rid of the margin auto to make the circle raise to\n      // the top of the vertical container\n      margin: 0;\n    }\n    &__title {\n      // @todo: we are lining up the circles and the title, basically faking flexbox\n      // we should handle this in the markup or with CSS grid.\n      margin-top: var(--pfe-#{$LOCAL}__vertical__title--MarginTop, calc(var(--pfe-#{$LOCAL}__circle--Size, 32px) / 6));\n    }\n    &__content {\n      align-items: flex-start;\n    }\n  }\n}",":host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-progress-steps-item__container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #151515;\n  font-size: 16px;\n  width: var(--pfe-progress-steps-item--Width, auto);\n}\n\n.pfe-progress-steps-item__circle-wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  width: 32px;\n  width: var(--pfe-progress-steps-item__circle-wrapper--Width, var(--pfe-progress-steps-item__circle--Width, var(--pfe-progress-steps-item__circle--Size, 32px)));\n  height: 32px;\n  height: var(--pfe-progress-steps-item__circle-wrapper--Height, var(--pfe-progress-steps-item__circle--Height, var(--pfe-progress-steps-item__circle--Size, 32px)));\n  margin: auto;\n  position: relative;\n}\n\n.pfe-progress-steps-item__circle--inner {\n  display: block;\n  position: absolute;\n  content: \"\";\n  border-radius: 50%;\n  border: 2px solid #D2D2D2;\n  width: 32px;\n  width: calc( var(--pfe-progress-steps-item__circle-inner--Width, var(--pfe-progress-steps-item__circle--Width, var(--pfe-progress-steps-item__circle--Size, 32px))) / 2.2);\n  height: 32px;\n  height: calc( var(--pfe-progress-steps-item__circle-inner--Height, var(--pfe-progress-steps-item__circle--Height, var(--pfe-progress-steps-item__circle--Size, 32px))) / 2.2);\n  transform: translate(-50%, -50%);\n  background: white;\n  top: 50%;\n  left: 50%;\n  z-index: 1;\n}\n\n.pfe-progress-steps-item__circle--outer {\n  display: none;\n  position: absolute;\n  content: \"\";\n  border-radius: 50%;\n  opacity: 0.15;\n  width: 32px;\n  width: var(--pfe-progress-steps-item__circle-outer--Width, var(--pfe-progress-steps-item__circle--Width, var(--pfe-progress-steps-item__circle--Size, 32px)));\n  height: 32px;\n  height: var(--pfe-progress-steps-item__circle-outer--Height, var(--pfe-progress-steps-item__circle--Height, var(--pfe-progress-steps-item__circle--Size, 32px)));\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1;\n}\n\n.pfe-progress-steps-item__circle--icon {\n  height: 20px;\n  width: 20px;\n}\n\n.pfe-progress-steps-item__title,\n.pfe-progress-steps-item__title slot::slotted(*) {\n  font-size: 16px;\n  color: var(--pfe-progress-steps-item__title--Color, #151515);\n}\n\n.pfe-progress-steps-item__description {\n  color: var(--pfe-progress-steps-item__description--Color, #6A6E73);\n  font-size: 14px;\n  text-align: center;\n}\n\n.pfe-progress-steps-item__spacer {\n  width: auto;\n  margin: calc(var(--pfe-progress-steps-item--spacer, 8px) / 2);\n}\n\n.pfe-progress-steps-item__content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n:host([hasLink]) {\n  cursor: pointer;\n}\n\n:host([hasLink]:is(:focus, :hover)) {\n  --pfe-progress-steps-item__title--Color: var(--pfe-progress-steps-item__focus__text--Color, #0066CC);\n  --pfe-progress-steps-item__description--Color: var(--pfe-progress-steps-item__focus__text--Color, #0066CC);\n  text-decoration: var(--pfe-progress-steps-item__focus--TextDecoration, none);\n}\n\n:host([state=\"active\"]) .pfe-progress-steps-item__circle--inner {\n  height: 20px;\n  width: 20px;\n  border: none;\n  background-color: var(--pfe-progress-steps-item__circle--Color, #06c);\n}\n\n:host([state=\"active\"]) .pfe-progress-steps-item__circle--outer {\n  display: block;\n  background-color: var(--pfe-progress-steps-item__circle--Color, #06c);\n}\n\n:host([state=\"active\"]) .pfe-progress-steps-item__title,\n:host([state=\"active\"]) .pfe-progress-steps-item__title slot::slotted(*) {\n  color: var(--pfe-progress-steps-item__active__title--Color, #0066CC);\n  font-weight: 500;\n}\n\n:host([state=\"done\"]) .pfe-progress-steps-item__circle--inner {\n  display: none;\n}\n\n:host([state=\"done\"]) .pfe-progress-steps-item__circle--icon {\n  display: block;\n  background: var(--pfe-progress-steps-item__circle--Background, radial-gradient(circle, white 60%, rgba(255, 255, 255, 0) 61%));\n  --pf-global--success-color--100: #3E8635;\n}\n\n:host([state=\"error\"]) {\n  --pfe-progress-steps-item__title--Color: #C9190B;\n  --pfe-progress-steps-item__description--Color: #C9190B;\n}\n\n:host([state=\"error\"]) .pfe-progress-steps-item__circle--inner {\n  display: none;\n}\n\n:host([state=\"error\"]) .pfe-progress-steps-item__circle--icon {\n  display: block;\n  background: var(--pfe-progress-steps-item__circle--Background, radial-gradient(circle, white 60%, rgba(255, 255, 255, 0) 61%));\n  --pf-global--danger-color--100: #C9190B;\n}\n\n:host([vertical]) .pfe-progress-steps-item__container {\n  flex-direction: row;\n  align-items: flex-start;\n}\n\n:host([vertical]) .pfe-progress-steps-item__circle-wrapper {\n  margin: 0;\n}\n\n:host([vertical]) .pfe-progress-steps-item__title {\n  margin-top: var(--pfe-progress-steps-item__vertical__title--MarginTop, calc(var(--pfe-progress-steps-item__circle--Size, 32px) / 6));\n}\n\n:host([vertical]) .pfe-progress-steps-item__content {\n  align-items: flex-start;\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"],"sourceRoot":"../src"}