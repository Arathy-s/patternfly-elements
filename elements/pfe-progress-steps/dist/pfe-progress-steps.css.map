{"version":3,"sources":["pfe-progress-steps.scss","pfe-progress-steps.css","../../pfe-sass/functions/_custom-properties.scss","../../pfe-sass/mixins/_mixins.scss"],"names":[],"mappings":"AAoBA;EAGE,cAAc;EAGd,sFAAwC;ACvB1C;;AD0BA;EACE,aAAa;ACvBf;;ADgCE;EACE,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,WAAW;EACX,yBAA8B;EAA9B,sCAA8B;MAA9B,sBAA8B;UAA9B,8BAA8B;EAC9B,kBAAkB;EAClB,wBAAuB;EAAvB,+BAAuB;MAAvB,qBAAuB;UAAvB,uBAAuB;AC7B3B;;ADgCE;EACE,SAAS;EACT,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,kBAAkB;EAClB,WAAW;EACX,wBAAgE;EAAhE,gEAAgE;EAChE,yBE0BgC;EF1BhC,yEE0BgC;EFzBhC,SAAS;EACT,mCAA2B;UAA3B,2BAA2B;AC7B/B;;AD+BE;EACE,cAAc;EACd,WAAW;EACX,gBEmBgC;EFnBhC,+DEmBgC;EFlBhC,QAAQ;AC5BZ;;ADgCA;EAKE,8EAAiC;ACjCnC;;ADoCA;EAIM,4BAAsB;EAAtB,6BAAsB;EAAtB,8BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;ACpC5B;;ADgCA;EASM,2DAA2D;EAC3D,4DAA4D;EAC5D,UAA0D;EAA1D,0DAA0D;EAE1D,uEAAuE;ACtC7E;;ADyBA;EAgBM,UAA0D;EAA1D,0DAA0D;EAC1D,SAAS;ACrCf;;AElDM;EH8FN;IG9F4F,UAAA;IHgGxF,aAAa;ECxCf;AACF","file":"pfe-progress-steps.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n\n$LOCAL: progress-steps;\n\n// Example local variable, using BEM format\n// --pfe-progress-steps__region--Property: value;\n\n// This variable is global so that helper functions can reference it\n$LOCAL-VARIABLES: (\n  item: (\n    Width: 75px\n  ),\n  progress-bar: (\n    Color: #D2D2D2,\n    Fill: #06c,\n  ),\n);\n\n:host {\n  // Avoid printing local variables on host, instead use the pfe-local() function to set property values\n  // Example: color: pfe-local(Color);\n  display: block;\n  // We have to set the size of the circle size here so our vertical progress bar knows how much\n  // offset to do.\n  --pfe-progress-steps-item__circle--Size: var(--pfe-progress-steps__circle--Size, 32px);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-progress-steps {\n  // container? Yeah it's a good question. I originally want to try have the entired\n  // BEM markup in the render function (meaning the top level div having a class of .pfe-alert)\n  // but that doesn't work with Shadydom. So I just swapped it out for this container div for now.\n  // I like the encapsulation and having declaritively having all of the aria states in the render\n  // function. But I'm still on the fence. :shrug:\n  &__container {\n    display: flex;\n    width: auto;\n    justify-content: space-between;\n    position: relative;\n    align-items: flex-start;\n  }\n\n  &__progress-bar {\n    top: 15px;\n    display: flex;\n    position: absolute;\n    height: 2px;\n    width: calc(100% - var(--pfe-progress-steps__item--Width, 75px));\n    background-color: pfe-local(Color, $region: progress-bar);\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  &__progress-bar-fill {\n    display: block;\n    height: 2px;\n    background: pfe-local(Fill, $region: progress-bar);\n    width: 0;\n  }\n}\n\n:host(:not([vertical])) {\n  // Set the widths on each item the same so that the progress bar\n  // works correctly.\n  // @todo: is there a helper function to print the local variable here?\n  // I.e. I should be printing 75px.\n  --pfe-progress-steps-item--Width: var(--pfe-progress-steps__item--Width, 75px);\n}\n\n:host([vertical]) {\n  & .pfe-progress-steps {\n    &__container {\n      // Make everything vertical\n      flex-direction: column;\n    }\n\n    &__progress-bar {\n      // Position the progress bar correctly over the circle\n      top: calc(var(--pfe-progress-steps-item__circle--Size) / 2);\n      left: calc(var(--pfe-progress-steps-item__circle--Size) / 2);\n      width: var(--pfe-progress-steps__progress-bar--Width, 2px);\n      // @todo: this is a hack. trying to guess\n      height: calc(100% - var(--pfe-progress-steps-item__circle--Size) * 1.3);\n    }\n    &__progress-bar-fill {\n      width: var(--pfe-progress-steps__progress-bar--Width, 2px);\n      height: 0;\n    }\n  }\n}\n\n// @todo This definitely would need some IE love since it's flexbox and\n// driven by CSS variables so I'm just not displaying it in IE for now.\n.pfe-progress-steps {\n  @include browser-query(ie11) {\n    display: none;\n  }\n}",":host {\n  display: block;\n  --pfe-progress-steps-item__circle--Size: var(--pfe-progress-steps__circle--Size, 32px);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.pfe-progress-steps__container {\n  display: flex;\n  width: auto;\n  justify-content: space-between;\n  position: relative;\n  align-items: flex-start;\n}\n\n.pfe-progress-steps__progress-bar {\n  top: 15px;\n  display: flex;\n  position: absolute;\n  height: 2px;\n  width: calc(100% - var(--pfe-progress-steps__item--Width, 75px));\n  background-color: var(--pfe-progress-steps__progress-bar--Color, #D2D2D2);\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.pfe-progress-steps__progress-bar-fill {\n  display: block;\n  height: 2px;\n  background: var(--pfe-progress-steps__progress-bar--Fill, #06c);\n  width: 0;\n}\n\n:host(:not([vertical])) {\n  --pfe-progress-steps-item--Width: var(--pfe-progress-steps__item--Width, 75px);\n}\n\n:host([vertical]) .pfe-progress-steps__container {\n  flex-direction: column;\n}\n\n:host([vertical]) .pfe-progress-steps__progress-bar {\n  top: calc(var(--pfe-progress-steps-item__circle--Size) / 2);\n  left: calc(var(--pfe-progress-steps-item__circle--Size) / 2);\n  width: var(--pfe-progress-steps__progress-bar--Width, 2px);\n  height: calc(100% - var(--pfe-progress-steps-item__circle--Size) * 1.3);\n}\n\n:host([vertical]) .pfe-progress-steps__progress-bar-fill {\n  width: var(--pfe-progress-steps__progress-bar--Width, 2px);\n  height: 0;\n}\n\n@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n  .pfe-progress-steps {\n    /* IE10+ */\n    display: none;\n  }\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) { /* IE10+ */\n        @content;\n      }\n    }\n    @if $browser == edge12 {\n      @supports (-ms-accelerator: true) { /* Microsoft Edge Browser 12+ */\n        @content;\n      }\n    }\n    @if $browser == edge {\n      @supports (-ms-ime-align: auto) { /* Microsoft Edge Browser 16+ (All) */\n        @content;\n      }\n    }\n    @if $browser == firefox {\n      @media all and (min--moz-device-pixel-ratio:0) { /* Mozilla Firefox (All) */\n        @content;\n      }\n    }\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: pfe-var(surface--border-style);\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n\n@mixin pfe-hidden {\n  @at-root #{&}([hidden]) {\n    display: none;\n  }\n}\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: pfe-var(surface--border-width) pfe-var(surface--border-style) transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;\n}\n\n@mixin pfe-local-debug($map: $LOCAL-VARIABLES) {\n  :root {\n      @include pfe-print-local($map);\n  }\n} "],"sourceRoot":"../src"}