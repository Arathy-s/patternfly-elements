{"version":3,"file":"pfelement.min.js","sources":["../_temp/reveal.js","../_temp/attrDefValidators.js","../_temp/polyfills--pfelement.js","../_temp/pfelement.js"],"sourcesContent":["let logger = () => null;\n\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","/**\n * Verify that a property definition's `type` field contains one of the allowed\n * types.\n *\n * Allowed types are String, Number, and Boolean.  If `type` is falsy, it\n * defaults to String.\n */\nexport function isAllowedType(definition) {\n  return [String, Number, Boolean].includes(definition.type || String);\n}\n\n/**\n * Verify that a property definition's `default` value is of the correct type.\n *\n * A `default` value is valid if it's of the same type as the `type`\n * definition.  Or, if there is no `type` definition, then it must be a String\n * (the default value for `type`).\n */\nexport function isValidDefaultType(definition) {\n  return definition.hasOwnProperty(\"default\") && definition.default.constructor === definition.type;\n}\n","// @POLYFILL  Array.includes\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, \"includes\", {\n    value: function(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      var n = fromIndex | 0;\n\n      // 5. If n â‰¥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === \"number\" && typeof y === \"number\" && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        }\n        // c. Increase k by 1.\n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    }\n  });\n}\n\n// @POLYFILL Object.entries\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\nif (!Object.entries) {\n  Object.entries = function(obj) {\n    var ownProps = Object.keys(obj),\n      i = ownProps.length,\n      resArray = new Array(i); // preallocate the Array\n    while (i--) resArray[i] = [ownProps[i], obj[ownProps[i]]];\n\n    return resArray;\n  };\n}\n\n// @POLYFILL String.startsWith\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#polyfill\nif (!String.prototype.startsWith) {\n  Object.defineProperty(String.prototype, \"startsWith\", {\n    value: function(search, rawPos) {\n      var pos = rawPos > 0 ? rawPos | 0 : 0;\n      return this.substring(pos, pos + search.length) === search;\n    }\n  });\n}\n","/*!\n * PatternFly Elements: PFElement 1.5.1\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport { autoReveal } from \"./reveal.js\";\nimport { isAllowedType, isValidDefaultType } from \"./attrDefValidators.js\";\n// Import polyfills: includes\nimport \"./polyfills--pfelement.js\";\n\nconst prefix = \"pfe\";\n\nclass PFElement extends HTMLElement {\n  /**\n   * A boolean value that indicates if the logging should be printed to the console; used for debugging.\n   *\n   * @example In a JS file or script tag: `PFElement._debugLog = true;`\n   */\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      PFElement._debugLog = !!preference;\n    }\n    return PFElement._debugLog;\n  }\n\n  /**\n   * A boolean value that indicates if the performance should be tracked.\n   *\n   * @example In a JS file or script tag: `PFElement._trackPerformance = true;`\n   */\n  static trackPerformance(preference = null) {\n    if (preference !== null) {\n      PFElement._trackPerformance = !!preference;\n    }\n    return PFElement._trackPerformance;\n  }\n\n  /**\n   * A logging wrapper which checks the debugLog boolean and prints to the console if true.\n   *\n   * @example `PFElement.log(\"Hello\")`\n   */\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  /**\n   * Local logging that outputs the tag name as a prefix automatically\n   *\n   * @example In a component's function: `this.log(\"Hello\")`\n   */\n  log(...msgs) {\n    PFElement.log(`[${this.tag}${this.id ? `#${this.id}` : \"\"}]: ${msgs.join(\", \")}`);\n  }\n\n  /**\n   * A console warning wrapper which formats your output with useful debugging information.\n   *\n   * @example `PFElement.warn(\"Hello\")`\n   */\n  static warn(...msgs) {\n    console.warn(...msgs);\n  }\n\n  /**\n   * Local warning wrapper that outputs the tag name as a prefix automatically.\n   *\n   * @example In a component's function: `this.warn(\"Hello\")`\n   */\n  warn(...msgs) {\n    PFElement.warn(`[${this.tag}${this.id ? `#${this.id}` : ``}]: ${msgs.join(\", \")}`);\n  }\n\n  /**\n   * A console error wrapper which formats your output with useful debugging information.\n   *\n   * @example `PFElement.error(\"Hello\")`\n   */\n  static error(...msgs) {\n    throw new Error([...msgs].join(\" \"));\n  }\n\n  /**\n   * Local error wrapper that outputs the tag name as a prefix automatically.\n   *\n   * @example In a component's function: `this.error(\"Hello\")`\n   */\n  error(...msgs) {\n    PFElement.error(`[${this.tag}${this.id ? `#${this.id}` : ``}]:`, ...msgs);\n  }\n\n  /**\n   * A global definition of component types (a general way of defining the purpose of a\n   * component and how it is put together).\n   */\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n\n  /**\n   * The current version of a component; set by the compiler using the package.json data.\n   */\n  static get version() {\n    return \"{{version}}\";\n  }\n\n  /**\n   * A local alias to the static version.\n   *\n   * @example: In the console: `PfeAccordion.version`\n   */\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  /**\n   * Global property definitions: properties managed by the base class that apply to all components.\n   */\n  static get properties() {\n    return {\n      pfelement: {\n        title: \"Upgraded flag\",\n        type: Boolean,\n        default: true,\n        observer: \"_upgradeObserver\"\n      },\n      on: {\n        title: \"Context\",\n        description: \"Describes the visual context (backgrounds).\",\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        default: el => el.contextVariable,\n        observer: \"_onObserver\"\n      },\n      context: {\n        title: \"Context hook\",\n        description: \"Lets you override the system-set context.\",\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        observer: \"_contextObserver\"\n      },\n      // @TODO: Deprecated with 1.0\n      oldTheme: {\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        alias: \"context\",\n        attr: \"pfe-theme\"\n      },\n      _style: {\n        title: \"Custom styles\",\n        type: String,\n        attr: \"style\",\n        observer: \"_inlineStyleObserver\"\n      },\n      type: {\n        title: \"Component type\",\n        type: String,\n        values: [\"container\", \"content\", \"combo\"]\n      }\n    };\n  }\n\n  static get observedAttributes() {\n    const properties = this.allProperties;\n    if (properties) {\n      const oa = Object.keys(properties)\n        .filter(prop => properties[prop].observer || properties[prop].cascade || properties[prop].alias)\n        .map(p => this._convertPropNameToAttrName(p));\n      return [...oa];\n    }\n  }\n\n  /**\n   * A quick way to fetch a random ID value.\n   * _Note:_ All values are prefixes with `pfe` automatically to ensure an ID-safe value is returned.\n   *\n   * @example: In a component's JS: `this.id = this.randomID;`\n   */\n  get randomId() {\n    return (\n      `${prefix}-` +\n      Math.random()\n        .toString(36)\n        .substr(2, 9)\n    );\n  }\n\n  /**\n   * Set the --context variable with the provided value in this component.\n   */\n  set contextVariable(value) {\n    this.cssVariable(\"context\", value);\n  }\n\n  /**\n   * Get the current value of the --context variable in this component.\n   * @return {string} [dark|light|saturated]\n   */\n  get contextVariable() {\n    /* @DEPRECATED --theme in 1.0, to be removed in 2.0 */\n    return this.cssVariable(\"context\") || this.cssVariable(\"theme\");\n  }\n\n  /**\n   * Returns a boolean statement of whether or not this component contains any light DOM.\n   * @returns {boolean}\n   * @examples `if(this.hasLightDOM()) this._init();`\n   */\n  hasLightDOM() {\n    return this.children.length || this.textContent.trim().length;\n  }\n\n  /**\n   * Returns a boolean statement of whether or not that slot exists in the light DOM.\n   *\n   * @example: `this.hasSlot(\"header\")`\n   */\n  hasSlot(name) {\n    if (!name) {\n      this.warn(`Please provide at least one slot name for which to search.`);\n      return;\n    }\n\n    switch (typeof name) {\n      case \"string\":\n        return (\n          [...this.children].filter(child => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name).length >\n          0\n        );\n      case \"array\":\n        return name.reduce(\n          n =>\n            [...this.children].filter(child => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === n).length >\n            0\n        );\n      default:\n        this.warn(\n          `Did not recognize the type of the name provided to hasSlot; this funciton can accept a string or an array.`\n        );\n        return;\n    }\n  }\n\n  /**\n   * Given a slot name, returns elements assigned to the slot as an arry.\n   * If no value is provided (i.e., `this.getSlot()`), it returns all children not assigned to a slot (without a slot attribute).\n   *\n   * @example: `this.getSlot(\"header\")`\n   */\n  getSlot(name = \"unassigned\") {\n    if (name !== \"unassigned\") {\n      return [...this.children].filter(child => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name);\n    } else {\n      return [...this.children].filter(child => !child.hasAttribute(\"slot\"));\n    }\n  }\n\n  cssVariable(name, value, element = this) {\n    name = name.substr(0, 2) !== \"--\" ? \"--\" + name : name;\n    if (value) {\n      element.style.setProperty(name, value);\n      return value;\n    }\n    return (\n      window\n        .getComputedStyle(element)\n        .getPropertyValue(name)\n        .trim() || null\n    );\n  }\n\n  /**\n   * This alerts nested components to a change in the context\n   */\n  contextUpdate() {\n    // If a value has been set, alert any nested children of the change\n    [...this.querySelectorAll(\"*\"), ...this.shadowRoot.querySelectorAll(\"*\")]\n      .filter(item => item.tagName.toLowerCase().slice(0, 4) === `${prefix}-`)\n      .map(child => {\n        this.log(`Update context of ${child.tag}`);\n        Promise.all([customElements.whenDefined(child.tagName.toLowerCase())]).then(() => {\n          // Ask the component to recheck it's context in case it changed\n          child.resetContext(this.on);\n        });\n      });\n  }\n\n  resetContext(fallback) {\n    if (this.isIE11) return;\n\n    this.log(`Resetting context on ${this.tag}`);\n    // Priority order for context values to be pulled from:\n    //--> 1. context (OLD: pfe-theme)\n    //--> 2. --context (OLD: --theme)\n    let value = this.context || this.contextVariable || fallback;\n    this.on = value;\n  }\n\n  constructor(pfeClass, { type = null, delayRender = false } = {}) {\n    super();\n\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this._parseObserver = this._parseObserver.bind(this);\n    this.isIE11 = /MSIE|Trident|Edge\\//.test(window.navigator.userAgent);\n\n    // Set up the mark ID based on existing ID on component if it exists\n    if (!this.id) {\n      this._markId = this.randomId.replace(\"pfe\", this.tag);\n    } else if (this.id.startsWith(\"pfe-\") && !this.id.startsWith(this.tag)) {\n      this._markId = this.id.replace(\"pfe\", this.tag);\n    } else {\n      this._markId = `${this.tag}-${this.id}`;\n    }\n\n    this._markCount = 0;\n\n    // TODO: Deprecated for 1.0 release\n    this.schemaProps = pfeClass.schemaProperties;\n\n    // TODO: Migrate this out of schema for 1.0\n    this.slots = pfeClass.slots;\n\n    this.template = document.createElement(\"template\");\n\n    // Set the default value to the passed in type\n    if (type && this._pfeClass.allProperties.type) this._pfeClass.allProperties.type.default = type;\n\n    // Initalize the properties and attributes from the property getter\n    this._initializeProperties();\n\n    this.attachShadow({ mode: \"open\" });\n\n    // Tracks if the component has been initially rendered. Useful if for debouncing\n    // template updates.\n    this._rendered = false;\n\n    if (!delayRender) this.render();\n  }\n\n  /**\n   * Standard connected callback; fires when the component is added to the DOM.\n   */\n  connectedCallback() {\n    this._initializeAttributeDefaults();\n\n    if (window.ShadyCSS) window.ShadyCSS.styleElement(this);\n\n    // If the slot definition exists, set up an observer\n    if (typeof this.slots === \"object\") {\n      this._slotsObserver = new MutationObserver(() => this._initializeSlots(this.tag, this.slots));\n      this._initializeSlots(this.tag, this.slots);\n    }\n  }\n\n  /**\n   * Standard disconnected callback; fires when a componet is removed from the DOM.\n   * Add your removeEventListeners here.\n   */\n  disconnectedCallback() {\n    if (this._cascadeObserver) this._cascadeObserver.disconnect();\n    if (this._slotsObserver) this._slotsObserver.disconnect();\n  }\n\n  /**\n   * Attribute changed callback fires when attributes are updated.\n   * This combines the global and the component-specific logic.\n   */\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (!this._pfeClass.allProperties) return;\n\n    let propName = this._pfeClass._attr2prop(attr);\n\n    const propDef = this._pfeClass.allProperties[propName];\n\n    // If the attribute that changed derives from a property definition\n    if (propDef) {\n      // If the property/attribute pair has an alias, copy the new value to the alias target\n      if (propDef.alias) {\n        const aliasedPropDef = this._pfeClass.allProperties[propDef.alias];\n        const aliasedAttr = this._pfeClass._prop2attr(propDef.alias);\n        const aliasedAttrVal = this.getAttribute(aliasedAttr);\n        if (aliasedAttrVal !== newVal) {\n          this[propDef.alias] = this._castPropertyValue(aliasedPropDef, newVal);\n        }\n      }\n\n      // If the property/attribute pair has an observer, fire it\n      // Observers receive the oldValue and the newValue from the attribute changed callback\n      if (propDef.observer) {\n        this[propDef.observer](this._castPropertyValue(propDef, oldVal), this._castPropertyValue(propDef, newVal));\n      }\n\n      // If the property/attribute pair has a cascade target, copy the attribute to the matching elements\n      // Note: this handles the cascading of new/updated attributes\n      if (propDef.cascade) {\n        this._copyAttribute(attr, this._pfeClass._convertSelectorsToArray(propDef.cascade));\n      }\n    }\n  }\n\n  /**\n   * Standard render function.\n   */\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n\n    this.log(`render`);\n\n    // Cascade properties to the rendered template\n    this.cascadeProperties();\n\n    // Reset the display context\n    this.resetContext();\n\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-rendered`);\n\n        if (this._markCount < 1) {\n          this._markCount = this._markCount + 1;\n\n          // Navigation start, i.e., the browser first sees that the user has navigated to the page\n          performance.measure(`${this._markId}-from-navigation-to-first-render`, undefined, `${this._markId}-rendered`);\n\n          // Render is run before connection unless delayRender is used\n          performance.measure(\n            `${this._markId}-from-defined-to-first-render`,\n            `${this._markId}-defined`,\n            `${this._markId}-rendered`\n          );\n        }\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n\n    // If the slot definition exists, set up an observer\n    if (typeof this.slots === \"object\" && this._slotsObserver) {\n      this._slotsObserver.observe(this, { childList: true });\n    }\n\n    // If an observer was defined, set it to begin observing here\n    if (this._cascadeObserver) {\n      this._cascadeObserver.observe(this, {\n        attributes: true,\n        childList: true,\n        subtree: true\n      });\n    }\n\n    this._rendered = true;\n  }\n\n  /**\n   * A wrapper around an event dispatch to standardize formatting.\n   */\n  emitEvent(name, { bubbles = true, cancelable = false, composed = false, detail = {} } = {}) {\n    this.log(`Custom event: ${name}`);\n    this.dispatchEvent(\n      new CustomEvent(name, {\n        bubbles,\n        cancelable,\n        composed,\n        detail\n      })\n    );\n  }\n\n  /**\n   * Handles the cascading of properties to nested components when new elements are added\n   * Attribute updates/additions are handled by the attribute callback\n   */\n  cascadeProperties(nodeList) {\n    const cascade = this._pfeClass._getCache(\"cascadingProperties\");\n\n    if (cascade) {\n      if (window.ShadyCSS && this._cascadeObserver) this._cascadeObserver.disconnect();\n\n      let selectors = Object.keys(cascade);\n      // Find out if anything in the nodeList matches any of the observed selectors for cacading properties\n      if (nodeList) {\n        selectors = [];\n        [...nodeList].forEach(nodeItem => {\n          Object.keys(cascade).map(selector => {\n            // if this node has a match function (i.e., it's an HTMLElement, not\n            // a text node), see if it matches the selector, otherwise drop it (like it's hot).\n            if (nodeItem.matches && nodeItem.matches(selector)) {\n              selectors.push(selector);\n            }\n          });\n        });\n      }\n\n      // If a match was found, cascade each attribute to the element\n      if (selectors) {\n        const components = selectors\n          .filter(item => item.slice(0, prefix.length + 1) === `${prefix}-`)\n          .map(name => customElements.whenDefined(name));\n\n        if (components)\n          Promise.all(components).then(() => {\n            this._copyAttributes(selectors, cascade);\n          });\n        else this._copyAttributes(selectors, cascade);\n      }\n\n      // @TODO This is here for IE11 processing; can move this after deprecation\n      if (window.ShadyCSS && this._rendered && this._cascadeObserver)\n        this._cascadeObserver.observe(this, {\n          attributes: true,\n          childList: true,\n          subtree: true\n        });\n    }\n  }\n\n  /* --- Observers for global properties --- */\n\n  /**\n   * This responds to changes in the pfelement attribute; indicates if the component upgraded\n   * @TODO maybe we should use just the attribute instead of the class?\n   * https://github.com/angular/angular/issues/15399#issuecomment-318785677\n   */\n  _upgradeObserver() {\n    this.classList.add(\"PFElement\");\n  }\n\n  /**\n   * This responds to changes in the context attribute; manual override tool\n   */\n  _contextObserver(oldValue, newValue) {\n    if (newValue && ((oldValue && oldValue !== newValue) || !oldValue)) {\n      this.on = newValue;\n      this.cssVariable(\"context\", newValue);\n    }\n  }\n\n  /**\n   * This responds to changes in the context; source of truth for components\n   */\n  _onObserver(oldValue, newValue) {\n    if ((oldValue && oldValue !== newValue) || (newValue && !oldValue)) {\n      // Fire an event for child components\n      this.contextUpdate();\n    }\n  }\n\n  /**\n   * This responds to inline style changes and greps for context or theme updates.\n   * @TODO: --theme will be deprecated in 2.0\n   */\n  _inlineStyleObserver(oldValue, newValue) {\n    this.log(`Style observer activated on ${this.tag}`);\n    let newContext = \"\";\n    // Grep for context/theme\n    const regex = /--(?:context|theme):\\s*(?:\\\"*(light|dark|saturated)\\\"*)/gi;\n    let found = regex.exec(newValue);\n    if (found) {\n      newContext = found[1];\n      // If the new context value differs from the on value, update\n      if (newContext !== this.on && !this.context) this.on = newContext;\n    }\n  }\n\n  /**\n   * This is connected with a mutation observer that watches for updates to the light DOM\n   * and pushes down the cascading values\n   */\n  _parseObserver(mutationsList) {\n    // Iterate over the mutation list, look for cascade updates\n    for (let mutation of mutationsList) {\n      // If a new node is added, attempt to cascade attributes to it\n      if (mutation.type === \"childList\" && mutation.addedNodes.length) {\n        this.cascadeProperties(mutation.addedNodes);\n      }\n      // @TODO: Do something when mutation type is attribute?\n      // else if (mutation.type === \"attributes\") {}\n    }\n  }\n  /* --- End observers --- */\n\n  /**\n   * Validate that the property meets the requirements for type and naming.\n   */\n  static _validateProperties() {\n    for (let propName in this.allProperties) {\n      const propDef = this.allProperties[propName];\n\n      // Verify that properties conform to the allowed data types\n      if (!isAllowedType(propDef)) {\n        this.error(`Property \"${propName}\" on ${this.name} must have type String, Number, or Boolean.`);\n      }\n\n      // Verify the property name conforms to our naming rules\n      if (!/^[a-z_]/.test(propName)) {\n        this.error(\n          `Property ${this.name}.${propName} defined, but prop names must begin with a lower-case letter or an underscore`\n        );\n      }\n\n      const isFunction = typeof propDef.default === \"function\";\n\n      // If the default value is not the same type as defined by the property\n      // and it's not a function (we can't validate the output of the function\n      // on the class level), throw a warning\n      if (propDef.default && !isValidDefaultType(propDef) && !isFunction)\n        this.error(\n          `[${this.name}] The default value \\`${propDef.default}\\` does not match the assigned type ${propDef.type.name} for the \\'${propName}\\' property`\n        );\n    }\n  }\n\n  /**\n   * Convert provided property value to the correct type as defined in the properties method.\n   */\n  _castPropertyValue(propDef, attrValue) {\n    switch (propDef.type) {\n      case Number:\n        // map various attribute string values to their respective\n        // desired property values\n        return {\n          [attrValue]: Number(attrValue),\n          null: null,\n          NaN: NaN,\n          undefined: undefined\n        }[attrValue];\n\n      case Boolean:\n        return attrValue !== null;\n\n      case String:\n        return {\n          [attrValue]: attrValue,\n          undefined: undefined\n        }[attrValue];\n\n      default:\n        return attrValue;\n    }\n  }\n\n  /**\n   * Map provided value to the attribute name on the component.\n   */\n  _assignValueToAttribute(obj, attr, value) {\n    // If the default is false and the property is boolean, we don't need to do anything\n    const isBooleanFalse = obj.type === Boolean && !value;\n    const isNull = value === null;\n    const isUndefined = typeof value === \"undefined\";\n\n    // If the attribute is not defined, set the default value\n    if (isBooleanFalse || isNull || isUndefined) {\n      this.removeAttribute(attr);\n    } else {\n      // Boolean values get an empty string: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\n      if (obj.type === Boolean && typeof value === \"boolean\") {\n        this.setAttribute(attr, \"\");\n      } else {\n        // Validate against the provided values\n        if (obj.values) {\n          this._validateAttributeValue(obj, attr, value);\n        }\n\n        // Still accept the value provided even if it's not valid\n        this.setAttribute(attr, value);\n      }\n    }\n  }\n\n  /**\n   * Maps the defined slots into an object that is easier to query\n   */\n  _initializeSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n\n    if (window.ShadyCSS && this._slotsObserver) this._slotsObserver.disconnect();\n\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach(slot => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.getSlot(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.getSlot(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter(child => !child.hasAttribute(\"slot\"));\n\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n\n    this.log(\"Slots validated.\");\n\n    if (window.ShadyCSS && this._slotsObserver) this._slotsObserver.observe(this, { childList: true });\n  }\n\n  /**\n   * Sets up the property definitions based on the properties method.\n   */\n  _initializeProperties() {\n    const properties = this._pfeClass.allProperties;\n    let hasCascade = false;\n\n    if (Object.keys(properties).length > 0) this.log(`Initialize properties`);\n\n    for (let propName in properties) {\n      const propDef = properties[propName];\n\n      // Check if the property exists, throw a warning if it does.\n      // HTMLElements have a LOT of properties; it wouldn't be hard\n      // to overwrite one accidentally.\n      if (typeof this[propName] !== \"undefined\") {\n        this.log(\n          `Property \"${propName}\" on ${this.constructor.name} cannot be defined because the property name is reserved`\n        );\n      } else {\n        const attrName = this._pfeClass._prop2attr(propName);\n        if (propDef.cascade) hasCascade = true;\n\n        Object.defineProperty(this, propName, {\n          get: () => {\n            const attrValue = this.getAttribute(attrName);\n\n            return this._castPropertyValue(propDef, attrValue);\n          },\n          set: rawNewVal => {\n            // Assign the value to the attribute\n            this._assignValueToAttribute(propDef, attrName, rawNewVal);\n\n            return rawNewVal;\n          },\n          writeable: true,\n          enumerable: true,\n          configurable: false\n        });\n      }\n    }\n\n    // If any of the properties has cascade, attach a new mutation observer to the component\n    if (hasCascade) {\n      this._cascadeObserver = new MutationObserver(this._parseObserver);\n    }\n  }\n\n  /**\n   * Intialize the default value for an attribute.\n   */\n  _initializeAttributeDefaults() {\n    const properties = this._pfeClass.allProperties;\n\n    for (let propName in properties) {\n      const propDef = properties[propName];\n\n      const attrName = this._pfeClass._prop2attr(propName);\n\n      if (propDef.hasOwnProperty(\"default\")) {\n        let value = propDef.default;\n\n        // Check if default is a function\n        if (typeof propDef.default === \"function\") {\n          value = propDef.default(this);\n        }\n\n        // If the attribute has not already been set, assign the default value\n        if (!this.hasAttribute(attrName)) {\n          // Assign the value to the attribute\n          this._assignValueToAttribute(propDef, attrName, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate the value against provided values.\n   */\n  // @TODO add support for a validation function\n  _validateAttributeValue(propDef, attr, value) {\n    if (\n      Array.isArray(propDef.values) &&\n      propDef.values.length > 0 &&\n      !propDef.values.includes(value) // ||\n      // (typeof propDef.values === \"string\" && propDef.values !== value) ||\n      // (typeof propDef.values === \"function\" && !propDef.values(value))\n    ) {\n      this.warn(\n        `${value} is not a valid value for ${attr}. Please provide one of the following values: ${propDef.values.join(\n          \", \"\n        )}`\n      );\n    }\n\n    return value;\n  }\n\n  /**\n   * Look up an attribute name linked to a given property name.\n   */\n  static _prop2attr(propName) {\n    return this._getCache(\"prop2attr\")[propName];\n  }\n\n  /**\n   * Look up an property name linked to a given attribute name.\n   */\n  static _attr2prop(attrName) {\n    return this._getCache(\"attr2prop\")[attrName];\n  }\n\n  /**\n   * Convert a property name to an attribute name.\n   */\n  static _convertPropNameToAttrName(propName) {\n    const propDef = this.allProperties[propName];\n\n    if (propDef.attr) {\n      return propDef.attr;\n    }\n\n    return propName\n      .replace(/^_/, \"\")\n      .replace(/^[A-Z]/, l => l.toLowerCase())\n      .replace(/[A-Z]/g, l => `-${l.toLowerCase()}`);\n  }\n\n  /**\n   * Convert an attribute name to a property name.\n   */\n  static _convertAttrNameToPropName(attrName) {\n    for (let prop in this.allProperties) {\n      if (this.allProperties[prop].attr === attrName) {\n        return prop;\n      }\n    }\n\n    // Convert the property name to kebab case\n    const propName = attrName.replace(/-([A-Za-z])/g, l => l[1].toUpperCase());\n    return propName;\n  }\n\n  _copyAttributes(selectors, set) {\n    selectors.forEach(selector => {\n      set[selector].forEach(attr => {\n        this._copyAttribute(attr, selector);\n      });\n    });\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [...this.querySelectorAll(to), ...this.shadowRoot.querySelectorAll(to)];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  static _convertSelectorsToArray(selectors) {\n    if (selectors) {\n      if (typeof selectors === \"string\") return selectors.split(\",\");\n      else if (typeof selectors === \"array\" || typeof selectors === \"object\") return selectors;\n      else {\n        this.warn(`selectors should be provided as a string, array, or object; received: ${typeof selectors}.`);\n      }\n    }\n\n    return;\n  }\n\n  static _parsePropertiesForCascade(mergedProperties) {\n    let cascadingProperties = {};\n    // Parse the properties to pull out attributes that cascade\n    for (const [propName, config] of Object.entries(mergedProperties)) {\n      let cascadeTo = this._convertSelectorsToArray(config.cascade);\n\n      // Iterate over each node in the cascade list for this property\n      if (cascadeTo)\n        cascadeTo.map(nodeItem => {\n          let attr = this._prop2attr(propName);\n          // Create an object with the node as the key and an array of attributes\n          // that are to be cascaded down to it\n          if (!cascadingProperties[nodeItem]) cascadingProperties[nodeItem] = [attr];\n          else cascadingProperties[nodeItem].push(attr);\n        });\n    }\n\n    return cascadingProperties;\n  }\n\n  /**\n   * Caching the attributes and properties data for efficiency\n   */\n  static create(pfe) {\n    pfe._createCache();\n    pfe._populateCache(pfe);\n    pfe._validateProperties();\n    window.customElements.define(pfe.tag, pfe);\n\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-defined`);\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n  }\n\n  static _createCache() {\n    this._cache = {\n      properties: {},\n      globalProperties: {},\n      componentProperties: {},\n      cascadingProperties: {},\n      attr2prop: {},\n      prop2attr: {}\n    };\n  }\n\n  /**\n   * Cache an object in a given cache namespace.  This overwrites anything\n   * already in that namespace.\n   */\n  static _setCache(namespace, object) {\n    this._cache[namespace] = object;\n  }\n\n  /**\n   * Get a cached object by namespace, or get all cached objects.\n   */\n  static _getCache(namespace) {\n    return namespace ? this._cache[namespace] : this._cache;\n  }\n\n  /**\n   * Populate initial values for properties cache.\n   */\n  static _populateCache(pfe) {\n    // @TODO add a warning when a component property conflicts with a global property.\n    const mergedProperties = { ...pfe.properties, ...PFElement.properties };\n\n    pfe._setCache(\"componentProperties\", pfe.properties);\n    pfe._setCache(\"globalProperties\", PFElement.properties);\n    pfe._setCache(\"properties\", mergedProperties);\n\n    // create mapping objects to go from prop name to attrname and back\n    const prop2attr = {};\n    const attr2prop = {};\n    for (let propName in mergedProperties) {\n      const attrName = this._convertPropNameToAttrName(propName);\n      prop2attr[propName] = attrName;\n      attr2prop[attrName] = propName;\n    }\n    pfe._setCache(\"attr2prop\", attr2prop);\n    pfe._setCache(\"prop2attr\", prop2attr);\n\n    const cascadingProperties = this._parsePropertiesForCascade(mergedProperties);\n    if (Object.keys(cascadingProperties)) pfe._setCache(\"cascadingProperties\", cascadingProperties);\n  }\n\n  /**\n   * allProperties returns an object containing PFElement's global properties\n   * and the descendents' (such as PfeCard, etc) component properties.  The two\n   * objects are merged together and in the case of a property name conflict,\n   * PFElement's properties override the component's properties.\n   */\n  static get allProperties() {\n    return this._getCache(\"properties\");\n  }\n\n  /**\n   * cascadingProperties returns an object containing PFElement's global properties\n   * and the descendents' (such as PfeCard, etc) component properties.  The two\n   * objects are merged together and in the case of a property name conflict,\n   * PFElement's properties override the component's properties.\n   */\n  static get cascadingProperties() {\n    return this._getCache(\"cascadingProperties\");\n  }\n}\n\nautoReveal(PFElement.log);\n\nexport default PFElement;\n"],"names":["logger","handleWebComponentsReady","window","document","body","removeAttribute","isValidDefaultType","definition","hasOwnProperty","default","constructor","type","Array","prototype","includes","Object","defineProperty","value","valueToFind","fromIndex","this","TypeError","o","len","length","x","y","n","k","Math","max","abs","isNaN","entries","obj","ownProps","keys","i","resArray","String","startsWith","search","rawPos","pos","substring","prefix","PFElement","HTMLElement","[object Object]","preference","_debugLog","_trackPerformance","msgs","debugLog","console","log","tag","id","join","warn","Error","error","PfeTypes","Container","Content","Combo","version","_pfeClass","properties","pfelement","title","Boolean","observer","on","description","values","el","contextVariable","context","oldTheme","alias","attr","_style","observedAttributes","allProperties","filter","prop","cascade","map","p","_convertPropNameToAttrName","randomId","random","toString","substr","cssVariable","children","textContent","trim","name","child","hasAttribute","getAttribute","reduce","element","style","setProperty","getComputedStyle","getPropertyValue","querySelectorAll","shadowRoot","item","tagName","toLowerCase","slice","Promise","all","customElements","whenDefined","then","resetContext","fallback","isIE11","pfeClass","delayRender","super","_parseObserver","bind","test","navigator","userAgent","_markId","replace","_markCount","schemaProps","schemaProperties","slots","template","createElement","_initializeProperties","attachShadow","mode","_rendered","render","_initializeAttributeDefaults","ShadyCSS","styleElement","_slotsObserver","MutationObserver","_initializeSlots","_cascadeObserver","disconnect","oldVal","newVal","propName","_attr2prop","propDef","aliasedPropDef","aliasedAttr","_prop2attr","_castPropertyValue","_copyAttribute","_convertSelectorsToArray","innerHTML","html","prepareTemplate","appendChild","content","cloneNode","cascadeProperties","trackPerformance","performance","mark","measure","undefined","err","observe","childList","attributes","subtree","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","nodeList","_getCache","selectors","forEach","nodeItem","selector","matches","push","components","_copyAttributes","classList","add","oldValue","newValue","contextUpdate","newContext","found","exec","mutationsList","mutation","addedNodes","Number","isFunction","attrValue","null","NaN","setAttribute","_validateAttributeValue","slot","slotObj","slotExists","result","namedSlot","getSlot","nodes","hasCascade","attrName","get","set","rawNewVal","_assignValueToAttribute","writeable","enumerable","configurable","isArray","l","toUpperCase","to","recipients","fname","node","split","mergedProperties","cascadingProperties","config","cascadeTo","pfe","_createCache","_populateCache","_validateProperties","define","_cache","globalProperties","componentProperties","attr2prop","prop2attr","namespace","object","_setCache","_parsePropertiesForCascade","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"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"}