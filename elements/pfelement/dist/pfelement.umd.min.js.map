{"version":3,"file":"pfelement.umd.min.js","sources":["../_temp/reveal.js","../_temp/polyfills--pfelement.js","../_temp/pfelement.umd.js","../_temp/attrDefValidators.js"],"sourcesContent":["let logger = () => null;\n\nexport function reveal() {\n  logger(`[reveal] elements ready, revealing the body`);\n  window.document.body.removeAttribute(\"unresolved\");\n}\n\nexport function autoReveal(logFunction) {\n  logger = logFunction;\n  // If Web Components are already ready, run the handler right away.  If they\n  // are not yet ready, wait.\n  //\n  // see https://github.com/github/webcomponentsjs#webcomponents-loaderjs for\n  // info about web component readiness events\n  const polyfillPresent = window.WebComponents;\n  const polyfillReady = polyfillPresent && window.WebComponents.ready;\n\n  if (!polyfillPresent || polyfillReady) {\n    handleWebComponentsReady();\n  } else {\n    window.addEventListener(\"WebComponentsReady\", handleWebComponentsReady);\n  }\n}\n\nfunction handleWebComponentsReady() {\n  logger(\"[reveal] web components ready\");\n  reveal();\n}\n","// @POLYFILL  Array.includes\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, \"includes\", {\n    value: function(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      var n = fromIndex | 0;\n\n      // 5. If n â‰¥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === \"number\" && typeof y === \"number\" && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        }\n        // c. Increase k by 1.\n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    }\n  });\n}\n\n// @POLYFILL Object.entries\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\nif (!Object.entries) {\n  Object.entries = function(obj) {\n    var ownProps = Object.keys(obj),\n      i = ownProps.length,\n      resArray = new Array(i); // preallocate the Array\n    while (i--) resArray[i] = [ownProps[i], obj[ownProps[i]]];\n\n    return resArray;\n  };\n}\n\n// @POLYFILL String.startsWith\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#polyfill\nif (!String.prototype.startsWith) {\n  Object.defineProperty(String.prototype, \"startsWith\", {\n    value: function(search, rawPos) {\n      var pos = rawPos > 0 ? rawPos | 0 : 0;\n      return this.substring(pos, pos + search.length) === search;\n    }\n  });\n}\n","/*!\n * PatternFly Elements: PFElement 1.4.0\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\nimport { autoReveal } from \"./reveal.js\";\nimport { isAllowedType, isValidDefaultType } from \"./attrDefValidators.js\";\n// Import polyfills: includes\nimport \"./polyfills--pfelement.js\";\n\nconst prefix = \"pfe\";\n\nclass PFElement extends HTMLElement {\n  /**\n   * A boolean value that indicates if the logging should be printed to the console; used for debugging.\n   *\n   * @example In a JS file or script tag: `PFElement._debugLog = true;`\n   */\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      PFElement._debugLog = !!preference;\n    }\n    return PFElement._debugLog;\n  }\n\n  /**\n   * A boolean value that indicates if the performance should be tracked.\n   *\n   * @example In a JS file or script tag: `PFElement._trackPerformance = true;`\n   */\n  static trackPerformance(preference = null) {\n    if (preference !== null) {\n      PFElement._trackPerformance = !!preference;\n    }\n    return PFElement._trackPerformance;\n  }\n\n  /**\n   * A logging wrapper which checks the debugLog boolean and prints to the console if true.\n   *\n   * @example `PFElement.log(\"Hello\")`\n   */\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  /**\n   * Local logging that outputs the tag name as a prefix automatically\n   *\n   * @example In a component's function: `this.log(\"Hello\")`\n   */\n  log(...msgs) {\n    PFElement.log(`[${this.tag}${this.id ? `#${this.id}` : \"\"}]: ${msgs.join(\", \")}`);\n  }\n\n  /**\n   * A console warning wrapper which formats your output with useful debugging information.\n   *\n   * @example `PFElement.warn(\"Hello\")`\n   */\n  static warn(...msgs) {\n    console.warn(...msgs);\n  }\n\n  /**\n   * Local warning wrapper that outputs the tag name as a prefix automatically.\n   *\n   * @example In a component's function: `this.warn(\"Hello\")`\n   */\n  warn(...msgs) {\n    PFElement.warn(`[${this.tag}${this.id ? `#${this.id}` : ``}]: ${msgs.join(\", \")}`);\n  }\n\n  /**\n   * A console error wrapper which formats your output with useful debugging information.\n   *\n   * @example `PFElement.error(\"Hello\")`\n   */\n  static error(...msgs) {\n    throw new Error([...msgs].join(\" \"));\n  }\n\n  /**\n   * Local error wrapper that outputs the tag name as a prefix automatically.\n   *\n   * @example In a component's function: `this.error(\"Hello\")`\n   */\n  error(...msgs) {\n    PFElement.error(`[${this.tag}${this.id ? `#${this.id}` : ``}]:`, ...msgs);\n  }\n\n  /**\n   * A global definition of component types (a general way of defining the purpose of a\n   * component and how it is put together).\n   */\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n\n  /**\n   * The current version of a component; set by the compiler using the package.json data.\n   */\n  static get version() {\n    return \"{{version}}\";\n  }\n\n  /**\n   * A local alias to the static version.\n   *\n   * @example: In the console: `PfeAccordion.version`\n   */\n  get version() {\n    return this._pfeClass.version;\n  }\n\n  /**\n   * Global property definitions: properties managed by the base class that apply to all components.\n   */\n  static get properties() {\n    return {\n      pfelement: {\n        title: \"Upgraded flag\",\n        type: Boolean,\n        default: true,\n        observer: \"_upgradeObserver\"\n      },\n      on: {\n        title: \"Context\",\n        description: \"Describes the visual context (backgrounds).\",\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        default: el => el.contextVariable,\n        observer: \"_onObserver\"\n      },\n      context: {\n        title: \"Context hook\",\n        description: \"Lets you override the system-set context.\",\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        observer: \"_contextObserver\"\n      },\n      // @TODO: Deprecated with 1.0\n      oldTheme: {\n        type: String,\n        values: [\"light\", \"dark\", \"saturated\"],\n        alias: \"context\",\n        attr: \"pfe-theme\"\n      },\n      _style: {\n        title: \"Custom styles\",\n        type: String,\n        attr: \"style\",\n        observer: \"_inlineStyleObserver\"\n      },\n      type: {\n        title: \"Component type\",\n        type: String,\n        values: [\"container\", \"content\", \"combo\"]\n      }\n    };\n  }\n\n  static get observedAttributes() {\n    const properties = this.allProperties;\n    if (properties) {\n      const oa = Object.keys(properties)\n        .filter(prop => properties[prop].observer || properties[prop].cascade || properties[prop].alias)\n        .map(p => this._convertPropNameToAttrName(p));\n      return [...oa];\n    }\n  }\n\n  /**\n   * A quick way to fetch a random ID value.\n   * _Note:_ All values are prefixes with `pfe` automatically to ensure an ID-safe value is returned.\n   *\n   * @example: In a component's JS: `this.id = this.randomID;`\n   */\n  get randomId() {\n    return (\n      `${prefix}-` +\n      Math.random()\n        .toString(36)\n        .substr(2, 9)\n    );\n  }\n\n  /**\n   * Set the --context variable with the provided value in this component.\n   */\n  set contextVariable(value) {\n    this.cssVariable(\"context\", value);\n  }\n\n  /**\n   * Get the current value of the --context variable in this component.\n   * @return {string} [dark|light|saturated]\n   */\n  get contextVariable() {\n    /* @DEPRECATED --theme in 1.0, to be removed in 2.0 */\n    return this.cssVariable(\"context\") || this.cssVariable(\"theme\");\n  }\n\n  /**\n   * Returns a boolean statement of whether or not this component contains any light DOM.\n   * @returns {boolean}\n   * @examples `if(this.hasLightDOM()) this._init();`\n   */\n  hasLightDOM() {\n    return this.children.length || this.textContent.trim().length;\n  }\n\n  /**\n   * Returns a boolean statement of whether or not that slot exists in the light DOM.\n   *\n   * @example: `this.hasSlot(\"header\")`\n   */\n  hasSlot(name) {\n    if (!name) {\n      this.warn(`Please provide at least one slot name for which to search.`);\n      return;\n    }\n\n    switch (typeof name) {\n      case \"string\":\n        return (\n          [...this.children].filter(child => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name).length >\n          0\n        );\n      case \"array\":\n        return name.reduce(\n          n =>\n            [...this.children].filter(child => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === n).length >\n            0\n        );\n      default:\n        this.warn(\n          `Did not recognize the type of the name provided to hasSlot; this funciton can accept a string or an array.`\n        );\n        return;\n    }\n  }\n\n  /**\n   * Returns an array with all the slot with the provided name defined in the light DOM.\n   * If no value is provided (i.e., `this.getSlot()`), it returns all unassigned slots.\n   *\n   * @example: `this.hasSlot(\"header\")`\n   */\n  getSlot(name = \"unassigned\") {\n    if (name !== \"unassigned\") {\n      return [...this.children].filter(child => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name);\n    } else {\n      return [...this.children].filter(child => !child.hasAttribute(\"slot\"));\n    }\n  }\n\n  cssVariable(name, value, element = this) {\n    name = name.substr(0, 2) !== \"--\" ? \"--\" + name : name;\n    if (value) {\n      element.style.setProperty(name, value);\n      return value;\n    }\n    return (\n      window\n        .getComputedStyle(element)\n        .getPropertyValue(name)\n        .trim() || null\n    );\n  }\n\n  /**\n   * This alerts nested components to a change in the context\n   */\n  contextUpdate() {\n    // If a value has been set, alert any nested children of the change\n    [...this.querySelectorAll(\"*\"), ...this.shadowRoot.querySelectorAll(\"*\")]\n      .filter(item => item.tagName.toLowerCase().slice(0, 4) === `${prefix}-`)\n      .map(child => {\n        this.log(`Update context of ${child.tag}`);\n        Promise.all([customElements.whenDefined(child.tagName.toLowerCase())]).then(() => {\n          // Ask the component to recheck it's context in case it changed\n          child.resetContext(this.on);\n        });\n      });\n  }\n\n  resetContext(fallback) {\n    this.log(`Resetting context on ${this.tag}`);\n    // Priority order for context values to be pulled from:\n    //--> 1. context (OLD: pfe-theme)\n    //--> 2. --context (OLD: --theme)\n    let value = this.context || this.contextVariable || fallback;\n    this.on = value;\n  }\n\n  constructor(pfeClass, { type = null, delayRender = false } = {}) {\n    super();\n\n    this._pfeClass = pfeClass;\n    this.tag = pfeClass.tag;\n    this._parseObserver = this._parseObserver.bind(this);\n\n    // Set up the mark ID based on existing ID on component if it exists\n    if (!this.id) {\n      this._markId = this.randomId.replace(\"pfe\", this.tag);\n    } else if (this.id.startsWith(\"pfe-\") && !this.id.startsWith(this.tag)) {\n      this._markId = this.id.replace(\"pfe\", this.tag);\n    } else {\n      this._markId = `${this.tag}-${this.id}`;\n    }\n\n    this._markCount = 0;\n\n    // TODO: Deprecated for 1.0 release\n    this.schemaProps = pfeClass.schemaProperties;\n\n    // TODO: Migrate this out of schema for 1.0\n    this.slots = pfeClass.slots;\n\n    this.template = document.createElement(\"template\");\n\n    // Set the default value to the passed in type\n    if (type && this._pfeClass.allProperties.type) this._pfeClass.allProperties.type.default = type;\n\n    // Initalize the properties and attributes from the property getter\n    this._initializeProperties();\n\n    this.attachShadow({ mode: \"open\" });\n\n    // Tracks if the component has been initially rendered. Useful if for debouncing\n    // template updates.\n    this._rendered = false;\n\n    if (!delayRender) this.render();\n  }\n\n  /**\n   * Standard connected callback; fires when the component is added to the DOM.\n   */\n  connectedCallback() {\n    this._initializeAttributeDefaults();\n\n    if (window.ShadyCSS) window.ShadyCSS.styleElement(this);\n\n    // If the slot definition exists, set up an observer\n    if (typeof this.slots === \"object\") {\n      this._slotsObserver = new MutationObserver(() => this._initializeSlots(this.tag, this.slots));\n      this._initializeSlots(this.tag, this.slots);\n    }\n  }\n\n  /**\n   * Standard disconnected callback; fires when a componet is removed from the DOM.\n   * Add your removeEventListeners here.\n   */\n  disconnectedCallback() {\n    if (this._cascadeObserver) this._cascadeObserver.disconnect();\n    if (this._slotsObserver) this._slotsObserver.disconnect();\n  }\n\n  /**\n   * Attribute changed callback fires when attributes are updated.\n   * This combines the global and the component-specific logic.\n   */\n  attributeChangedCallback(attr, oldVal, newVal) {\n    if (!this._pfeClass.allProperties) return;\n\n    let propName = this._pfeClass._attr2prop(attr);\n\n    const propDef = this._pfeClass.allProperties[propName];\n\n    // If the attribute that changed derives from a property definition\n    if (propDef) {\n      // If the property/attribute pair has an alias, copy the new value to the alias target\n      if (propDef.alias) {\n        const aliasedPropDef = this._pfeClass.allProperties[propDef.alias];\n        const aliasedAttr = this._pfeClass._prop2attr(propDef.alias);\n        const aliasedAttrVal = this.getAttribute(aliasedAttr);\n        if (aliasedAttrVal !== newVal) {\n          this[propDef.alias] = this._castPropertyValue(aliasedPropDef, newVal);\n        }\n      }\n\n      // If the property/attribute pair has an observer, fire it\n      // Observers receive the oldValue and the newValue from the attribute changed callback\n      if (propDef.observer) {\n        this[propDef.observer](this._castPropertyValue(propDef, oldVal), this._castPropertyValue(propDef, newVal));\n      }\n\n      // If the property/attribute pair has a cascade target, copy the attribute to the matching elements\n      // Note: this handles the cascading of new/updated attributes\n      if (propDef.cascade) {\n        this._copyAttribute(attr, this._pfeClass._convertSelectorsToArray(propDef.cascade));\n      }\n    }\n  }\n\n  /**\n   * Standard render function.\n   */\n  render() {\n    this.shadowRoot.innerHTML = \"\";\n    this.template.innerHTML = this.html;\n\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(this.template, this.tag);\n    }\n\n    this.shadowRoot.appendChild(this.template.content.cloneNode(true));\n\n    this.log(`render`);\n\n    // Cascade properties to the rendered template\n    this.cascadeProperties();\n\n    // Reset the display context\n    this.resetContext();\n\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-rendered`);\n\n        if (this._markCount < 1) {\n          this._markCount = this._markCount + 1;\n\n          // Navigation start, i.e., the browser first sees that the user has navigated to the page\n          performance.measure(`${this._markId}-from-navigation-to-first-render`, undefined, `${this._markId}-rendered`);\n\n          // Render is run before connection unless delayRender is used\n          performance.measure(\n            `${this._markId}-from-defined-to-first-render`,\n            `${this._markId}-defined`,\n            `${this._markId}-rendered`\n          );\n        }\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n\n    // If the slot definition exists, set up an observer\n    if (typeof this.slots === \"object\" && this._slotsObserver) {\n      this._slotsObserver.observe(this, { childList: true });\n    }\n\n    // If an observer was defined, set it to begin observing here\n    if (this._cascadeObserver) {\n      this._cascadeObserver.observe(this, {\n        attributes: true,\n        childList: true,\n        subtree: true\n      });\n    }\n\n    this._rendered = true;\n  }\n\n  /**\n   * A wrapper around an event dispatch to standardize formatting.\n   */\n  emitEvent(name, { bubbles = true, cancelable = false, composed = false, detail = {} } = {}) {\n    this.log(`Custom event: ${name}`);\n    this.dispatchEvent(\n      new CustomEvent(name, {\n        bubbles,\n        cancelable,\n        composed,\n        detail\n      })\n    );\n  }\n\n  /**\n   * Handles the cascading of properties to nested components when new elements are added\n   * Attribute updates/additions are handled by the attribute callback\n   */\n  cascadeProperties(nodeList) {\n    const cascade = this._pfeClass._getCache(\"cascadingProperties\");\n\n    if (cascade) {\n      if (window.ShadyCSS && this._cascadeObserver) this._cascadeObserver.disconnect();\n\n      let selectors = Object.keys(cascade);\n      // Find out if anything in the nodeList matches any of the observed selectors for cacading properties\n      if (nodeList) {\n        selectors = [];\n        [...nodeList].forEach(nodeItem => {\n          Object.keys(cascade).map(selector => {\n            // if this node has a match function (i.e., it's an HTMLElement, not\n            // a text node), see if it matches the selector, otherwise drop it (like it's hot).\n            if (nodeItem.matches && nodeItem.matches(selector)) {\n              selectors.push(selector);\n            }\n          });\n        });\n      }\n\n      // If a match was found, cascade each attribute to the element\n      if (selectors) {\n        const components = selectors\n          .filter(item => item.slice(0, prefix.length + 1) === `${prefix}-`)\n          .map(name => customElements.whenDefined(name));\n\n        if (components)\n          Promise.all(components).then(() => {\n            this._copyAttributes(selectors, cascade);\n          });\n        else this._copyAttributes(selectors, cascade);\n      }\n\n      // @TODO This is here for IE11 processing; can move this after deprecation\n      if (window.ShadyCSS && this._rendered && this._cascadeObserver)\n        this._cascadeObserver.observe(this, {\n          attributes: true,\n          childList: true,\n          subtree: true\n        });\n    }\n  }\n\n  /* --- Observers for global properties --- */\n\n  /**\n   * This responds to changes in the pfelement attribute; indicates if the component upgraded\n   * @TODO maybe we should use just the attribute instead of the class?\n   * https://github.com/angular/angular/issues/15399#issuecomment-318785677\n   */\n  _upgradeObserver() {\n    this.classList.add(\"PFElement\");\n  }\n\n  /**\n   * This responds to changes in the context attribute; manual override tool\n   */\n  _contextObserver(oldValue, newValue) {\n    if (newValue && ((oldValue && oldValue !== newValue) || !oldValue)) {\n      this.on = newValue;\n      this.cssVariable(\"context\", newValue);\n    }\n  }\n\n  /**\n   * This responds to changes in the context; source of truth for components\n   */\n  _onObserver(oldValue, newValue) {\n    if ((oldValue && oldValue !== newValue) || (newValue && !oldValue)) {\n      // Fire an event for child components\n      this.contextUpdate();\n    }\n  }\n\n  /**\n   * This responds to inline style changes and greps for context or theme updates.\n   * @TODO: --theme will be deprecated in 2.0\n   */\n  _inlineStyleObserver(oldValue, newValue) {\n    this.log(`Style observer activated on ${this.tag}`);\n    let newContext = \"\";\n    // Grep for context/theme\n    const regex = /--(?:context|theme):\\s*(?:\\\"*(light|dark|saturated)\\\"*)/gi;\n    let found = regex.exec(newValue);\n    if (found) {\n      newContext = found[1];\n      // If the new context value differs from the on value, update\n      if (newContext !== this.on && !this.context) this.on = newContext;\n    }\n  }\n\n  /**\n   * This is connected with a mutation observer that watches for updates to the light DOM\n   * and pushes down the cascading values\n   */\n  _parseObserver(mutationsList) {\n    // Iterate over the mutation list, look for cascade updates\n    for (let mutation of mutationsList) {\n      // If a new node is added, attempt to cascade attributes to it\n      if (mutation.type === \"childList\" && mutation.addedNodes.length) {\n        this.cascadeProperties(mutation.addedNodes);\n      }\n      // @TODO: Do something when mutation type is attribute?\n      // else if (mutation.type === \"attributes\") {}\n    }\n  }\n  /* --- End observers --- */\n\n  /**\n   * Validate that the property meets the requirements for type and naming.\n   */\n  static _validateProperties() {\n    for (let propName in this.allProperties) {\n      const propDef = this.allProperties[propName];\n\n      // Verify that properties conform to the allowed data types\n      if (!isAllowedType(propDef)) {\n        this.error(`Property \"${propName}\" on ${this.name} must have type String, Number, or Boolean.`);\n      }\n\n      // Verify the property name conforms to our naming rules\n      if (!/^[a-z_]/.test(propName)) {\n        this.error(\n          `Property ${this.name}.${propName} defined, but prop names must begin with a lower-case letter or an underscore`\n        );\n      }\n\n      const isFunction = typeof propDef.default === \"function\";\n\n      // If the default value is not the same type as defined by the property\n      // and it's not a function (we can't validate the output of the function\n      // on the class level), throw a warning\n      if (propDef.default && !isValidDefaultType(propDef) && !isFunction)\n        this.error(\n          `[${this.name}] The default value \\`${propDef.default}\\` does not match the assigned type ${propDef.type.name} for the \\'${propName}\\' property`\n        );\n    }\n  }\n\n  /**\n   * Convert provided property value to the correct type as defined in the properties method.\n   */\n  _castPropertyValue(propDef, attrValue) {\n    switch (propDef.type) {\n      case Number:\n        // map various attribute string values to their respective\n        // desired property values\n        return {\n          [attrValue]: Number(attrValue),\n          null: null,\n          NaN: NaN,\n          undefined: undefined\n        }[attrValue];\n\n      case Boolean:\n        return attrValue !== null;\n\n      case String:\n        return {\n          [attrValue]: attrValue,\n          undefined: undefined\n        }[attrValue];\n\n      default:\n        return attrValue;\n    }\n  }\n\n  /**\n   * Map provided value to the attribute name on the component.\n   */\n  _assignValueToAttribute(obj, attr, value) {\n    // If the default is false and the property is boolean, we don't need to do anything\n    const isBooleanFalse = obj.type === Boolean && !value;\n    const isNull = value === null;\n    const isUndefined = typeof value === \"undefined\";\n\n    // If the attribute is not defined, set the default value\n    if (isBooleanFalse || isNull || isUndefined) {\n      this.removeAttribute(attr);\n    } else {\n      // Boolean values get an empty string: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\n      if (obj.type === Boolean && typeof value === \"boolean\") {\n        this.setAttribute(attr, \"\");\n      } else {\n        // Validate against the provided values\n        if (obj.values) {\n          this._validateAttributeValue(obj, attr, value);\n        }\n\n        // Still accept the value provided even if it's not valid\n        this.setAttribute(attr, value);\n      }\n    }\n  }\n\n  /**\n   * Maps the defined slots into an object that is easier to query\n   */\n  _initializeSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n\n    if (window.ShadyCSS && this._slotsObserver) this._slotsObserver.disconnect();\n\n    // Loop over the properties provided by the schema\n    Object.keys(slots).forEach(slot => {\n      let slotObj = slots[slot];\n\n      // Only attach the information if the data provided is a schema object\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        // If it's a named slot, look for that slot definition\n        if (slotObj.namedSlot) {\n          // Check prefixed slots\n          result = this.getSlot(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n\n          // Check for unprefixed slots\n          result = this.getSlot(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          // If it's the default slot, look for direct children not assigned to a slot\n        } else {\n          result = [...this.children].filter(child => !child.hasAttribute(\"slot\"));\n\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n\n        // If the slot exists, attach an attribute to the parent to indicate that\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n\n    this.log(\"Slots validated.\");\n\n    if (window.ShadyCSS && this._slotsObserver) this._slotsObserver.observe(this, { childList: true });\n  }\n\n  /**\n   * Sets up the property definitions based on the properties method.\n   */\n  _initializeProperties() {\n    const properties = this._pfeClass.allProperties;\n    let hasCascade = false;\n\n    if (Object.keys(properties).length > 0) this.log(`Initialize properties`);\n\n    for (let propName in properties) {\n      const propDef = properties[propName];\n\n      // Check if the property exists, throw a warning if it does.\n      // HTMLElements have a LOT of properties; it wouldn't be hard\n      // to overwrite one accidentally.\n      if (typeof this[propName] !== \"undefined\") {\n        this.log(\n          `Property \"${propName}\" on ${this.constructor.name} cannot be defined because the property name is reserved`\n        );\n      } else {\n        const attrName = this._pfeClass._prop2attr(propName);\n        if (propDef.cascade) hasCascade = true;\n\n        Object.defineProperty(this, propName, {\n          get: () => {\n            const attrValue = this.getAttribute(attrName);\n\n            return this._castPropertyValue(propDef, attrValue);\n          },\n          set: rawNewVal => {\n            // Assign the value to the attribute\n            this._assignValueToAttribute(propDef, attrName, rawNewVal);\n\n            return rawNewVal;\n          },\n          writeable: true,\n          enumerable: true,\n          configurable: false\n        });\n      }\n    }\n\n    // If any of the properties has cascade, attach a new mutation observer to the component\n    if (hasCascade) {\n      this._cascadeObserver = new MutationObserver(this._parseObserver);\n    }\n  }\n\n  /**\n   * Intialize the default value for an attribute.\n   */\n  _initializeAttributeDefaults() {\n    const properties = this._pfeClass.allProperties;\n\n    for (let propName in properties) {\n      const propDef = properties[propName];\n\n      const attrName = this._pfeClass._prop2attr(propName);\n\n      if (propDef.hasOwnProperty(\"default\")) {\n        let value = propDef.default;\n\n        // Check if default is a function\n        if (typeof propDef.default === \"function\") {\n          value = propDef.default(this);\n        }\n\n        // If the attribute has not already been set, assign the default value\n        if (!this.hasAttribute(attrName)) {\n          // Assign the value to the attribute\n          this._assignValueToAttribute(propDef, attrName, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate the value against provided values.\n   */\n  // @TODO add support for a validation function\n  _validateAttributeValue(propDef, attr, value) {\n    if (\n      Array.isArray(propDef.values) &&\n      propDef.values.length > 0 &&\n      !propDef.values.includes(value) // ||\n      // (typeof propDef.values === \"string\" && propDef.values !== value) ||\n      // (typeof propDef.values === \"function\" && !propDef.values(value))\n    ) {\n      this.warn(\n        `${value} is not a valid value for ${attr}. Please provide one of the following values: ${propDef.values.join(\n          \", \"\n        )}`\n      );\n    }\n\n    return value;\n  }\n\n  /**\n   * Look up an attribute name linked to a given property name.\n   */\n  static _prop2attr(propName) {\n    return this._getCache(\"prop2attr\")[propName];\n  }\n\n  /**\n   * Look up an property name linked to a given attribute name.\n   */\n  static _attr2prop(attrName) {\n    return this._getCache(\"attr2prop\")[attrName];\n  }\n\n  /**\n   * Convert a property name to an attribute name.\n   */\n  static _convertPropNameToAttrName(propName) {\n    const propDef = this.allProperties[propName];\n\n    if (propDef.attr) {\n      return propDef.attr;\n    }\n\n    return propName\n      .replace(/^_/, \"\")\n      .replace(/^[A-Z]/, l => l.toLowerCase())\n      .replace(/[A-Z]/g, l => `-${l.toLowerCase()}`);\n  }\n\n  /**\n   * Convert an attribute name to a property name.\n   */\n  static _convertAttrNameToPropName(attrName) {\n    for (let prop in this.allProperties) {\n      if (this.allProperties[prop].attr === attrName) {\n        return prop;\n      }\n    }\n\n    // Convert the property name to kebab case\n    const propName = attrName.replace(/-([A-Za-z])/g, l => l[1].toUpperCase());\n    return propName;\n  }\n\n  _copyAttributes(selectors, set) {\n    selectors.forEach(selector => {\n      set[selector].forEach(attr => {\n        this._copyAttribute(attr, selector);\n      });\n    });\n  }\n\n  _copyAttribute(name, to) {\n    const recipients = [...this.querySelectorAll(to), ...this.shadowRoot.querySelectorAll(to)];\n    const value = this.getAttribute(name);\n    const fname = value == null ? \"removeAttribute\" : \"setAttribute\";\n    for (const node of recipients) {\n      node[fname](name, value);\n    }\n  }\n\n  static _convertSelectorsToArray(selectors) {\n    if (selectors) {\n      if (typeof selectors === \"string\") return selectors.split(\",\");\n      else if (typeof selectors === \"array\" || typeof selectors === \"object\") return selectors;\n      else {\n        this.warn(`selectors should be provided as a string, array, or object; received: ${typeof selectors}.`);\n      }\n    }\n\n    return;\n  }\n\n  static _parsePropertiesForCascade(mergedProperties) {\n    let cascadingProperties = {};\n    // Parse the properties to pull out attributes that cascade\n    for (const [propName, config] of Object.entries(mergedProperties)) {\n      let cascadeTo = this._convertSelectorsToArray(config.cascade);\n\n      // Iterate over each node in the cascade list for this property\n      if (cascadeTo)\n        cascadeTo.map(nodeItem => {\n          let attr = this._prop2attr(propName);\n          // Create an object with the node as the key and an array of attributes\n          // that are to be cascaded down to it\n          if (!cascadingProperties[nodeItem]) cascadingProperties[nodeItem] = [attr];\n          else cascadingProperties[nodeItem].push(attr);\n        });\n    }\n\n    return cascadingProperties;\n  }\n\n  /**\n   * Caching the attributes and properties data for efficiency\n   */\n  static create(pfe) {\n    pfe._createCache();\n    pfe._populateCache(pfe);\n    pfe._validateProperties();\n    window.customElements.define(pfe.tag, pfe);\n\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-defined`);\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n  }\n\n  static _createCache() {\n    this._cache = {\n      properties: {},\n      globalProperties: {},\n      componentProperties: {},\n      cascadingProperties: {},\n      attr2prop: {},\n      prop2attr: {}\n    };\n  }\n\n  /**\n   * Cache an object in a given cache namespace.  This overwrites anything\n   * already in that namespace.\n   */\n  static _setCache(namespace, object) {\n    this._cache[namespace] = object;\n  }\n\n  /**\n   * Get a cached object by namespace, or get all cached objects.\n   */\n  static _getCache(namespace) {\n    return namespace ? this._cache[namespace] : this._cache;\n  }\n\n  /**\n   * Populate initial values for properties cache.\n   */\n  static _populateCache(pfe) {\n    // @TODO add a warning when a component property conflicts with a global property.\n    const mergedProperties = { ...pfe.properties, ...PFElement.properties };\n\n    pfe._setCache(\"componentProperties\", pfe.properties);\n    pfe._setCache(\"globalProperties\", PFElement.properties);\n    pfe._setCache(\"properties\", mergedProperties);\n\n    // create mapping objects to go from prop name to attrname and back\n    const prop2attr = {};\n    const attr2prop = {};\n    for (let propName in mergedProperties) {\n      const attrName = this._convertPropNameToAttrName(propName);\n      prop2attr[propName] = attrName;\n      attr2prop[attrName] = propName;\n    }\n    pfe._setCache(\"attr2prop\", attr2prop);\n    pfe._setCache(\"prop2attr\", prop2attr);\n\n    const cascadingProperties = this._parsePropertiesForCascade(mergedProperties);\n    if (Object.keys(cascadingProperties)) pfe._setCache(\"cascadingProperties\", cascadingProperties);\n  }\n\n  /**\n   * allProperties returns an object containing PFElement's global properties\n   * and the descendents' (such as PfeCard, etc) component properties.  The two\n   * objects are merged together and in the case of a property name conflict,\n   * PFElement's properties override the component's properties.\n   */\n  static get allProperties() {\n    return this._getCache(\"properties\");\n  }\n\n  /**\n   * cascadingProperties returns an object containing PFElement's global properties\n   * and the descendents' (such as PfeCard, etc) component properties.  The two\n   * objects are merged together and in the case of a property name conflict,\n   * PFElement's properties override the component's properties.\n   */\n  static get cascadingProperties() {\n    return this._getCache(\"cascadingProperties\");\n  }\n}\n\nautoReveal(PFElement.log);\n\nexport default PFElement;\n","/**\n * Verify that a property definition's `type` field contains one of the allowed\n * types.\n *\n * Allowed types are String, Number, and Boolean.  If `type` is falsy, it\n * defaults to String.\n */\nexport function isAllowedType(definition) {\n  return [String, Number, Boolean].includes(definition.type || String);\n}\n\n/**\n * Verify that a property definition's `default` value is of the correct type.\n *\n * A `default` value is valid if it's of the same type as the `type`\n * definition.  Or, if there is no `type` definition, then it must be a String\n * (the default value for `type`).\n */\nexport function isValidDefaultType(definition) {\n  return definition.hasOwnProperty(\"default\") && definition.default.constructor === definition.type;\n}\n"],"names":["logger","handleWebComponentsReady","document","body","removeAttribute","Array","prototype","includes","defineProperty","valueToFind","fromIndex","this","TypeError","o","Object","len","length","x","y","n","k","Math","max","abs","isNaN","entries","obj","ownProps","keys","i","resArray","String","startsWith","search","rawPos","pos","substring","prefix","PFElement","HTMLElement","msgs","log","tag","id","join","warn","error","children","textContent","trim","name","filter","child","hasAttribute","getAttribute","reduce","_this2","value","element","substr","style","setProperty","window","getComputedStyle","getPropertyValue","querySelectorAll","shadowRoot","item","tagName","toLowerCase","slice","map","all","customElements","whenDefined","then","resetContext","_this3","on","fallback","context","contextVariable","_pfeClass","version","random","toString","cssVariable","preference","_debugLog","_trackPerformance","debugLog","Error","Boolean","el","properties","allProperties","oa","prop","observer","cascade","alias","_this4","_convertPropNameToAttrName","p","_initializeAttributeDefaults","ShadyCSS","styleElement","babelHelpers.typeof","slots","_slotsObserver","MutationObserver","_this5","_initializeSlots","_cascadeObserver","disconnect","attr","oldVal","newVal","propDef","aliasedPropDef","aliasedAttr","propName","_attr2prop","_prop2attr","_castPropertyValue","_copyAttribute","_convertSelectorsToArray","innerHTML","template","html","prepareTemplate","appendChild","content","cloneNode","cascadeProperties","trackPerformance","mark","_markId","_markCount","measure","undefined","err","observe","childList","_rendered","bubbles","cancelable","composed","detail","dispatchEvent","CustomEvent","nodeList","selectors","_getCache","forEach","nodeItem","matches","selector","push","components","Promise","_copyAttributes","classList","add","oldValue","newValue","contextUpdate","newContext","found","exec","mutationsList","mutation","type","addedNodes","attrValue","Number","NaN","setAttribute","values","_validateAttributeValue","slotExists","result","slotObj","slot","namedSlot","_this7","getSlot","nodes","hasCascade","attrName","_this8","constructor","_assignValueToAttribute","rawNewVal","_parseObserver","hasOwnProperty","default","isArray","set","to","recipients","fname","test","isFunction","definition","replace","l","toUpperCase","split","mergedProperties","cascadingProperties","config","cascadeTo","_this10","pfe","_createCache","_populateCache","_validateProperties","define","_cache","namespace","object","_setCache","prop2attr","attr2prop","_parsePropertiesForCascade","pfeClass","delayRender","_this","bind","randomId","schemaProps","schemaProperties","createElement","_initializeProperties","attachShadow","mode","render","logFunction","polyfillPresent","WebComponents","polyfillReady","ready","addEventListener","autoReveal"],"mappings":"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"}