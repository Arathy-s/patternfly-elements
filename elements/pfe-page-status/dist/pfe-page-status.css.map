{"version":3,"sources":["pfe-page-status.scss","../../pfe-sass/functions/_custom-properties.scss","pfe-page-status.css"],"names":[],"mappings":"AAWA;EACE,yBCuHkC;EDvHlC,yGCuHkC;EDtHlC,eAAe;EACf,QCqHkC;EDrHlC,kCCqHkC;EDpHlC,MAAM;EACN,aAAa;EACb,oBAAa;EAAb,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,4BAAsB;EAAtB,6BAAsB;EAAtB,8BAAsB;MAAtB,0BAAsB;UAAtB,sBAAsB;EACtB,wBAAuB;EAAvB,+BAAuB;MAAvB,qBAAuB;UAAvB,uBAAuB;EACvB,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,WAAW;AEVb;;AFaA;EACE,aAAa;AEVf;;AFaA;EACE,iCAAyB;UAAzB,yBAAyB;AEV3B;;AFSA;EAGI,WCoGgC;EDpGhC,6ECoGgC;EDnGhC,qBAA4B;EAC5B,yBCkGgC;EDlGhC,2DCkGgC;EDjGhC,mBAAwB;EACxB,0ECOgC;EDPhC,yGCOgC;EDNhC,eCMgC;EDNhC,4CCMgC;EDLhC,iBAAiB;EACjB,gBAAgB;EAChB,mBAAmB;AERvB;;AFeE;EACE,qFAA8B;EAC9B,iEAAoB;AEZxB;;AFUE;EACE,oFAA8B;EAC9B,iEAAoB;AEPxB;;AFKE;EACE,mFAA8B;EAC9B,iEAAoB;AEFxB;;AFAE;EACE,gFAA8B;EAC9B,iEAAoB;AEGxB;;AFCA;;EAEE,oFAA8B;EAC9B,2DAAoB;AEEtB;;AFCA;EACE,uEAA8B;EAC9B,mEAAoB;AEEtB;;AFCA;EACE,uEAA8B;EAC9B,mEAAoB;AEEtB","file":"pfe-page-status.css","sourcesContent":["@import \"../../pfe-sass/pfe-sass\";\n\n$LOCAL: status;\n\n$LOCAL-VARIABLES: (\n  Color: pfe-var(text--on-dark),\n  BackgroundColor: pfe-var(feedback--default),\n  TextTransform: uppercase,\n  Right: 0\n);\n\n:host {\n  background-color: pfe-local(BackgroundColor);\n  position: fixed;\n  right: pfe-local(Right);\n  top: 0;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 3rem;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.flag {\n  transform: rotateZ(90deg);\n  > span {\n    color:          pfe-local(Color);\n    display:        inline-block;\n    text-transform: pfe-local(TextTransform);\n    font-size:      0.875rem;\n    font-family:    pfe-var(font-family);\n    font-size:      pfe-var(font-size);\n    font-weight: bold;\n    line-height: 1em;\n    white-space: nowrap;\n    // writing-mode: vertical-rl;\n    // text-orientation: mixed;\n  }\n}\n\n@each $state in (important, critical, success, info) {\n  :host([status=\"#{$state}\"]) {\n    --pfe-status--BackgroundColor:  #{pfe-var(feedback--#{$state})};\n    --pfe-status--Color: #{pfe-var(text--on-dark)};\n  }\n}\n\n:host([status=\"moderate\"]),\n:host([status=\"warning\"]) {\n  --pfe-status--BackgroundColor:  #{pfe-var(feedback--moderate)};\n  --pfe-status--Color: #{pfe-var(text)};\n}\n\n:host([status=\"normal\"]) {\n  --pfe-status--BackgroundColor: #{pfe-var(ui-accent)};\n  --pfe-status--Color: #{pfe-var(ui-accent--text)};\n}\n\n:host([status=\"accent\"]) {\n  --pfe-status--BackgroundColor: #{pfe-var(ui-accent)};\n  --pfe-status--Color: #{pfe-var(ui-accent--text)};\n}","/// ===========================================================================\n/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $category - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map - SASS Map of variables\n/// @param {String} $fallback [\"\"] - Optional fallback override\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {Boolean} $USE-FALLBACK - True to use fallback colors, false to omit\n/// @example -\n///\n///     1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           color:       #{pfe-var( text )};\n///           background:  #{pfe-var( surface--base )};\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-get-from-map($category, $key, $map, $fallback: null) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--\";\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $USE-FALLBACK and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @requires {Map} $pfe-vars - A map of the variables in the repository\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_general.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           padding:     #{pfe-var( container-spacer )};\n///           font-size:   #{pfe-var( font-size )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            padding: var(--pfe-theme--container-spacer, 16px);\n///            font-size: var(--pfe-theme--font-size, 16px);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// ===========================================================================\n/// Local\n///\n/// Returns CSS Var for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n/// ===========================================================================\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// ===========================================================================\n/// Apply broadcast function, for use with text & links.\n///\n/// It requests that the color property look for a broadcasted variable (from a container component)\n/// first if there is one, and if not, use a theme variable, with the hex color fallback.\n///\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n///\n/// @example:   color: pfe-broadcasted(ui-base--hover);\n/// @output:  Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.\";\n///\n/// @example:   color: pfe-broadcasted(link);\n/// @output:  color: var(--pfe-broadcasted--link);\n/// Was: pfe-radio!\n/// ===========================================================================\n@function pfe-broadcasted($broadcast) {\n    $fallback: \"\";\n    @if $USE-FALLBACK {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// ===========================================================================\n/// Variable fetch\n///\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           z-index:     #{pfe-zindex( content )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            z-index: var(--pfe-theme--zindex--content, 1);\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// ===========================================================================\n/// Map value fetch\n///\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n///\n/// @param {String} $name - Name of the key for the map\n/// @example -\n///\n///     1. To look up a value: /elements/pfe-sass/src/maps/_zindex.scss\n///     2. Use like this:\n///         ```\n///         .my-element {\n///           background-color:     #{pfe-fetch( ui-base )};\n///         }\n///         ```\n///     3. Which will return:\n///         ```\n///         .my-element {\n///            background-color: #06c;\n///         }\n///         ```\n/// ===========================================================================\n@function pfe-fetch($name) {\n    $var-name: to-string($name, \"--\");\n    @if map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}",":host {\n  background-color: var(--pfe-status--BackgroundColor, var(--pfe-theme--color--feedback--default, #4f5255));\n  position: fixed;\n  right: var(--pfe-status--Right, 0);\n  top: 0;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 3rem;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n.flag {\n  transform: rotateZ(90deg);\n}\n\n.flag > span {\n  color: var(--pfe-status--Color, var(--pfe-theme--color--text--on-dark, #fff));\n  display: inline-block;\n  text-transform: var(--pfe-status--TextTransform, uppercase);\n  font-size: 0.875rem;\n  font-family: var(--pfe-theme--font-family, \"Overpass\", Overpass, Helvetica, helvetica, arial, sans-serif);\n  font-size: var(--pfe-theme--font-size, 16px);\n  font-weight: bold;\n  line-height: 1em;\n  white-space: nowrap;\n}\n\n:host([status=\"important\"]) {\n  --pfe-status--BackgroundColor:  var(--pfe-theme--color--feedback--important, #d73401);\n  --pfe-status--Color: var(--pfe-theme--color--text--on-dark, #fff);\n}\n\n:host([status=\"critical\"]) {\n  --pfe-status--BackgroundColor:  var(--pfe-theme--color--feedback--critical, #a30000);\n  --pfe-status--Color: var(--pfe-theme--color--text--on-dark, #fff);\n}\n\n:host([status=\"success\"]) {\n  --pfe-status--BackgroundColor:  var(--pfe-theme--color--feedback--success, #2e7d32);\n  --pfe-status--Color: var(--pfe-theme--color--text--on-dark, #fff);\n}\n\n:host([status=\"info\"]) {\n  --pfe-status--BackgroundColor:  var(--pfe-theme--color--feedback--info, #0277bd);\n  --pfe-status--Color: var(--pfe-theme--color--text--on-dark, #fff);\n}\n\n:host([status=\"moderate\"]),\n:host([status=\"warning\"]) {\n  --pfe-status--BackgroundColor:  var(--pfe-theme--color--feedback--moderate, #ffc024);\n  --pfe-status--Color: var(--pfe-theme--color--text, #151515);\n}\n\n:host([status=\"normal\"]) {\n  --pfe-status--BackgroundColor: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-status--Color: var(--pfe-theme--color--ui-accent--text, #fff);\n}\n\n:host([status=\"accent\"]) {\n  --pfe-status--BackgroundColor: var(--pfe-theme--color--ui-accent, #06c);\n  --pfe-status--Color: var(--pfe-theme--color--ui-accent--text, #fff);\n}\n"],"sourceRoot":"../src"}