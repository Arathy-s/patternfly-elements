// @todo Change to mixins; no efficiency gain with placeholders in web components

/// Clear box element styles
%reset-box {
  margin: 0;
  padding: 0;
}

/// Clear list styles
%reset-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

/// Clear button styles
%reset-button {
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;
  text-align: left;
}

/// Set up a container element
%container {
  position: relative;
  display: block;
  width: 100%;
  padding: pfe-var(container-spacer);
}

/// Screen-reader only content
%sr-only {
  position: absolute;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

/// Fallback surface styles for IE11 only
%fallback-surface {
  @include browser-query(ie11) {
    background-color: pfe-fetch(surface--lightest) !important;
    color: pfe-fetch(text) !important;
  }
}

/// Fallback text styles for IE11 only
%fallback-text {
  @include browser-query(ie11) {
    color: pfe-fetch(text) !important;
  }
}

// Mixins and extends can't use the LOCAL-VARIABLES map because we would be
// at risk of overriding an elements map if they call our mixin. We need to
// use just regular sass variables and pfe-local and specify the $fallbacks.
@mixin ordered-list-primary($size: 56px) {
  // First we create our Sass variables that we will use for fallbacks
  $gap: pfe-var(content-spacer);
  // rgb value of the color theme of the circle
  // we need to wrap this in a calc function so it can be dynamic.
  $color: (238, 0, 0);
  $font-size: $pf-global--FontSize--2xl;

  list-style: none;
  min-height: pfe-local(gap, $fallback: $gap);
  margin: pfe-local(gap, $fallback: $gap);
  padding-left: pfe-local(PaddingLeft, $fallback: 0);

  & > li {
    // increment the local counter variable
    counter-increment: pfe-list;
    position: relative;
    min-height: pfe-local(size, $region: circle, $fallback: $size);
    // the li content will start after the circle and a defined gap
    padding-left: calc(#{pfe-local(gap, $fallback: $gap)} + #{pfe-local(size, $region: circle, $fallback: $size)});
    // offset between li's
    margin-top: pfe-local(gap, $region: circle);
    margin-bottom: pfe-local(gap, $region: circle);
    // the li content needs to align with the middle of the radius but we
    // need to account for the fact that it's also calculating the size
    // of the line height of the number inside of the circle
    padding-top: calc((#{pfe-local(size, $region: circle, $fallback: $size)} / 2) - ((#{pfe-local(FontSize, $region: circle, $fallback: $font-size)} / 2)));
  }
  & > li:before {
    @include pfe-typography(2xl, $type: "title");
    // we need to make sure that if the size of the number in the circle changes
    // that doesn't affect the size or shape of the circle. since we don't have
    // any more psuedo elements to work with, we need to use the flexbox technique
    // to center the text.
    display: block;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    // make the circle using border-radius
    border-radius: 50%;
    // keep the circle on the upper left
    position: absolute;
    top: 0;
    left: 0;
    // set the size of the circle
    width: pfe-local(size, $region: circle, $fallback: $size);
    height: pfe-local(size, $region: circle, $fallback: $size);
    // set the contents of the circle
    content: counter(pfe-list);
    font-size: pfe-local(FontSize, $region: circle, $fallback: $font-size);
    color: rgba(#{pfe-local(color, $region: circle, $fallback: $color)}, 1);
    // generate a background color based on the circle text color
    // provide an override for BackgroundColor if the user needs to specify
    // custom color.
    background-color: pfe-local(BackgroundColor, $region: circle, $fallback: rgba(pfe-local(color, $region: circle, $fallback: $color), 0.07));
  }

  // @todo we might want to handle this differently
  //       this is a downside of having progressively enhanced grids,
  //       this are pre-setting margins and we have then override them
  &.pfe-l-grid.pfe-m-gutters {
    margin-top: pfe-local(size, $region: circle, $fallback: $size);
    margin-bottom: pfe-local(size, $region: circle, $fallback: $size);
    > li {
      // maintain offset offset between li's
      margin-top: pfe-local(size, $region: circle, $fallback: $size);
      margin-bottom: pfe-local(size, $region: circle, $fallback: $size);
    }
  }
}