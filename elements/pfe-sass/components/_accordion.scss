/// ===========================================================================
/// Accordion-specific SASS Vars
/// ===========================================================================

@function pfe-accordion-variables($state: default, $theme: default, $variant: default) {
  $variables: ();

  @if $state != expanded { // Default state
    // Shared variables for all themes
    $variables: (
      BorderColor--accent: transparent,
      BorderColor:         pfe-color(surface--border),
      BorderTopWidth:      pfe-var(surface--border-width),
      BorderRightWidth:    0,
      BorderBottomWidth:   pfe-var(surface--border-width),
      BorderLeftWidth:     pfe-var(surface--border-width--heavy),
      BackgroundColor:     transparent,
      TextAlign:           left,
      Padding--base:       pfe-var(container-spacer),
      accent:              pfe-color(ui-base),
      Width:               100%,
      header: (
        FontSize:    calc(#{pfe-var(font-size)} * 1.1)
      )
    );

    @if $theme == dark { // Dark theme
      $variables: (
        accent: #{pfe-color(ui-base--on-dark)},
        theme:  dark,
        Color:  pfe-apply-broadcast(text--on-dark)
      );
    }
    @else if $theme == saturated { // Saturated theme
      $variables: (
        accent: #{pfe-color(ui-base--on-saturated)},
        theme: saturated,
        Color:  pfe-apply-broadcast(text--on-saturated)
      );
    }
    @else { // Light theme
      $variables: map-deep-merge($variables, (
        accent: #{pfe-color(ui-base)},
        theme: light,
        Color:  pfe-apply-broadcast(text)
      ));
    }

    @if $variant == disclosure {
      $variables: (
        BorderRightWidth: #{pfe-var(surface--border-width)},
        BorderLeftWidth: #{pfe-var(surface--border-width)},
        BorderColor--accent: #{pfe-color(surface--border)}
      );
    }
  }
  @else { // Expanded state
    // Shared variables for all themes
    $variables: (
      BorderColor:         #{pfe-color(surface--border)},
      BorderRightWidth:    #{pfe-var(surface--border-width)},
      BorderLeftWidth:     #{pfe-var(surface--border-width--heavy)},
      BackgroundColor:     rgba(255, 255, 255, 1),
      Color:               #{pfe-color(text)},
      BorderColor--accent: #{pfe-color(ui-base)}
    );

    @if $theme == dark { // Dark theme
      $variables: (
        BackgroundColor:    rgba(247, 247, 249, .1),
        Color:               #{pfe-apply-broadcast(text)},
        BorderColor--accent: #{pfe-color(ui-base--on-dark)}
      );
    }
    @else if $theme == saturated { // Saturated theme
      $variables: (
        BackgroundColor:    rgba(0, 0, 0, 0.2),
        Color:               #{pfe-apply-broadcast(text)},
        BorderColor--accent: #{pfe-color(ui-base--on-saturated)}
      );
    }

    @if $variant == disclosure {
      $variables: (
        BorderLeftWidth: #{pfe-var(surface--border-width--heavy)},
        BorderColor--accent: #{pfe-color(ui-base)}
      );
    }
  }

  @return $variables;
}

@mixin pfe-accordion-props($variant: default) {  
  margin: 0;
  width: #{pfe-local(Width)};
  max-width: 100%;
  height: auto;
  position: relative;

  // Since the default bg color is transparent, look to broadcast values
  background-color: #{pfe-local(BackgroundColor)};
  color:            #{pfe-local(Color)};

  // Border settings
  border-top:       #{pfe-local(BorderTopWidth) pfe-var(surface--border-style) pfe-local(BorderColor)};
  border-right:     #{pfe-local(BorderRightWidth) pfe-var(surface--border-style) pfe-local(BorderColor)};
  border-bottom:    #{pfe-local(BorderBottomWidth) pfe-var(surface--border-style) pfe-local(BorderColor)};
  border-left:      #{pfe-local(BorderLeftWidth) pfe-var(surface--border-style) pfe-local(BorderColor--accent)};

  box-shadow: #{pfe-local(BoxShadow)};

  &:hover {
    $hover: (
      BorderColor--accent: #{pfe-local(accent)}
    );
    @include pfe-print-variables($hover);
  }
}

//-- Trigger-specific properties
@mixin pfe-trigger {
  $chevron--spacing: 50px;

  $variables: (
    BorderTopWidth:    pfe-var(surface--border-width),
    BorderBottomWidth: 0,
    trigger: (
      Padding: #{pfe-local(Padding--base)} #{$chevron--spacing} #{pfe-local(Padding--base)} calc(#{pfe-local(Padding--base)} * 1.5)
    )
  );

  @include pfe-print-variables($variables);
  @include pfe-accordion-props;

  // -webkit-appearance: button;
  cursor: pointer;
  z-index: 1;

  font-family: inherit;
  font-size:   #{pfe-local($region: header, $cssvar: FontSize)};
  font-weight: #{pfe-var(font-weight--bold)};
  text-align:  #{pfe-local(TextAlign)};
  line-height: #{pfe-var(line-height)};
  padding:     #{pfe-local($region: trigger, $cssvar: Padding)} !important;

  &:hover {
    outline: none;
    z-index: 2;
  }

  &:focus {
      outline: none;
      z-index: 2;
      text-decoration: underline;
  }

  &::-moz-focus-inner {
      border: 0;
  }
}

@mixin pfe-trigger-last($theme: light) {
  $variables: (
    BorderBottomWidth: #{pfe-var(surface--border-width)}
  );

  @include pfe-print-variables($variables);
}

//-- Panel-specific properties
@function pfe-panel-variables($theme: light) {
  $variables: (
    BorderTopWidth: 0,
    BorderBottomWidth: 0,
    BoxShadow: 0 5px #{pfe-var(surface--border-width--heavy)} rgba(140, 140, 140, 0.35)
  );

  @if $theme != "light" {
    $variables: map-deep-merge($variables, (
      BoxShadow: none
    ));
  }

  @return $variables;
}

@mixin pfe-panel-container() {
  // Ensure the box shadow does not propagate to nest accordions
  $variables: (
    BoxShadow: none
  );
  @include pfe-print-variables( $variables );

  @extend %container;
  padding: #{pfe-local(panel-container--Padding)};
}

/// ===========================================================================
/// Accordion chevrons
/// ===========================================================================

@mixin pfe-chevron($state: open, $position: after, $size: .4em, $offset: $size) {
  content: "";
  position: absolute;
  top: calc(#{pfe-var(container-spacer)} + #{$offset});

  display: block;
  border-style: #{pfe-var(surface--border-style)};
  height: #{$size};
  width:  #{$size};
  transition: transform 0.15s;
  @if $state == open {
    border-width: .1em .1em 0 0;
    border-bottom: 0;
    transform: rotate(-45deg);
    top: calc(#{pfe-var(container-spacer)} + #{$offset});
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.5);
      top: calc(#{pfe-var(container-spacer)} + .25em);
      transform: rotate(135deg);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.5);
    }
  }
  @else {
    border-width: 0 .1em .1em 0;
    transform: rotate(45deg);
    @if $position == before {
      left: calc(#{pfe-var(container-spacer)} * 1.5);
      transform: rotate(-45deg);
    }
    @else {
      right: calc(#{pfe-var(container-spacer)} * 1.5);
    }
  }
}