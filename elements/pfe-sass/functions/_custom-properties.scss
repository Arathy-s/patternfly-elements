/// ===========================================================================
/// Get from map - used by pfe-colors, pfe-vars, pfe-zindex
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
///
/// @param {String} $category - Category name to be appended to variables within the map/system
/// @param {String} $key - Variable name to be used and prepended with --pfe-theme
/// @param {Map} $map - SASS Map of variables
/// @param {String} $fallback [""] - Optional fallback override
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {Boolean} $USE-FALLBACK - True to use fallback colors, false to omit
/// @example -
///
///     1. To look up a color: /elements/pfe-sass/src/maps/_colors.scss
///     2. Use like this:
///         ```
///         .my-element {
///           color:       #{pfe-var( text )};
///           background:  #{pfe-var( surface base )};
///         }
///         ```
/// ===========================================================================
@function pfe-get-from-map($category, $key, $map, $fallback: null) {
    // Start building the variable declaration
    $var-declaration: "--#{$repo}-theme--";
    // If the category exists, inject that into the string
    @if $category != "" {
        $var-declaration: "#{$var-declaration}#{$category}--";
    }
    // Append the key to the string
    $var-declaration: "#{$var-declaration}#{$key}";

    // If the fallback is not provided but use-fallback is set to true
    @if $fallback == null and $USE-FALLBACK and map-deep-get($map, $key) != null {
        $fallback: map-deep-get($map, $key);
    }
    @if $fallback != null {
        // Create the variable declaration
        $var-declaration: "#{$var-declaration}, #{$fallback}";
    }

    // Return the variable declaration string
    @return var(#{$var-declaration});   
}

/// ===========================================================================
/// Variable fetch
///
/// Returns CSS variable stack with exposed theme variable and respective fallback
///
/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme
/// @param {String} $fallback [null] - Optional custom fallback
/// @requires {Map} $pfe-vars - A map of the variables in the repository
/// @example -
///
///     1. To look up a value: /elements/pfe-sass/src/maps/_general.scss
///     2. Use like this:
///         ```
///         .my-element {
///           padding:     #{pfe-var( container-spacer )};
///           font-size:   #{pfe-var( font-size )};
///         }
///         ```
///     3. Which will return:
///         ```
///         .my-element {
///            padding: var(--pfe-theme--container-spacer, 16px);
///            font-size: var(--pfe-theme--font-size, 16px);
///         }
///         ```
/// ===========================================================================
@function pfe-var($cssvar, $fallback: null) {
    $var-name: to-string($cssvar, "--");
    @if map-deep-get($pfe-vars, $cssvar) {
        @return pfe-get-from-map("", $var-name, $pfe-vars, $fallback);
    }
    @else if map-deep-get($pfe-colors, $cssvar) {
        @return pfe-get-from-map("", $var-name, $pfe-colors, $fallback);
    }
    @else if map-deep-get($pfe-broadcasted, $cssvar) {
        @return pfe-get-from-map("", $var-name, $pfe-broadcasted);
    }
    @else if map-deep-get($pfe-zindex, $cssvar) {
        @return pfe-get-from-map("zindex", $var-name, $pfe-zindex);
    }
    @else {
        @error "#{$var-name} could not be found.";
    }
}

/// ===========================================================================
/// Local
///
/// Returns CSS Var for the local component-scoped variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component
/// @use -
///     ```
///     :host {
///         padding-top:      #{pfe-local(paddingTop)};
///         padding-bottom:   #{pfe-local(paddingBottom)};
///     }
///     ```
/// ===========================================================================
@function pfe-local($cssvar, $region: null) {
    $fallback: null;

    // If a fallback is not defined, use the global variables map
    @if length($LOCAL-VARIABLES) > 0 {
        $fallback: pfe-fetch($cssvar, $region);
    }

    // If a region value exists, build the region string
    @if $region != null {
        $region: "__#{$region}";
    }

    // Start building the variable declaration
    $local-declaration: "--#{$repo}-#{$LOCAL}-local#{$region}--#{to-string($cssvar, '--')}";
    
    @if $fallback {
        $local-declaration: "#{$local-declaration}, #{$fallback}";
    }

    // Return the variable declaration string
    @return var(--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}, var(#{$local-declaration}));
}

/// ===========================================================================
/// Apply broadcast function, for use with text & links.
///
/// It requests that the color property look for a broadcasted variable (from a container component)
/// first if there is one, and if not, use a theme variable, with the hex color fallback.
///
/// @param {String} $broadcast - name of the broadcast variable to apply
/// @requires {String} $repo - Name of repo, which is "pfe"
///
/// @example:   color: #{pfe-broadcasted(ui-base--hover)};
/// @output:  Error: --pfe-broadcasted--ui-base--hover variable is not currently supported.";
///
/// @example: color: #{pfe-broadcasted(link)};
/// @output:  color: var(--pfe-broadcasted--link);
/// ===========================================================================
@function pfe-broadcasted($broadcast, $fallback: null) {
    @if $USE-FALLBACK and $fallback == null  {
        $fallback: ", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}";
    }
    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {
      @error "--#{$repo}-broadcasted--#{$broadcast} variable is not currently supported.";
    }
    @else {
      @return var(--#{$repo}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});
    }
}

/// ===========================================================================
/// Get fallback
///
/// Returns the fallback value Var for the local component-scoped variable
///
/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component
/// @use -
///     ```
///     :host {
///         padding-top:      #{pfe-local(paddingTop)};
///         padding-bottom:   #{pfe-local(paddingBottom)};
///     }
///     ```
/// ===========================================================================
@function get-fallback($cssvar, $region: null) {
    @if $region {
        @return map-deep-get($LOCAL-VARIABLES, $region, str-split($cssvar, "--"));
    }
    @else {
        @return map-get($LOCAL-VARIABLES, str-split($cssvar, "--"));
    }
}

/// ===========================================================================
/// Fetch value from maps
///
/// Returns the value for the local component-scoped property
///
/// @param {String,List} $name - Location in the map for the value we want
/// @param {String} $region - Identifies the region or slot to which this is assigned
/// @requires {String} $repo - Name of repo, which is "pfe"
/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component
/// @example: padding-top:      #{pfe-fetch(PaddingTop)};
/// @output:  padding-top:      16px;
/// ===========================================================================
@function pfe-fetch($name, $region: null) {
    $var-name: $name;
    $value: null;

    @if $region {
        $var-name: join($region, $var-name);
    }

    @if map-deep-get($LOCAL-VARIABLES, $var-name) {
        $value: map-deep-get($LOCAL-VARIABLES, $var-name);
    }
    @else if map-deep-get($pfe-vars, $var-name) {
        $value: map-deep-get($pfe-vars, $var-name);
    }
    @else if map-deep-get($pfe-colors, $var-name) {
        $value: map-deep-get($pfe-colors, $var-name);
    }
    @else if map-deep-get($pfe-broadcasted, $var-name) {
        $value: map-deep-get($pfe-broadcasted, $var-name);
    }
    @else if map-deep-get($pfe-zindex, $var-name) {
        $value: map-deep-get($pfe-zindex, $var-name);
    }

    @if type-of($value) == "map" {
        $value: map-get($value, default);
    }
    
    @return $value;
}