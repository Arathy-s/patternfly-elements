{"version":3,"sources":["pfe-navigation.scss","../../pfe-sass/mixins/_mixins.scss","../../pfe-sass/functions/_functions.scss","pfe-navigation.css"],"names":[],"mappings":"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","file":"pfe-navigation.css","sourcesContent":["@import \"_shared-assets\";\n\n$variables: (\n  // Default spacing values\n  Padding--vertical: pfe-var(container-padding),\n  Padding--horizontal: pfe-var(container-padding),\n  Padding: 0 pfe-local(Padding--horizontal),\n\n  // Darkest is the default background color\n  BackgroundColor: pfe-color(surface--darkest),\n  Color:           pfe-color(surface--darkest--text),\n\n  // Variables for the border\n  BorderTopColor: transparent,\n  BorderColor:    transparent,\n  Border:         pfe-var(surface--border-width) pfe-var(surface--border-style) pfe-local(BorderColor),\n\n  MaxHeight: 72px,\n\n  // Variables for the trigger icon\n  icon: none,\n\n  // Overlay region\n  overlay: (\n    BackgroundColor: pfe-var($cssvar: overlay--BackgroundColor, $fallback: #{$overlay--BackgroundColor--fallback})\n  ),\n\n  // Trigger region\n  trigger: (\n    FontSize: 16px,\n    FontWeight: 100\n  ),\n\n  // Tray region\n  tray: (\n    Padding: pfe-var(container-padding)\n  )\n);\n\n:host {\n  // Print the variables to the DOM\n  @include print-variables-map($variables);\n\n  // Reduce padding for print\n  @media print {\n    --pfe-navigation--Padding: calc(#{pfe-local(Padding--vertical)} / 2) #{pfe-local(Padding--horizontal)};\n  }\n\n  // Increase horizontal padding for above mobile breakpoints\n  @media screen and (min-width: pfe-breakpoint(sm)) {\n    --pfe-navigation--Padding--horizontal: calc(#{pfe-var(container-padding)} * 2);\n  }\n\n  // Reduce horizontal padding at large breakpoint\n  @media screen and (min-width: pfe-breakpoint(lg)) {\n    --pfe-navigation--Padding--horizontal: calc(#{pfe-var(container-padding)} / 2);\n    --pfe-navigation__tray--Padding: calc(#{pfe-var(container-padding)} * 2);\n  }\n\n  // Increase horizontal padding at xl breakpoint\n  @media screen and (min-width: pfe-breakpoint(xl)) {\n    --pfe-navigation--Padding--horizontal: #{pfe-var(container-padding)};\n  }\n\n  display: block;\n  z-index: pfe-var($cssvar: content, $category: zindex, $map: $z-index);\n  width: 100%;\n}\n\n:host(.sticky) {\n  position: sticky;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  z-index: pfe-var($cssvar: navigation, $category: zindex, $map: $z-index);\n}\n\npfe-icon {\n  --pfe-icon--Color: #{pfe-local(Color)};\n}\n\n// Note: These styles do not pick up in Edge\n::slotted([slot=\"logo\"]) {\n  margin: 0;\n  max-height: pfe-local(MaxHeight);\n}\n\n::slotted([slot=\"mobile-login\"]),\n::slotted([slot=\"mobile-language\"]) {\n  color: #{pfe-radio(color, ui-link)};\n  text-decoration: #{pfe-radio(link, text-decoration)};\n}\n\n::slotted([slot=\"mobile-menu--label\"]) {\n  font-family: pfe-var(font-family);\n  font-size:   pfe-local(FontSize);\n  font-weight: pfe-local(FontWeight);\n  color: pfe-local(Color);\n  margin-bottom: 0;\n}\n\n.pfe-navigation {\n  &__wrapper {\n    @each $prop in (text, ui-link, ui-link--hover, ui-link--visited, ui-link--focus) {\n      --pfe-broadcasted--color--#{$prop}: #{pfe-local($cssvar: Color, $fallback: #{pfe-color(surface--darkest--text)})};\n    }\n    display: flex;\n    position: relative; // Ensures all navigation items are aligned relative to this wrapper\n    z-index: #{pfe-var($cssvar: navigation, $map: $z-index)};\n    \n    background-color: #{pfe-local(BackgroundColor)};\n    color: #{pfe-local(Color)};\n    min-height: #{pfe-local(MaxHeight)};\n  }\n  &__container {\n    width: 100%;\n    max-width: #{pfe-local(Width)};\n    margin: 0 auto;\n    padding: 0 #{pfe-local(Padding--horizontal)};\n\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: stretch;\n    justify-content: space-between;\n\n    // Loop through the other breakpoints\n    @each $size in (md, lg, xl) {\n      @media screen and (min-width: pfe-breakpoint(#{$size})) {\n        // Set the variable for use in the tray region too\n        --pfe-navigation--Width: calc(#{pfe-breakpoint(#{$size})});\n      }\n    }\n\n    @media (min-width: #{pfe-breakpoint(lg)}) {\n      padding: 0;\n    }\n\n    > pfe-navigation-item:not([hidden]) {\n      flex-grow: 1;\n      align-items: flex-end;\n    }\n  }\n  &__overlay {\n    display: block;\n    background-color: pfe-local($cssvar: BackgroundColor, $region: overlay, $fallback: #{$overlay--BackgroundColor--fallback});\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: #{pfe-var($cssvar: overlay, $category: 'zindex', $map: $z-index)};\n    &[hidden] {\n      display: none;\n    }\n  }\n  &__logo {\n    display: flex;\n    flex-flow: column nowrap;\n    align-items: flex-start;\n    justify-content: center;\n    \n    padding-top: #{pfe-local(Padding--vertical)};\n    padding-right: #{pfe-var(container-padding)};\n    padding-bottom: #{pfe-local(Padding--vertical)};\n    // @TODO --pfe-theme--logo--svg?\n  }\n  &__skip {\n    display: block;\n    @include pfe-sr-only;\n    margin: 0 -2em -1px -1px;\n  }\n  &__main {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    height: 100%;\n    width: 100%;\n    &--menu-label {\n      color: #{pfe-local(Color)};\n    }\n    [show_search] &,\n    [show_login][show_language] & {\n      grid-gap: #{pfe-var(container-spacer)};\n    }\n    ::slotted(*:not([hidden])) {\n      display: block;\n      grid-column: 1 / -1;\n    }\n  }\n  &__utility {\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: stretch;\n    justify-content: flex-end;\n  }\n}\n","@mixin browser-query($browser-list) {\n  @each $browser in $browser-list {\n    /* IE10+ */\n    @if $browser == ie11 {\n      @media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {\n        @content;\n      }\n    }\n\n    /* Microsoft Edge Browser 12+ (All) */\n    @if $browser == edge {\n      @supports (-ms-ime-align:auto) {\n        @content;\n      }\n    }\n  }\n}\n \n// $boxSize = any box-sizing property, default is border-box\n@mixin pfe-box-sizing($boxSize: border-box) {\n  *, *::before, *::after {\n    box-sizing: $boxSize;\n  }\n}\n\n@mixin pfe-clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n\n@mixin pfe-reset-list() {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n@mixin pfe-reset-box() {\n  margin: 0;\n  padding: 0;\n}\n\n@mixin pfe-reset-button() {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n}\n\n@mixin pfe-sr-only() {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0,0,0,0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n@mixin print-variables-map($variables) {\n  @each $property, $value in $variables {\n    $name: \"--#{$property}\";\n    $styles: $value;\n    @if type-of($value) == \"map\" {\n      @each $prop, $v in $value {\n        $name: \"__#{$property}--#{$prop}\";\n        $styles: $v;\n      }\n    }\n\n    --pfe-#{$LOCAL}#{$name}: #{$styles};\n  }\n}\n\n/// ===========================================================================\n/// Theme Color Vars   - use with on=\"dark\" to affect light DOM\n/// ===========================================================================\n\n@mixin pfe-theme($theme) {\n  // GENERAL CONTEXT-BASED UPDATES, ON=\"DARK\"\n  @if $theme == dark {\n    --pfe-broadcasted--color--text:               #{pfe-color(text--on-dark)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(ui-link--on-dark)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(ui-link--on-dark--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(ui-link--on-dark--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(ui-link--on-dark--focus)};\n  }\n  @else if $theme == light {\n    --pfe-broadcasted--color--text:               #{pfe-color(text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(ui-link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(ui-link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(ui-link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(ui-link--focus)};\n  }\n  // MORE SPECIFIC COLOR BASED UPDATES, COLOR=\"DARKER\"\n  @else if $theme == darker {\n    --pfe-broadcasted--color--text:               #{pfe-color(surface--darker--text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darker--link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darker--link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darker--link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darker--link--focus)};\n  }\n  @else if $theme == darkest {\n    --pfe-broadcasted--color--text:               #{pfe-color(surface--darkest--text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--darkest--link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--darkest--link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--darkest--link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--darkest--link--focus)};\n  }\n  @else if $theme == accent {\n    --pfe-broadcasted--color--text:               #{pfe-color(surface--accent--text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--accent--link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--accent--link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--accent--link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--accent--link--focus)};\n  }\n  @else if $theme == complement {\n    --pfe-broadcasted--color--text:               #{pfe-color(surface--complement--text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--complement--link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--complement--link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--complement--link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--complement--link--focus)};\n  }\n\n  @else if $theme == lighter {\n    --pfe-broadcasted--color--text:               #{pfe-color(surface--lighter--text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lighter--link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lighter--link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lighter--link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lighter--link--focus)};\n  }\n  @else if $theme == lightest {\n    --pfe-broadcasted--color--text:               #{pfe-color(surface--lightest--text)};\n    --pfe-broadcasted--color--ui-link:            #{pfe-color(surface--lightest--link)};\n    --pfe-broadcasted--color--ui-link--visited:   #{pfe-color(surface--lightest--link--visited)};\n    --pfe-broadcasted--color--ui-link--hover:     #{pfe-color(surface--lightest--link--hover)};\n    --pfe-broadcasted--color--ui-link--focus:     #{pfe-color(surface--lightest--link--focus)};\n  }\n}\n\n@mixin pfe-transition($properties...) {\n  $return: null;\n  @each $property in $properties {\n    @if length($property) == 1 {\n      $return: append($return, #{$property} 250ms $pfe-global--animation-timing, comma);\n    }\n    @else if length($property) == 2 {\n      $return: append($return, nth($property, 1) nth($property, 2), comma);\n    }\n  }\n  transition: $return;\n}\n\n// Make a CSS arrow\n@mixin pfe-arrow($type, $color, $width: 8px, $height: 5px, $pseudo: false) {\n  $direction: (\n    up: 180deg,\n    down: 0deg,\n    right: -90deg,\n    left: 90deg,\n  );\n  border-style: #{pfe-var(surface--border-style)};\n  border-width: $width $height 0;\n  border-color: transparent;\n  border-top-color: $color;\n  transform: rotate(map-get($direction, $type));\n  @if $pseudo {\n    display: inline-block;\n    content: \"\";\n    @content;\n  }\n}\n\n@mixin pfe-arrow-color($color) {\n  border-top-color: $color;\n}\n\n@mixin pfe-print-media {\n  @media print {\n    @content;\n  }\n}\n\n@mixin pfe-print-background {\n  -webkit-print-color-adjust: exact;\n  color-adjust: exact;\n}\n// scss-lint:disable ImportantRule\n@mixin pfe-no-print-background {\n  @include pfe-print-media {\n    background-color: white !important;\n    background-image: none !important;\n    box-shadow: none !important;\n  }\n}\n// scss-lint:enable ImportantRule\n\n@mixin pfe-pipe( $position: right, $padding: 0, $margin: 0, $color: $border-color) {\n  border: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;\n  border-#{$position}-color: $color;\n  @if $position == right {\n    padding-left: $padding;\n    margin-right: $margin;\n  }\n  @else if $position == left {\n    padding-right: $padding;\n    margin-left: $margin;\n  }\n}\n\n@mixin pfe-retina {\n  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n    @content;\n  }\n}\n\n// Mixin for building slot selectors\n@mixin pfe-slot($slot-name, $selector: \"\") {\n  // This logic makes it much easier to style default slots in a loop\n  // with named slots\n  @if $slot-name != default {\n    ::slotted([slot=\"#{$slot-name}\"]#{$selector}) {\n      @content;\n    }\n  }\n  @else {\n    ::slotted(*) {\n      @content;\n    }\n  }\n}\n\n/// ===========================================================================\n/// Accordion Specific SASS Vars\n/// ===========================================================================\n\n$pfe-expand_button--LineHeight:      1.5;\n$pfe-expand_button--padding:         #{pfe-var(container-spacer)};\n$pfe-expand_button--padding--factor: .75;\n$pfe-expand_button--padding--wide:   calc(#{$pfe-expand_button--padding} * 1.5);\n\n$pfe-expand_chevron--size:           .4em;\n$pfe-expand_chevron--weight:         .1em;\n$pfe-expand_chevron--padding:        3em;\n$pfe-expand_chevron--placement:      #{$pfe-expand_button--LineHeight / 2 - $pfe-expand_chevron--size / 2};\n\n@mixin pfe-accordion-header {\n  display: block;\n  > * {\n    margin: 0;\n  }\n}\n\n@mixin pfe-trigger-button($align: left) {\n    // -webkit-appearance: button;\n    margin: 0;\n    width: 100%;\n    height: auto;\n    font-family: inherit;\n    font-weight: #{pfe-var(font-weight--bold)};\n    text-align: left;\n    cursor: pointer;\n    z-index: 1;\n    position: relative;\n\n    font-size:   calc(#{pfe-var(font-size)} * 1.1);\n    line-height: #{pfe-var(line-height)};\n\n    color:            #{pfe-local(aux)};\n    background-color: #{pfe-local(main)};\n    border-left:      #{pfe-local(BorderLeft)};\n    border-right:     #{pfe-local(BorderRight)};\n    border-bottom:    #{pfe-local(BorderBottom)};\n    border-top: 0;\n\n    &:hover {\n        outline: none;\n        border-left-color: #{pfe-local(BorderLeftColor--focus)};\n        z-index: 2;\n    }\n\n    &:focus {\n        outline: none;\n        z-index: 2;\n        text-decoration: underline;\n    }\n\n    &::-moz-focus-inner {\n        border: 0;\n    }\n\n    @if $align == right {\n        padding: #{$pfe-expand_button--padding} #{$pfe-expand_button--padding--wide} #{$pfe-expand_button--padding} 50px !important;\n    } @else {\n        padding: #{$pfe-expand_button--padding} 50px #{$pfe-expand_button--padding} #{$pfe-expand_button--padding--wide} !important;\n    }\n}\n\n@mixin pfe-trigger-button-last($theme: light) {\n  border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n  border-top: 0;\n  // @TODO Support differences based on theme\n}\n\n@mixin pfe-trigger-button-first($theme: light) {\n  border-top: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n  // @TODO Support differences based on theme\n}\n\n@mixin pfe-trigger-expanded {\n    position: relative;\n    display: block;\n    border-bottom: 0;\n}\n\n@mixin pfe-trigger-color($component-name, $theme: light) {\n  @if $theme == dark {\n    --pfe-#{$component-name}--main:         transparent;\n    --pfe-#{$component-name}--aux:          #{pfe-color(surface--darkest--text)};\n    --pfe-#{$component-name}--BorderLeftColor--focus: #{pfe-color(surface--lightest)};\n  }\n  @else {\n    --pfe-#{$component-name}--main:         transparent;\n    --pfe-#{$component-name}--aux:          #{pfe-color(surface--lightest--text)};\n\n    --pfe-#{$component-name}--BorderLeft:  #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} transparent;\n    --pfe-#{$component-name}--BorderRight: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;\n    --pfe-#{$component-name}--BorderBottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n\n    --pfe-#{$component-name}--BorderLeftColor--focus: #{pfe-color(surface--lightest--link)};\n  }\n}\n\n@mixin pfe-trigger-color-expanded($component-name, $theme: light) {\n  @if $theme == dark {\n    --pfe-#{$component-name}--main:         #{pfe-color(surface--darker)};\n    --pfe-#{$component-name}--aux:          #{pfe-color(surface--darkest--text)};\n    --pfe-#{$component-name}--BorderLeft:   #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n    --pfe-#{$component-name}--BorderRight:  #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n\n    --pfe-#{$component-name}--BorderLeftColor--focus: #{pfe-color(surface--lightest)};\n  }\n  @else {\n    --pfe-#{$component-name}--main:              #{pfe-color(surface--lightest)};\n    --pfe-#{$component-name}--aux:               #{pfe-color(surface--lightest--text)};\n    --pfe-#{$component-name}--focus:             #{pfe-color(surface--lightest--link)};\n    --pfe-#{$component-name}--BorderLeft:        #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} #{pfe-color(surface--lightest--link)};\n    --pfe-#{$component-name}--BorderRight:       #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n  }\n}\n\n/// ===========================================================================\n/// Accordion chevrons\n/// ===========================================================================\n\n@mixin pfe-chevron-expanded($state: true, $position: after) {\n  content: \"\";\n  position: absolute;\n  top: calc((#{pfe-var(container-spacer)} * #{$pfe-expand_button--padding--factor}) + #{$pfe-expand_chevron--placement} );\n  display: block;\n  border-style: #{pfe-var(surface--border-style)};\n  height: #{$pfe-expand_chevron--size};\n  width:  #{$pfe-expand_chevron--size};\n  text-align: center;\n  transition: transform 0.15s;\n  @if $state {\n    border-width: #{$pfe-expand_chevron--weight} #{$pfe-expand_chevron--weight} 0 0;\n    border-bottom: 0;\n    transform: rotate(-45deg);\n    @if $position == before {\n      left: #{$pfe-expand_button--padding--wide};\n    }\n    @else {\n      right: #{$pfe-expand_button--padding--wide};\n    }\n  }\n  @else {\n    border-width: 0 #{$pfe-expand_chevron--weight} #{$pfe-expand_chevron--weight} 0;\n    transform: rotate(45deg);\n    @if $position == before {\n      left: #{$pfe-expand_button--padding--wide};\n    }\n    @else {\n      right: #{$pfe-expand_button--padding--wide};\n    }\n  }\n}\n\n/// ===========================================================================\n/// Accordion panel\n/// ===========================================================================\n\n@mixin pfe-container {\n  position: relative;\n  display: block;\n  width: 100%;\n\n  padding: calc(#{pfe-local(Padding--vertical)} / 2)  #{pfe-local(Padding--horizontal)};\n\n  @media (min-width: #{pfe-breakpoint(sm)}) {\n     padding: #{pfe-local(Padding)};\n  }\n}\n\n@mixin pfe-accordion-panel {\n  display: none;\n  overflow: hidden;\n  will-change: height;\n  border-color: transparent;\n  opacity: 0;\n}\n\n@mixin pfe-accordion-panel-expanded {\n  display: block;\n  position: relative;\n  opacity: 1;\n}\n\n@mixin pfe-accordion-panel-expanded-style($theme: light) {\n  border-right: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} transparent;\n  border-left: #{pfe-var(surface--border-width--heavy)} #{pfe-var(surface--border-style)} transparent;\n  @if $theme == dark {\n    box-shadow: none;\n    background-color: #{pfe-color(surface--darker)};\n    border-left-color: #{pfe-color(surface--border)};\n    border-right-color: #{pfe-color(surface--border)};\n  }\n  @else {\n    box-shadow: 0 5px #{pfe-var(surface--border-width--heavy)} rgba(140, 140, 140, 0.35);\n    border-left-color: #{pfe-color(surface--lightest--link)};\n    background-color: #{pfe-color(surface--lightest)};\n    border-right-color: #{pfe-color(surface--border)};\n    border-bottom: #{pfe-var(surface--border-width)} #{pfe-var(surface--border-style)} #{pfe-color(surface--border)};\n  }\n}\n\n@mixin pfe-accordion-panel-container-inset($align: left)  {\n  box-sizing: border-box;\n  width: 100%;\n\n  @if $align == left {\n    padding: 0 #{$pfe-expand_chevron--padding} #{$pfe-expand_button--padding} #{$pfe-expand_button--padding--wide};\n  }\n  @else {\n    padding: 0 #{$pfe-expand_button--padding--wide} #{$pfe-expand_button--padding} #{$pfe-expand_chevron--padding};\n  }\n}\n\n@mixin pfe-icon($path, $display: flex, $size: 1em) {\n  display: #{$display};\n  @if $path {\n    background: #{$path} no-repeat;\n    background-size: contain;\n    background-position: center;\n  }\n  width: #{$size};\n  height: #{$size};\n  @content;}\n","@function pfe-strip-unit($number) {\n    @if type-of($number) == \"number\" and not unitless($number) {\n      @return $number / ($number * 0 + 1);\n    }\n  \n    @return $number;\n  }\n\n@function pfe-size-pem($pxval, $base: $pfe-global--font-size-root) {\n    @return pfe-strip-unit($pxval) / $base * 1em;\n}\n\n@function pfe-size-prem($pxval, $base: $pfe-global--font-size-root) {\n    @return pfe-strip-unit($pxval) / $base * 1rem;\n}\n\n@function pfe-size-rem2px($remval, $base: $pfe-global--font-size-root) {\n    @return pfe-strip-unit($remval) * ($base / 1px);\n}\n\n/// Map deep get\n/// @author Hugo Giraudel\n/// @access public\n/// @param {Map} $map - Map\n/// @param {Arglist} $keys - Key chain\n/// @return {*} - Desired value\n@function map-deep-get($map, $keys...) {\n    @each $key in $keys {\n        @if type-of($map)==\"map\" {\n            $map: map-get($map, $key);\n        }\n\n        @else {\n            @warn \"Map provided is not a map.\"\n        }\n    }\n\n    @return $map;\n}\n\n// Collect all maps and merge them together\n@function map-collect($maps...) {\n    $collection: ();\n\n    @each $map in $maps {\n        $collection: map-merge($collection, $map);\n    }\n\n    @return $collection;\n}\n\n// New color function to only return theme colors\n@function color($name, $theme: \"light\", $opacity: 1) {\n    $map: map-get($color-map, $name);\n    $error: false;\n    $color: null;\n\n    @if $map !=null {\n        $color: map-get($map, $theme);\n    }\n\n    @else {\n        $error: true;\n    }\n\n    @if type-of($color)==color {\n        @if $opacity==1 {\n            @return $color;\n        }\n\n        @if $opacity < 1 {\n            @return rgba($color, $opacity);\n        }\n    }\n\n    @else {\n        $error: true;\n    }\n\n    @if $error {\n        @warn \"#{$name} is not a valid color\";\n    }\n}\n\n// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/\n// Get the first item in a list\n@function first($list) {\n    @return nth($list, 1);\n}\n\n// Get the last item in a list\n@function last($list) {\n    @return nth($list, length($list));\n}\n\n@function str-replace($string, $search, $replace: \"\") {\n    @if type-of($string)==\"string\"and type-of($search)==\"string\" {\n        $index: str-index($string, $search);\n\n        @if $index {\n            @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n        }\n    }\n\n    @return $string;\n}\n\n@function to-string($list, $glue: '', $is-nested: false) {\n    $result: null;\n\n    @for $i from 1 through length($list) {\n        $e: nth($list, $i);\n\n        @if type-of($e)==list {\n            $result: $result#{to-string($e, $glue, true)};\n        }\n\n        @else {\n            $result: if($i !=length($list) or $is-nested,\n            $result#{$e}#{$glue},\n            $result#{$e});\n        }\n    }\n\n    @return $result;\n}\n\n@function str-split($string, $separator) {\n    // empty array/list\n    $split-arr: ();\n    // first index of separator in string\n    $index: str-index(\"#{$string}\", $separator);\n\n    // loop through string\n    @while $index !=null {\n        // get the substring from the first character to the separator\n        $item: str-slice($string, 1, $index - 1);\n        // push item to array\n        $split-arr: append($split-arr, $item);\n        // remove item and separator from string\n        $string: str-slice($string, $index + 1);\n        // find new index of separator\n        $index: str-index($string, $separator);\n    }\n\n    // add the remaining string to list (the last item) and return\n    @return append($split-arr, $string);\n}\n\n// https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss\n/// Remove all trailing and leading whitespaces from `$string`.\n/// @since 1.2.0\n/// @param {String} $string - string\n/// @return {String}\n\n@function str-trim($string) {\n    $start: 1;\n    $end: str-length($string);\n\n    @for $i from 1 through str-length($string) {\n        $first: str-slice($string, $i, $i);\n        $last: str-slice($string, -$i, -$i);\n\n        @if $first==\" \"and $i+1==$start+1 {\n            $start: $i + 1;\n        }\n\n        @if $last==\" \"and str-length($string) - $i==$end - 1 {\n            $end: str-length($string) - $i;\n        }\n    }\n\n    @return str-slice($string, $start, $end);\n}\n\n// https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss\n/// Check whether `$string` stars with `$needle`.\n/// @param {String} $string - string to check\n/// @param {String} $needle - substring to check\n/// @return {Bool}\n\n@function str-starts-with($string, $needle) {\n    @return str-slice($string, 1, str-length($needle))==$needle;\n}\n\n// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing-values-from-list\n@function remove($list, $value, $recursive: false) {\n    $result: ();\n\n    @for $i from 1 through length($list) {\n        @if type-of(nth($list, $i))==list and $recursive {\n            $result: append($result, remove(nth($list, $i), $value, $recursive));\n        }\n\n        @else if nth($list, $i) !=$value {\n            $result: append($result, nth($list, $i));\n        }\n    }\n\n    @return $result;\n}\n\n\n\n/// Var\n///\n/// Returns CSS Var stack with exposed theme Var and respective SCSS fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $category - Category name to be appended to variables within the map/system\n/// @param {Map} $map - SASS Map of variables\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @use -\n///\n///     1.look up a color: /elements/pfe-sass/variables/_maps.scss\n///         (FYI, maps references: /elements/pfe-sass/variables/_colors.scss)\n///\n///     2. use like this:\n///         ```\n///         .my-element {\n///           padding:     #{pfe-var(  container-spacer  )};\n///           font-size:   #{pfe-var(  font-size  )};\n///         }\n///         ```\n@function pfe-var($cssvar, $category: '', $fallback: null, $map: $pfe-vars) {\n    @if $category !=\"\" {\n        $category: \"#{$category}--\";\n    }\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--#{$category}#{$cssvar}\";\n    // If a fallback is defined, pass that in too\n    @if $fallback != null or map-get($map, $cssvar) != null {\n        @if $fallback == null {\n            $fallback: map-get($map, $cssvar);\n        }\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n\n\n/// Var Fallback\n///\n/// Returns the SCSS fallback value only\n///\n/// @param {String} $size - Variable name to be used and prepended with --pfe-theme\n/// @use -\n/// ```\n/// @media screen and (min-width: pfe-breakpoint(sm)) {\n///    --pfe-band--width: #{pfe-breakpoint(sm) - $box-padding * 2};\n/// }\n/// ```\n@function pfe-breakpoint($size, $max: false) {\n    $bp: map-get($pfe-vars, grid-breakpoint--#{$size});\n    @if $max {\n        $bp: (pfe-strip-unit($bp) - 1) * 1px;\n    }\n    @return $bp;\n}\n\n/// Color\n///\n/// Returns CSS Var stack with exposed theme Var and respective SCSS fallback\n///\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $category - Category name to be appended to variables within the map/system, default is \"color\"\n/// @param {Map} $map - SASS Map of variables\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @use -\n///\n///     1.look up a color: /elements/pfe-sass/variables/_maps.scss\n///         (FYI, maps references: /elements/pfe-sass/variables/_colors.scss)\n///\n///     2. use like this:\n///         ```\n///         .my-element {\n///           color:       #{pfe-color(  surface--base--text  )};\n///           background:  #{pfe-color(  surface--base )};\n///         }\n///         ```\n@function pfe-color($cssvar, $category: 'color', $map: $pfe-colors) {\n    @if $category !=\"\" {\n        $category: \"#{$category}--\";\n    }\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-theme--#{$category}#{$cssvar}\";\n    // If a fallback is defined, pass that in too\n    @if map-get($map, $cssvar) != null {\n        $var-declaration: \"#{$var-declaration}, #{map-get($map, $cssvar)}\";\n    }\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n@function pfe-fallback($cssvar, $category: 'color', $map: $pfe-colors) {\n    @if $category !=\"\" {\n        $category: \"#{$category}--\";\n    }\n    // Return the variable declaration string\n    @return #{map-get($map, $cssvar)};\n}\n\n/// Local\n///\n/// Returns CSS Var for the local component-scoped variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @requires {String} $LOCAL - Name of component, this is defined at the top of the sass file for the component\n/// @use -\n///     ```\n///     :host {\n///         padding-top:      #{pfe-local(paddingTop`)};\n///         padding-bottom:   #{pfe-local(paddingBottom)};\n///     }\n///     ```\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n    // Start building the variable declaration\n    $var-declaration: \"--#{$repo}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    // If a fallback is defined, pass that in too\n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Radio\n///\n/// Returns CSS Var for a broadcasted variable\n///\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {Boolean} $USE-FALLBACK - global default is false; by setting this global var to true, adds fallbacks to broadcasted variables\n/// @requires {String} $repo - Name of repo, which is \"pfe\"\n/// @use -\n///     ```\n///     a:visited {\n///         color:       #{pfe-radio(  color, ui-link, visited  )};\n///     }\n///     ```\n///\n/// @returns - var(--pfe-broadcasted--color--ui-link--visited);\n///\n@function pfe-radio($cssvar...) {\n    $fallback: \"\";\n    $varname: #{to-string($cssvar, '--')};\n    @if $USE-FALLBACK {\n        @if str-starts-with($varname, \"color\") {\n            $cssvar: remove($cssvar, \"color\");\n            $fallback: map-get($pfe-colors, #{to-string($cssvar, '--')});\n        }\n        @else if str-starts-with($varname, \"ui\") {\n            $fallback: map-get($pfe-colors, #{to-string($cssvar, '--')});\n        }\n        @else {\n            $fallback: map-get($pfe-vars, $varname);\n        }\n    }\n\n    @if $fallback != \"\" {\n        @return var(--#{$repo}-broadcasted--#{$varname}, $fallback);\n    }\n    @else {\n        @return var(--#{$repo}-broadcasted--#{$varname});\n    }\n}",":host {\n  --pfe-navigation--Padding--vertical: var(--pfe-theme--container-padding, 16px);\n  --pfe-navigation--Padding--horizontal: var(--pfe-theme--container-padding, 16px);\n  --pfe-navigation--Padding: 0 var(--pfe-navigation--Padding--horizontal);\n  --pfe-navigation--BackgroundColor: var(--pfe-theme--color--surface--darkest, #131313);\n  --pfe-navigation--Color: var(--pfe-theme--color--surface--darkest--text, #fff);\n  --pfe-navigation--BorderTopColor: transparent;\n  --pfe-navigation--BorderColor: transparent;\n  --pfe-navigation--Border: var(--pfe-theme--surface--border-width, 1px) var(--pfe-theme--surface--border-style, solid) var(--pfe-navigation--BorderColor);\n  --pfe-navigation--MaxHeight: 72px;\n  --pfe-navigation--icon: none;\n  --pfe-navigation__overlay--BackgroundColor: var(--pfe-theme--overlay--BackgroundColor, rgba(37, 37, 37, 0.5));\n  --pfe-navigation__trigger--FontWeight: 100;\n  --pfe-navigation__tray--Padding: var(--pfe-theme--container-padding, 16px);\n  display: block;\n  z-index: var(--pfe-theme--zindex--content, 0);\n  width: 100%; }\n  @media print {\n    :host {\n      --pfe-navigation--Padding: calc(var(--pfe-navigation--Padding--vertical) / 2) var(--pfe-navigation--Padding--horizontal); } }\n  @media screen and (min-width: 576px) {\n    :host {\n      --pfe-navigation--Padding--horizontal: calc(var(--pfe-theme--container-padding, 16px) * 2); } }\n  @media screen and (min-width: 992px) {\n    :host {\n      --pfe-navigation--Padding--horizontal: calc(var(--pfe-theme--container-padding, 16px) / 2);\n      --pfe-navigation__tray--Padding: calc(var(--pfe-theme--container-padding, 16px) * 2); } }\n  @media screen and (min-width: 1200px) {\n    :host {\n      --pfe-navigation--Padding--horizontal: var(--pfe-theme--container-padding, 16px); } }\n\n:host(.sticky) {\n  position: sticky;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  z-index: var(--pfe-theme--zindex--navigation, 98); }\n\npfe-icon {\n  --pfe-icon--Color: var(--pfe-navigation--Color); }\n\n::slotted([slot=\"logo\"]) {\n  margin: 0;\n  max-height: var(--pfe-navigation--MaxHeight); }\n\n::slotted([slot=\"mobile-login\"]),\n::slotted([slot=\"mobile-language\"]) {\n  color: var(--pfe-broadcasted--color--ui-link, #06c);\n  text-decoration: var(--pfe-broadcasted--link--text-decoration, underline); }\n\n::slotted([slot=\"mobile-menu--label\"]) {\n  font-family: var(--pfe-theme--font-family, \"Overpass\", Overpass, Helvetica, helvetica, arial, sans-serif);\n  font-size: var(--pfe-navigation--FontSize);\n  font-weight: var(--pfe-navigation--FontWeight);\n  color: var(--pfe-navigation--Color);\n  margin-bottom: 0; }\n\n.pfe-navigation__wrapper {\n  --pfe-broadcasted--color--text: var(--pfe-navigation--Color, var(--pfe-theme--color--surface--darkest--text, #fff));\n  --pfe-broadcasted--color--ui-link: var(--pfe-navigation--Color, var(--pfe-theme--color--surface--darkest--text, #fff));\n  --pfe-broadcasted--color--ui-link--hover: var(--pfe-navigation--Color, var(--pfe-theme--color--surface--darkest--text, #fff));\n  --pfe-broadcasted--color--ui-link--visited: var(--pfe-navigation--Color, var(--pfe-theme--color--surface--darkest--text, #fff));\n  --pfe-broadcasted--color--ui-link--focus: var(--pfe-navigation--Color, var(--pfe-theme--color--surface--darkest--text, #fff));\n  display: flex;\n  position: relative;\n  z-index: var(--pfe-theme--navigation, 98);\n  background-color: var(--pfe-navigation--BackgroundColor);\n  color: var(--pfe-navigation--Color);\n  min-height: var(--pfe-navigation--MaxHeight); }\n\n.pfe-navigation__container {\n  width: 100%;\n  max-width: var(--pfe-navigation--Width);\n  margin: 0 auto;\n  padding: 0 var(--pfe-navigation--Padding--horizontal);\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: space-between; }\n  @media screen and (min-width: 768px) {\n    .pfe-navigation__container {\n      --pfe-navigation--Width: calc(768px); } }\n  @media screen and (min-width: 992px) {\n    .pfe-navigation__container {\n      --pfe-navigation--Width: calc(992px); } }\n  @media screen and (min-width: 1200px) {\n    .pfe-navigation__container {\n      --pfe-navigation--Width: calc(1200px); } }\n  @media (min-width: 992px) {\n    .pfe-navigation__container {\n      padding: 0; } }\n  .pfe-navigation__container > pfe-navigation-item:not([hidden]) {\n    flex-grow: 1;\n    align-items: flex-end; }\n\n.pfe-navigation__overlay {\n  display: block;\n  background-color: var(--pfe-navigation__overlay--BackgroundColor, rgba(37, 37, 37, 0.5));\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: var(--pfe-theme--zindex--overlay, 97); }\n  .pfe-navigation__overlay[hidden] {\n    display: none; }\n\n.pfe-navigation__logo {\n  display: flex;\n  flex-flow: column nowrap;\n  align-items: flex-start;\n  justify-content: center;\n  padding-top: var(--pfe-navigation--Padding--vertical);\n  padding-right: var(--pfe-theme--container-padding, 16px);\n  padding-bottom: var(--pfe-navigation--Padding--vertical); }\n\n.pfe-navigation__skip {\n  display: block;\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n  margin: 0 -2em -1px -1px; }\n\n.pfe-navigation__main {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  height: 100%;\n  width: 100%; }\n  .pfe-navigation__main--menu-label {\n    color: var(--pfe-navigation--Color); }\n  [show_search] .pfe-navigation__main,\n  [show_login][show_language] .pfe-navigation__main {\n    grid-gap: var(--pfe-theme--container-spacer, 16px); }\n  .pfe-navigation__main ::slotted(*:not([hidden])) {\n    display: block;\n    grid-column: 1 / -1; }\n\n.pfe-navigation__utility {\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: stretch;\n  justify-content: flex-end; }\n"]}