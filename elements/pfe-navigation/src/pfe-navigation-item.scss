@import "_shared-assets";

$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  BackgroundColor: transparent,
  BorderColor:     transparent,
  BorderTopColor:  transparent,
  MinWidth:        auto,
  Height:          84px,
  BorderColor--active:     pfe-var(surface--lightest),
  BorderTopColor--active:  pfe-var(ui-accent),
  BackgroundColor--active: pfe-var(surface--lightest),
  Color--active: pfe-var(text),
  trigger-icon: (
    Visible: hidden
  ),
  trigger: (
    FontSize:   pfe-var(FontSize--md),
    FontSize--with-icon: pfe-var(FontSize--xs),
    FontWeight: pfe-var(font-weight--light),
    Padding:    calc(#{pfe-var(container-padding)} * .5),
    MaxWidth:   100%,
  ),
  tray: (
    BackgroundColor:  pfe-var(surface--lightest),
    Color:            pfe-var(text)
  )
));

:host {
  display: flex;
  flex-direction: column;
  line-height: 1.2;

  height: 100%;
  min-width: pfe-local(MinWidth);

  @media screen and (max-width: pfe-breakpoint(xl)) {
    width: 100%;
  }
  @media screen and (min-width: pfe-breakpoint("sm-mobile", $map: false)) {
    --pfe-navigation__trigger--Padding: #{pfe-var(container-padding)};
  }
}

// ---------------------//
// -- STATES
// ---------------------//

// Indicates this is the current section the user is visiting
// :host([aria-current="location"]) {
//   --pfe-navigation--BorderTopColor: #{pfe-var(ui-accent)};
// }

// When the navigation item is expanded
:host(.expanded) {
  --pfe-navigation__trigger-icon--Visible: visible;
  // --pfe-navigation--BorderColor:     #{pfe-var(surface--lightest)};
  // --pfe-navigation--BorderTopColor:  #{pfe-var(ui-accent)};

  // --pfe-navigation--BackgroundColor: #{pfe-var(surface--lightest)};
  // --pfe-navigation--Color: #{pfe-var(text)};
}

// ---------------------//
// -- CONTEXTS
// ---------------------//

// If the navigation item has an icon, i.e. a utility link
:host([pfe-icon]) {
  --pfe-navigation--MinWidth: 50px;
  --pfe-navigation__trigger--Padding: calc(#{pfe-var(container-padding)} * .625);
  --pfe-navigation__trigger-icon--Visible: hidden;
  flex: auto;// 1 0 22%;
  width: auto;
  min-width: 65px;

  // when utilities are shown in the black bar
  @media screen and (min-width: 640px) {
    width: 70px;
  }
  @media screen and (max-height: 500px) {
    --pfe-navigation__trigger--Padding: calc(#{pfe-var(container-padding)} / 3) calc(#{pfe-var(container-padding)} *.5);
  }

  @media screen and (min-width: 1024px) {
    flex: auto;// 1 0 26%;
  }
}

:host(:not([pfe-icon])) {
  --pfe-navigation__trigger--Padding: calc(#{pfe-var(container-padding)} * .75);
}

// Hide the icon if there is no tray
:host(:not([has_tray])),
:host(:not([pfe-icon]):not([is_nested]):not(.expanded)) {
  --pfe-navigation__trigger-icon--Visible: hidden;
}

// Mobile menu experience
:host([is_nested]:not([parent_hidden])) {
  display: flex;
  margin: 0 auto;
  align-items: center;
  max-width: pfe-local(Width, $fallback: 100%);
}

/* ----------------- */
/*  TRIGGER STYLES   */
/* ----------------- */
.pfe-navigation-item__trigger {
  @each $prop in (text-decoration, text-decoration--hover, text-decoration--focus) {
    --pfe-theme--link--#{$prop}: none;
  }

  --pfe-broadcasted--text: #{pfe-local(Color)};
  --pfe-broadcasted--link: #{pfe-local(Color)};
  @each $state in (hover, focus, visited) {
    --pfe-broadcasted--link--#{$state}: #{pfe-local(Color)};

  }
  // --pf-c--title--m-6xl--FontSize
  // Enforce the font-size for the navigation regardless of h-level settings
  @each $level in ("4xl", "3xl", "2xl") {
    --pf-c--title--m-#{$level}--FontSize: #{pfe-local(FontSize, $region: trigger)};
  }
  --pf-c--title--m--font-weight--normal: #{pfe-local(FontWeight, $region: trigger)};

  border-top:         pfe-var(surface--border-width--heavy) pfe-var(surface--border-style) pfe-local(BorderTopColor);
  border-right:       pfe-var(surface--border-width) dashed pfe-local(BorderColor);
  border-bottom:      pfe-var(surface--border-width) dashed pfe-local(BorderColor);
  border-left:        pfe-var(surface--border-width) dashed pfe-local(BorderColor);
  background-color:   pfe-local(BackgroundColor);
  color:              pfe-local(Color);
  padding:            pfe-local(Padding, $region: trigger);
  position:           relative;
  display:            flex;
  flex-grow:          1;
  flex-direction:     column;
  flex-wrap:          nowrap;
  align-items:        center;
  justify-content:    center;
  transition:         all pfe-var(animation-timing);
  outline:            none;
  cursor:             pointer;

  :host(.expanded) & {
    --pfe-navigation--BackgroundColor: #{pfe-local(BackgroundColor--active)};
    --pfe-navigation--Color: #{pfe-local(Color--active)};
  }

  :host(.expanded) &,
  &:focus {
    --pfe-navigation--BorderColor: #{pfe-local(BorderColor--active)};
  }

  :host([aria-current="location"]) &,
  :host(.expanded) &,
  &:hover,
  &:focus {
    --pfe-navigation--BorderTopColor: #{pfe-local(BorderTopColor--active)};
  }

  &:hover {
    --pfe-navigation__trigger-icon--Visible: visible;

    :host([has_tray]:not([pfe-icon]):not([is_nested]):not(.expanded)) & {
      --pfe-navigation__trigger-icon--Visible: visible;
      @include pfe-arrow-color(#{pfe-local(Color)});
    }

    @media screen and (min-width: pfe-breakpoint(xl)) {
      :host([has_tray]:not(.expanded)) & {
        --pfe-navigation__trigger-icon--Visible: visible;
      }
    }
  }

  // After element is the filled-in dropdown caret.
  :host(:not([pfe-icon])) &::after {
    display: block;
    content: " ";
    visibility: pfe-local(Visible, $region: trigger-icon, $fallback: hidden);

    @include pfe-arrow(down, #{pfe-var(feedback--default)}, $width: 6px, $height: 6px);
    position: absolute;
    bottom: calc(#{pfe-var(container-spacer)} / 2) ;
  }

  // At mobile if inside the main context, update the color to a text color
  :host([is_nested]:not([parent_hidden])) & {
    --pfe-navigation--Color: #{pfe-var(text)};

    @each $prop in $BROADCAST-VARS {
      --pfe-broadcasted--#{$prop}: #{pfe-local(Color, $region: tray)};
    }

    $accordion: pfe-accordion-variables;
    @include pfe-print-local($accordion);
    @include pfe-trigger;

    box-sizing: border-box;
    align-items: stretch;
    background-color: transparent;
  }

  :host([is_nested].expanded:not([parent_hidden])) & {
    $accordion: pfe-accordion-variables($state: expanded);
    @include pfe-print-local($accordion);
  }

  :host([is_nested][last]:not(.expanded):not([parent_hidden])) & {
    @include pfe-trigger-last;
  }

  // Chevron styles for the navigation accordion on mobile
  &::after {
    // closed:
    :host([is_nested]:not(.expanded):not([parent_hidden])) & {
      @include pfe-chevron($state: closed, $offset: 0px);
    }
    // open:
    :host([is_nested].expanded:not([parent_hidden])) & {
      @include pfe-chevron($state: open, $offset: 4px);
    }
    :host([is_nested]:not([parent_hidden])) & {
      --pfe-navigation__trigger-icon--Visible: visible;
      border-color: pfe-local(Color);
    }

    :host([is_nested]:not([has_tray]):not([parent_hidden])) & {
      transform: rotate(-45deg);
    }
  }

  pfe-icon {
    --pfe-icon--Color: #{pfe-local(Color)};

    &[icon="web-plus"] {
      transform: rotate(-45deg);
    }
  }
}

// Typography styles need specificity over bootstrap
::slotted([slot="trigger"]) {
  font-family: pfe-var(font-family);
  font-size: pfe-local(FontSize, $region: trigger) !important;
  font-weight: pfe-local(FontWeight, $region: trigger);
  color: pfe-local(Color, $region: trigger);
  z-index: 2;
  line-height: 1.1;
  margin: 0 !important;
  max-width: 100%; // added
  text-align: center;

  @media screen and (min-width: pfe-breakpoint(xs) ) {
      max-width: 100%;
  }
  @media screen and (min-width: pfe-breakpoint(xl) ) {
      max-width: 190px;
  }

  :host([pfe-icon]) & {
    font-size: pfe-local(FontSize--with-icon, $region: trigger) !important;
    margin: 0.25em 0 0 0 !important;
    max-width: 100px;
  }
}

// Override bootstrap styles
::slotted(*) {
  font-size: inherit !important;
  font-weight: pfe-local(FontWeight, $region: trigger) !important;
}

/* ----------------- */
/*    TRAY STYLES    */
/* ----------------- */
.pfe-navigation-item__tray {
  @include pfe-set-broadcast-context(light);

  transition: all pfe-var(animation-timing);
  box-sizing: border-box;

  display: none;
  visibility: hidden;

  &[aria-expanded="true"] {
    display: block;
    visibility: visible;
  }

  :host([show_links]:not([parent_hidden])) & {
    flex-grow: 1;
    display: flex;
    visibility: visible;
    width: 100%;
    padding-right: 40px; // ensure gap between main menu links and utility links
  }

  :host([pfe-icon="web-mobile-menu"]:not([show_links])) &,
  :host(:not([pfe-icon="web-mobile-menu"]):not([is_nested])) &,
  :host([is_nested][parent_hidden]) & {
    position: absolute;
    top: 100%;
    left: 0;

    background-color: pfe-local(BackgroundColor, $region: tray);
    color:            pfe-local(Color, $region: tray);
    //mobile tray padding
    padding: pfe-local(Padding, $region: tray);
    width: 100%;
    max-height: calc(100vh - #{pfe-local(Height)});
    overflow-x: hidden;
    overflow-y: scroll;
    padding-right: 9px; // OFFSET SCROLLBAR HACK
  }

  //  Styles for the nested elements
  :host([is_nested]:not([parent_hidden])) & {
    @include pfe-collapsible($state: closed);
    @include pfe-accordion-props;
    @include pfe-box-sizing;
    @include pfe-panel-container;
     //mobile tray padding
    padding: calc(#{pfe-local(Padding--vertical)} / 2)  calc(#{pfe-local(Padding--horizontal)} * 1.75);
  }

  :host([is_nested].expanded:not([parent_hidden])) & {
    $accordion: pfe-accordion-variables($state: expanded);
    @include pfe-print-local($accordion);
    @include pfe-panel-variables;
    @include pfe-collapsible($state: open);
  }
}

::slotted([slot="tray"]) {
  display: flex;
  justify-content: center;
}

// Let the main item or the tray be hidden with the attribute
:host([hidden]:not([show_tray])),
:host([show_links]) > .pfe-navigation-item__trigger,
:host([hidden]) .pfe-navigation-item__trigger,
:host([hidden]) .pfe-navigation-item__tray,
:host(:not(.expanded):not([show_links])) .pfe-navigation-item__tray {
  display: none;
  visibility: hidden;
}

:host([show_tray]),
:host([show_links]) ::slotted([slot="tray"][hidden]) {
  display: flex;
  visibility: visible;
  flex-grow: 1;
}

// Left-align text in accordions on mobile.
:host([is_nested]) ::slotted([slot="trigger"]) {
  text-align: left;
}

:host([is_nested]) [slot="trigger"] > a {
  color: pfe-var(text) !important;
}

:host([pfe-icon=web-mobile-menu]) {
  align-items: flex-end;
  flex: 0 1 99%;//0 1 60%;
}

:host([is_nested][parent_hidden][pfe-full-width]) {
  .pfe-navigation-item__tray {
    padding: pfe-local(Padding, $region: tray) 0 pfe-local(Padding, $region: tray);
  }
}

// @TODO set up tray opening animation?
// :host(.animating) {
//   transition: transform 0.3s #{pfe-var(animation-timing)};
// }

// The wind variant is used to render an icon with text inline, direct links
:host([variant="wind"]) {
  --pfe-navigation--Color:         #{pfe-var(link)};
  --pfe-navigation--Color--active: #{pfe-var(link--hover)};
  --pfe-broadcasted--link:         #{pfe-var(link)};
  --pfe-broadcasted--link--hover:  #{pfe-var(link--hover)};
  --pfe-broadcasted--link--focus:  #{pfe-var(link--focus)};

  // The wind variant is used to render an icon with text inline, direct links
  .pfe-navigation-item__trigger {
    flex-direction: row;
    align-items: stretch;
    justify-content: flex-start;

    border: none !important;
    border-top: none !important;
    padding: pfe-local(Padding, $region: trigger, $fallback: calc(#{pfe-var(container-padding)} / 2) 0 calc(#{pfe-var(container-padding)} / 2) calc(#{pfe-var(container-spacer)} * 1.5));
    background-color: transparent;
  }
   
  pfe-icon {
    margin-bottom: 0;
    margin-right: calc(#{pfe-var(container-spacer)} / 2);
  }
}
