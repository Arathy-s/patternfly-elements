// Please see the pfe-sass README for guidance on using these tools
@import "../../pfe-sass/pfe-sass";

// @TODO add disabled states?

$LOCAL: chip;

$variables: (
  PaddingTop:      0,
  PaddingRight:    0,
  PaddingBottom:   0,
  PaddingLeft:     pfe-var(spacer--sm), // 8px --pf-global--spacer--sm

  BackgroundColor: pfe-color(surface--lightest),        // #fff --pf-global--Color--light-100
  BorderColor:     pfe-color(surface--border--darkest),  // #737679 --pf-global--secondary-color--100
  BorderWidth:     pfe-var(ui--border-width),           // 1px --pf-global--BorderWidth--sm
  BorderRadius:    pfe-var(ui--border-radius),          // 3px --pf-global--BorderRadius--sm

  BackgroundColor--overflow: pfe-color(surface--lighter), // #ededed --pf-global--BackgroundColor--300
  PaddingLeft--overflow:     0,
  BorderWidth--overflow:     0,

  PaddingTop--readonly:     pfe-var(form-spacer), // 6px --pf-global--spacer--form-element
  PaddingRight--readonly:   pfe-var(spacer--sm),  // 8px --pf-global--spacer--sm
  PaddingBottom--readonly:  pfe-var(form-spacer), // 6px --pf-global--spacer--form-element
  
  text: (
    FontSize: pfe-var(font-size--xs),   // 12px --pf-global--FontSize--xs
    LineHeight: pfe-var(line-height),
    Color:    pfe-broadcasted(text),    // #151515 --pf-global--Color--100 aka --pf-global--Color--dark-100
    MaxWidth: 7.5rem
  ),

  button : (
    PaddingTop:     pfe-var(form-spacer),
    PaddingRight:   pfe-var(spacer--sm),    // 8px --pf-global--spacer--sm
    PaddingBottom:  pfe-var(form-spacer),
    PaddingLeft:    pfe-var(spacer--sm),    // 8px --pf-global--spacer--sm
    
    size:           pfe-var(font-size--xs), // 12px --pf-global--FontSize--xs

    BackgroundColor:           $pfelements--gray, // pfe-color(ui-complement),
    BackgroundColor--hover:    pfe-color(ui-complement--hover),
    BackgroundColor--focus:    pfe-color(ui-complement--hover),
    BackgroundColor--active:   pfe-color(ui-complement--hover),
    BackgroundColor--disabled: pfe-color(ui-disabled),
    
    BorderWidth:  0,
    BorderColor:  pfe-color(surface--border--darkest), // #737679 --pf-global--secondary-color--100
    BorderRadius: pfe-var(ui--border-radius), // 3px --pf-global--BorderRadius--sm

    BorderWidth--overflow--hover:   pfe-var(ui--border-width), // 1px --pf-global--BorderWidth--sm
    BorderWidth--overflow--active:  pfe-var(ui--border-width), // 1px --pf-global--BorderWidth--sm
    BorderWidth--overflow--focus:   pfe-var(ui--border-width), // 1px --pf-global--BorderWidth--sm
  ),

  badge: (
    MarginLeft: pfe-var(spacer--xs) // 4px --pf-global--spacer--xs
  )
);

:host {
  @include pfe-print-variables($variables);

  display: inline-flex;
  position: relative;
  align-items: center;
  min-width: fit-content;

  color: pfe-broadcasted(text); // #151515 --pf-global--Color--100 aka --pf-global--Color--dark-100
  padding: pfe-local(PaddingTop) pfe-local(PaddingRight) pfe-local(PaddingBottom) pfe-local(PaddingLeft);
  list-style: none;
  background-color: pfe-local(BackgroundColor);
  border-radius: pfe-local(BorderRadius);

  &::before {
    @extend %pseudo-alignment;

    border: pfe-local(BorderWidth) solid pfe-local(BorderColor);
    border-radius: pfe-local(BorderRadius);
  }
}

:host([hidden]) {
  display: none;
}

:host([on="dark"]),
:host([on="saturated"]) {
  --pfe-chip--BorderWidth: 0;
}

//-- Custom styles applied to slot's shadow element
.pfe-chip {
  &__text {
    // @include pf-text-overflow;
    overflow:       hidden;
    text-overflow:  ellipsis;
    white-space:    nowrap;
  
    max-width: pfe-local($cssvar: MaxWidth, $region: text);
    font-size: pfe-local($cssvar: FontSize, $region: text);
    line-height: pfe-local($cssvar: LineHeight, $region: text);
    color:     pfe-local($cssvar: Color, $region: text);    
  }
  &__badge {
    margin-left: pfe-local($cssvar: MarginLeft, $region: badge);
  }
  &__button,
  &__close {
    @extend %reset-button;

    position: relative;
    display:  inline-block;
    text-align:  center;
    white-space: nowrap;
    user-select: none;

    padding: pfe-local($cssvar: PaddingTop, $region: button) pfe-local($cssvar: PaddingRight, $region: button) pfe-local($cssvar: PaddingBottom, $region: button) pfe-local($cssvar: PaddingLeft, $region: button);

    &::after {
      @extend %pseudo-alignment;

      border: pfe-local($cssvar: BorderWidth, $region: button) pfe-var(ui--border-style) pfe-local($cssvar: BorderColor, $region: button);
      border-radius: pfe-local($cssvar: BorderRadius, $region: button);
    }

    // Close icon
    svg {
      display: inline-block;
      height: calc(#{pfe-local($cssvar: size, $region: button)} * 1.5);
      width: pfe-local($cssvar: size, $region: button);
      line-height: 1;
      vertical-align: -.125em;
      fill: pfe-local($cssvar: BackgroundColor, $region: button);
    }

    &:hover {
      cursor: pointer;
    }

    @each $state in (hover, active, focus) {
      &:#{$state} {
        --pfe-chip__button--BorderWidth: #{pfe-local($cssvar: BorderWidth--#{$state}, $region: button)};
        --pfe-chip__button--BackgroundColor: #{pfe-local($cssvar: BackgroundColor--#{$state}, $region: button)};
        
        // @TODO need a way to show state on dark contexts
        :host([on="dark"]) &::after {
          margin: 1px;
        }
      }
    }
  }
}

:host([pfe-read-only]) {
  --pfe-chip--PaddingTop:     #{pfe-local(PaddingTop--readonly)};
  --pfe-chip--PaddingRight:   #{pfe-local(PaddingRight--readonly)};
  --pfe-chip--PaddingBottom:  #{pfe-local(PaddingBottom--readonly)};
}

:host([pfe-overflow]) {
  --pfe-chip--PaddingLeft:     #{pfe-local(PaddingLeft--overflow)};
  --pfe-chip--BackgroundColor: #{pfe-local(BackgroundColor--overflow)};
  --pfe-chip--BorderWidth:     #{pfe-local(BorderWidth--overflow)};
  
  @each $state in (hover, active, focus) {
    --pfe-chip__button--BorderWidth--#{$state}: #{pfe-local($cssvar: BorderWidth--overflow--#{$state}, $region: button)};
  }
}
