// Please see the pfe-sass README for guidance on using these tools
@import "../../pfe-sass/pfe-sass";

// @TODO add disabled states?

$LOCAL: chip;

$variables: (
  PaddingTop:      0,
  PaddingRight:    0,
  PaddingBottom:   0,
  PaddingLeft:     pfe-var(content-spacer--body--sm), // 8px

  BackgroundColor: pfe-var(surface--lightest),        // #fff --pf-global--Color--light-100
  BorderColor:     pfe-var(surface--border--darkest), // #737679 --pf-global--secondary-color--100
  BorderWidth:     pfe-var(ui--border-width),         // 1px --pf-global--BorderWidth--sm
  BorderRadius:    pfe-var(ui--border-radius),        // 3px --pf-global--BorderRadius--sm
  
  text: (
    FontSize: pfe-var(FontSize--xs),   // 12px --pf-global--FontSize--xs
    LineHeight: pfe-var(line-height),
    Color:    pfe-broadcasted(text),   // #151515 --pf-global--Color--100 aka --pf-global--Color--dark-100
    MaxWidth: 7.5rem
  ),

  button : (
    PaddingTop:     pfe-var(form-spacer),
    PaddingRight:   pfe-var(content-spacer--body--sm),    // 8px
    PaddingBottom:  pfe-var(form-spacer),
    PaddingLeft:    pfe-var(content-spacer--body--sm),    // 8px
    
    size:           pfe-var(FontSize--xs), // 12px --pf-global--FontSize--xs

    BackgroundColor:           pfe-var(feedback--default--lightest), // pfe-color(ui-complement),
    BackgroundColor--hover:    pfe-var(ui-accent--hover),
    BackgroundColor--focus:    pfe-var(ui-accent--hover),
    BackgroundColor--active:   pfe-var(ui-accent--hover),
    BackgroundColor--disabled: pfe-var(ui-disabled),
    
    BorderWidth:  0,
    BorderColor:  pfe-var(surface--border--darkest), // #737679 --pf-global--secondary-color--100
    BorderRadius: pfe-var(ui--border-radius), // 3px --pf-global--BorderRadius--sm
  ),

  badge: (
    MarginLeft: var(--pf-global--spacer--xs, #{$pf-global--spacer--xs}) // 4px --pf-global--spacer--xs
  )
);

:host {
  display: inline-flex;
  position: relative;
  align-items: center;
  min-width: fit-content;

  color: pfe-broadcasted(text); // #151515 --pf-global--Color--100 aka --pf-global--Color--dark-100
  padding: pfe-local(Padding, $fallback: pfe-local(PaddingTop) pfe-local(PaddingRight) pfe-local(PaddingBottom) pfe-local(PaddingLeft));
  list-style: none;
  background-color: pfe-local(BackgroundColor);
  border-radius: pfe-local(BorderRadius);

  &::before {
    // @extend %pseudo-alignment;

    border: pfe-local(BorderWidth) pfe-var(ui--border-style) pfe-local(BorderColor);
    border-radius: pfe-local(BorderRadius);
  }
}

:host([hidden]) {
  display: none;
}

:host([on="dark"])::before,
:host([on="saturated"])::before {
  border-width: pfe-local(BorderWidth, $fallback: 0);
}

//-- Custom styles applied to slot's shadow element
.pfe-chip {
  &__text {
    // @include pf-text-overflow;
    overflow:       hidden;
    text-overflow:  ellipsis;
    white-space:    nowrap;
  
    max-width: pfe-local(MaxWidth, $region: text);
    font-size: pfe-local(FontSize, $region: text);
    line-height: pfe-local(LineHeight, $region: text);
    color:     pfe-local(Color, $region: text);    
  }
  &__badge {
    margin-left: pfe-local(MarginLeft, $region: badge);
  }
  &__button,
  &__close {
    @extend %reset-button;

    position: relative;
    display:  inline-block;
    text-align:  center;
    white-space: nowrap;
    user-select: none;

    padding: pfe-local(Padding, $region: button, $fallback: pfe-local(PaddingTop, $region: button) pfe-local(PaddingRight, $region: button) pfe-local(PaddingBottom, $region: button) pfe-local(PaddingLeft, $region: button));

    &::after {
      // @extend %pseudo-alignment;

      border: pfe-local(BorderWidth, $region: button) pfe-var(ui--border-style) pfe-local(BorderColor, $region: button);
      border-radius: pfe-local(BorderRadius, $region: button);
    }

    // Close icon
    svg {
      display: inline-block;
      height: calc(#{pfe-local(size, $region: button)} * 1.5);
      width: pfe-local(size, $region: button);
      line-height: 1;
      vertical-align: -.125em;
      fill: pfe-local(BackgroundColor, $region: button);
    }

    &:hover {
      cursor: pointer;
    }

    @each $state in (hover, active, focus) {
      &:#{$state} {
        &::after {
          border-width: pfe-local(BorderWidth--#{$state}, $region: button);
        }

        svg {
          fill: pfe-local(BackgroundColor--#{$state}, $region: button);
        }
        
        // @TODO need a way to show state on dark contexts
        :host([on="dark"]) &::after {
          margin: 1px;
        }
      }
    }
  }
}

:host([read-only]) {
  // form-spacer == 6px --pf-global--spacer--form-element
  // content-spacer--body--sm == 8px
  padding: pfe-local(Padding, $fallback:
    pfe-local(PaddingTop, $fallback: pfe-var(form-spacer))
    pfe-local(PaddingRight, $fallback: pfe-var(content-spacer--body--sm))
    pfe-local(PaddingBottom, $fallback: pfe-var(form-spacer))
    pfe-local(PaddingLeft));
}

:host([overflow]) {
  padding-left: pfe-local(PaddingLeft, $fallback: 0);
  background-color: pfe-local(BackgroundColor, $fallback: pfe-color(surface--lighter)); // #ededed --pf-global--BackgroundColor--300

  &::before {
    border-width: pfe-local(BorderWidth, $fallback: 0);
  }
  
  @each $state in (hover, active, focus) {
    .pfe-chip__button:#{$state},
    .pfe-chip__close:#{$state} {
      border-width: pfe-local(BorderWidth--#{$state}, $region: button, $fallback: pfe-var(ui--border-width)); // 1px --pf-global--BorderWidth--sm
    }
  }
}
