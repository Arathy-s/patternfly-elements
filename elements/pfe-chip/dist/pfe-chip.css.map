{"version":3,"sources":["pfe-chip.scss","../../pfe-sass/extends/_extends.scss","pfe-chip.css","../../pfe-sass/functions/_custom-properties.scss"],"names":[],"mappings":"AA2FG;EC1ED,6BAA6B;EAC7B,YAAY;EACZ,SAAS;EACT,UAAU;EACV,gBAAgB;ACflB;;AF4CA;EACE,2BAAoB;EAApB,4BAAoB;EAApB,2BAAoB;EAApB,oBAAoB;EACpB,kBAAkB;EAClB,yBAAmB;EAAnB,2BAAmB;MAAnB,sBAAmB;UAAnB,mBAAmB;EACnB,8BAAsB;EAAtB,2BAAsB;EAAtB,sBAAsB;EAEtB,cGuBkC;EHvBlC,qEGuBkC;EHtBlC,qBGsBkC;EHtBlC,qNGsBkC;EHrBlC,gBAAgB;EAChB,sBGoBkC;EHpBlC,oGGoBkC;EHnBlC,kBGmBkC;EHnBlC,sFGmBkC;EHjBlC,yBGiBkC;EHjBlC,uMGiBkC;EHhBlC,kBGgBkC;EHhBlC,sFGgBkC;AD3DpC;;AF8CA;EACE,aAAa;AE3Cf;;AF8CA;;EAEE,eGOkC;EHPlC,6CGOkC;ADlDpC;;AFgDE;EAEE,gBAAsB;EACtB,uBAAwB;EACxB,mBAAsB;EAEtB,iBGJgC;EHIhC,kDGJgC;EHKhC,kBGLgC;EHKhC,mFGLgC;EHMhC,gBGNgC;EHMhC,kFGNgC;EHOhC,cGPgC;EHOhC,2EGPgC;ADxCpC;;AFiDE;EACE,oBGVgC;EHUhC,sFGVgC;ADpCpC;;AFgDE;EAIE,kBAAkB;EAClB,qBAAsB;EACtB,kBAAmB;EACnB,mBAAmB;EACnB,yBAAiB;KAAjB,sBAAiB;MAAjB,qBAAiB;UAAjB,iBAAiB;EAEjB,4CGtBgC;EHsBhC,8XGtBgC;AD3BpC;;AFuCG;EAeG,uBG3B8B;EH2B9B,0LG3B8B;EH4B9B,kBG5B8B;EH4B9B,8FG5B8B;ADtBpC;;AFkCG;EAqBG,8DAAkB;EAClB,qBAAqB;EACrB,2BAAuD;EAAvD,0FAAuD;EACvD,cGpC8B;EHoC9B,6EGpC8B;EHqC9B,cAAc;EACd,uBAAuB;AEnD7B;;AFyBG;EA8BG,eAAe;AEnDrB;;AFqBG;EAoCO,yDGhD0B;ADLpC;;AFiBG;EAwCO,aGpD0B;EHoD1B,yGGpD0B;ADDpC;;AFyDQ;EACE,WAAW;AEtDrB;;AFSG;EAoCO,0DGhD0B;ADOpC;;AFKG;EAwCO,aGpD0B;EHoD1B,0GGpD0B;ADWpC;;AF6CQ;EACE,WAAW;AE1CrB;;AFHG;EAoCO,yDGhD0B;ADmBpC;;AFPG;EAwCO,aGpD0B;EHoD1B,yGGpD0B;ADuBpC;;AFiCQ;EACE,WAAW;AE9BrB;;AFqCA;EAGE,4CGnEkC;EHmElC,sVGnEkC;AD+BpC;;AF2CA;EACE,eG3EkC;EH2ElC,6CG3EkC;EH4ElC,eG5EkC;EH4ElC,6CG5EkC;EH6ElC,WG7EkC;EH6ElC,kEG7EkC;ADqCpC;;AFqCA;;EAQM,iBGlF8B;EHkF9B,kGGlF8B;EHmF9B,cGnF8B;EHmF9B,4EGnF8B;AD2CpC;;AF+BA;;EAQM,iBGlF8B;EHkF9B,mGGlF8B;EHmF9B,cGnF8B;EHmF9B,4EGnF8B;ADiDpC;;AFyBA;;EAQM,iBGlF8B;EHkF9B,kGGlF8B;EHmF9B,cGnF8B;EHmF9B,4EGnF8B;ADuDpC","file":"pfe-chip.css","sourcesContent":["// Please see the pfe-sass README for guidance on using these tools\n@import \"../../pfe-sass/pfe-sass\";\n\n// @TODO add disabled states?\n\n$LOCAL: chip;\n\n$LOCAL-VARIABLES: (\n  PaddingTop:      0,\n  PaddingRight:    0,\n  PaddingBottom:   0,\n  PaddingLeft:     pfe-var(content-spacer--body--sm), // 8px\n\n  BackgroundColor: pfe-var(surface--lightest),        // #fff --pf-global--Color--light-100\n  Color:           pfe-var(text),                     // #151515 --pf-global--Color--100 aka --pf-global--Color--dark-100\n  BorderColor:     pfe-var(surface--border),\n  BorderWidth:     pfe-var(ui--border-width),         // 1px --pf-global--BorderWidth--sm\n  BorderRadius:    pfe-var(ui--border-radius),        // 3px --pf-global--BorderRadius--sm\n  \n  text: (\n    FontSize: pfe-var(FontSize--xs),   // 12px --pf-global--FontSize--xs\n    LineHeight: pfe-var(line-height),\n    Color:    pfe-var(text),   // #151515 --pf-global--Color--100 aka --pf-global--Color--dark-100\n    MaxWidth: 7.5rem\n  ),\n\n  button : (\n    PaddingTop:     pfe-var(form-spacer),\n    PaddingRight:   pfe-var(content-spacer--body--sm),    // 8px\n    PaddingBottom:  pfe-var(form-spacer),\n    PaddingLeft:    pfe-var(content-spacer--body--sm),    // 8px\n    \n    size:           pfe-var(FontSize--xs), // 12px --pf-global--FontSize--xs\n\n    BackgroundColor:           pfe-var(feedback--default--lightest), // pfe-color(ui-complement),\n    BackgroundColor--hover:    pfe-var(ui-accent--hover),\n    BackgroundColor--focus:    pfe-var(ui-accent--hover),\n    BackgroundColor--active:   pfe-var(ui-accent--hover),\n    BackgroundColor--disabled: pfe-var(ui-disabled),\n    \n    BorderWidth:  0,\n    BorderColor:  pfe-var(surface--border--darkest), // #737679 --pf-global--secondary-color--100\n    BorderRadius: pfe-var(ui--border-radius), // 3px --pf-global--BorderRadius--sm\n  ),\n\n  badge: (\n    MarginLeft: var(--pf-global--spacer--xs, #{$pf-global--spacer--xs}) // 4px --pf-global--spacer--xs\n  )\n);\n\n:host {\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  min-width: fit-content;\n\n  color: pfe-local(Color);\n  padding: pfe-local(Padding, $fallback: pfe-local(PaddingTop) pfe-local(PaddingRight) pfe-local(PaddingBottom) pfe-local(PaddingLeft));\n  list-style: none;\n  background-color: pfe-local(BackgroundColor);\n  border-radius: pfe-local(BorderRadius);\n\n  border: pfe-local(BorderWidth) pfe-var(ui--border-style) pfe-local(BorderColor);\n  border-radius: pfe-local(BorderRadius);\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([on=\"dark\"]),\n:host([on=\"saturated\"]) {\n  border-width: pfe-local(BorderWidth, $fallback: 0);\n}\n\n//-- Custom styles applied to slot's shadow element\n.pfe-chip {\n  &__text {\n    // @include pf-text-overflow;\n    overflow:       hidden;\n    text-overflow:  ellipsis;\n    white-space:    nowrap;\n  \n    max-width: pfe-local(MaxWidth, $region: text);\n    font-size: pfe-local(FontSize, $region: text);\n    line-height: pfe-local(LineHeight, $region: text);\n    color:     pfe-local(Color, $region: text);    \n  }\n  &__badge {\n    margin-left: pfe-local(MarginLeft, $region: badge);\n  }\n  &__button,\n  &__close {\n    @extend %reset-button;\n\n    position: relative;\n    display:  inline-block;\n    text-align:  center;\n    white-space: nowrap;\n    user-select: none;\n\n    padding: pfe-local(Padding, $region: button, $fallback: pfe-local(PaddingTop, $region: button) pfe-local(PaddingRight, $region: button) pfe-local(PaddingBottom, $region: button) pfe-local(PaddingLeft, $region: button));\n\n    &::after {\n      // @extend %pseudo-alignment;\n\n      border: pfe-local(BorderWidth, $region: button) pfe-var(ui--border-style) pfe-local(BorderColor, $region: button);\n      border-radius: pfe-local(BorderRadius, $region: button);\n    }\n\n    // Close icon\n    pfe-icon {\n      --pfe-icon--color: pfe-local(BackgroundColor, $region: button);\n      display: inline-block;\n      height: calc(#{pfe-local(size, $region: button)} * 1.5);\n      width: pfe-local(size, $region: button);\n      line-height: 1;\n      vertical-align: -.125em;\n    }\n\n    &:hover {\n      cursor: pointer;\n    }\n\n    @each $state in (hover, active, focus) {\n      &:#{$state} {\n        &::after {\n          border-width: pfe-local(BorderWidth--#{$state}, $region: button);\n        }\n\n        pfe-icon {\n          fill: pfe-local(BackgroundColor--#{$state}, $region: button);\n        }\n        \n        // @TODO need a way to show state on dark contexts\n        :host([on=\"dark\"]) &::after {\n          margin: 1px;\n        }\n      }\n    }\n  }\n}\n\n:host([read-only]) {\n  // form-spacer == 6px --pf-global--spacer--form-element\n  // content-spacer--body--sm == 8px\n  padding: pfe-local(Padding, $fallback:\n    pfe-local(PaddingTop, $fallback: pfe-var(form-spacer))\n    pfe-local(PaddingRight, $fallback: pfe-var(content-spacer--body--sm))\n    pfe-local(PaddingBottom, $fallback: pfe-var(form-spacer))\n    pfe-local(PaddingLeft));\n}\n\n:host([overflow]) {\n  padding-left: pfe-local(PaddingLeft, $fallback: 0);\n  border-width: pfe-local(BorderWidth, $fallback: 0);\n  color: pfe-local(Color, $fallback: pfe-var(link));\n  \n  @each $state in (hover, active, focus) {\n    .pfe-chip__button:#{$state},\n    .pfe-chip__close:#{$state} {\n      border-width: pfe-local(BorderWidth--#{$state}, $region: button, $fallback: pfe-var(ui--border-width)); // 1px --pf-global--BorderWidth--sm\n      color: pfe-local(Color, $fallback: pfe-var(link--hover));\n    }\n  }\n}\n","// @todo Change to mixins; no efficiency gain with placeholders in web components\n\n/// Clear box element styles\n%reset-box {\n  margin: 0;\n  padding: 0;\n}\n\n/// Clear list styles\n%reset-list {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n/// Clear button styles\n%reset-button {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n/// Set up a container element\n%container {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: pfe-var(container-spacer);\n}\n\n/// Screen-reader only content\n%sr-only {\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n}\n\n/// Fallback surface styles for IE11 only\n%fallback-surface {\n  @include browser-query(ie11) {\n    background-color: pfe-fetch(surface--lightest) !important;\n    color: pfe-fetch(text) !important;\n  }\n}\n\n/// Fallback text styles for IE11 only\n%fallback-text {\n  @include browser-query(ie11) {\n    color: pfe-fetch(text) !important;\n  }\n}\n",".pfe-chip__button, .pfe-chip__close {\n  background-color: transparent;\n  border: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n}\n\n:host {\n  display: inline-flex;\n  position: relative;\n  align-items: center;\n  min-width: fit-content;\n  color: var(--pfe-chip--Color, var(--pfe-theme--color--text, #151515));\n  padding: var(--pfe-chip--Padding, var(--pfe-chip--PaddingTop, 0) var(--pfe-chip--PaddingRight, 0) var(--pfe-chip--PaddingBottom, 0) var(--pfe-chip--PaddingLeft, var(--pfe-theme--content-spacer--body--sm, 0.5rem)));\n  list-style: none;\n  background-color: var(--pfe-chip--BackgroundColor, var(--pfe-theme--color--surface--lightest, #fff));\n  border-radius: var(--pfe-chip--BorderRadius, var(--pfe-theme--ui--border-radius, 2px));\n  border: var(--pfe-chip--BorderWidth, var(--pfe-theme--ui--border-width, 1px)) var(--pfe-theme--ui--border-style, solid) var(--pfe-chip--BorderColor, var(--pfe-theme--color--surface--border, #d2d2d2));\n  border-radius: var(--pfe-chip--BorderRadius, var(--pfe-theme--ui--border-radius, 2px));\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([on=\"dark\"]),\n:host([on=\"saturated\"]) {\n  border-width: var(--pfe-chip--BorderWidth, 0);\n}\n\n.pfe-chip__text {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: var(--pfe-chip__text--MaxWidth, 7.5rem);\n  font-size: var(--pfe-chip__text--FontSize, var(--pf-global--FontSize--xs, 0.75rem));\n  line-height: var(--pfe-chip__text--LineHeight, var(--pfe-theme--line-height, 1.5));\n  color: var(--pfe-chip__text--Color, var(--pfe-theme--color--text, #151515));\n}\n\n.pfe-chip__badge {\n  margin-left: var(--pfe-chip__badge--MarginLeft, var(--pf-global--spacer--xs, 0.25rem));\n}\n\n.pfe-chip__button, .pfe-chip__close {\n  position: relative;\n  display: inline-block;\n  text-align: center;\n  white-space: nowrap;\n  user-select: none;\n  padding: var(--pfe-chip__button--Padding, var(--pfe-chip__button--PaddingTop, var(--pfe-theme--form-spacer, 0.02344rem)) var(--pfe-chip__button--PaddingRight, var(--pfe-theme--content-spacer--body--sm, 0.5rem)) var(--pfe-chip__button--PaddingBottom, var(--pfe-theme--form-spacer, 0.02344rem)) var(--pfe-chip__button--PaddingLeft, var(--pfe-theme--content-spacer--body--sm, 0.5rem)));\n}\n\n.pfe-chip__button::after, .pfe-chip__close::after {\n  border: var(--pfe-chip__button--BorderWidth, 0) var(--pfe-theme--ui--border-style, solid) var(--pfe-chip__button--BorderColor, var(--pfe-theme--color--surface--border--darkest, #3c3f42));\n  border-radius: var(--pfe-chip__button--BorderRadius, var(--pfe-theme--ui--border-radius, 2px));\n}\n\n.pfe-chip__button pfe-icon, .pfe-chip__close pfe-icon {\n  --pfe-icon--color: pfe-local(BackgroundColor, $region: button);\n  display: inline-block;\n  height: calc(var(--pfe-chip__button--size, var(--pf-global--FontSize--xs, 0.75rem)) * 1.5);\n  width: var(--pfe-chip__button--size, var(--pf-global--FontSize--xs, 0.75rem));\n  line-height: 1;\n  vertical-align: -.125em;\n}\n\n.pfe-chip__button:hover, .pfe-chip__close:hover {\n  cursor: pointer;\n}\n\n.pfe-chip__button:hover::after, .pfe-chip__close:hover::after {\n  border-width: var(--pfe-chip__button--BorderWidth--hover);\n}\n\n.pfe-chip__button:hover pfe-icon, .pfe-chip__close:hover pfe-icon {\n  fill: var(--pfe-chip__button--BackgroundColor--hover, var(--pfe-theme--color--ui-accent--hover, #004080));\n}\n\n:host([on=\"dark\"]) .pfe-chip__button:hover::after, :host([on=\"dark\"]) .pfe-chip__close:hover::after {\n  margin: 1px;\n}\n\n.pfe-chip__button:active::after, .pfe-chip__close:active::after {\n  border-width: var(--pfe-chip__button--BorderWidth--active);\n}\n\n.pfe-chip__button:active pfe-icon, .pfe-chip__close:active pfe-icon {\n  fill: var(--pfe-chip__button--BackgroundColor--active, var(--pfe-theme--color--ui-accent--hover, #004080));\n}\n\n:host([on=\"dark\"]) .pfe-chip__button:active::after, :host([on=\"dark\"]) .pfe-chip__close:active::after {\n  margin: 1px;\n}\n\n.pfe-chip__button:focus::after, .pfe-chip__close:focus::after {\n  border-width: var(--pfe-chip__button--BorderWidth--focus);\n}\n\n.pfe-chip__button:focus pfe-icon, .pfe-chip__close:focus pfe-icon {\n  fill: var(--pfe-chip__button--BackgroundColor--focus, var(--pfe-theme--color--ui-accent--hover, #004080));\n}\n\n:host([on=\"dark\"]) .pfe-chip__button:focus::after, :host([on=\"dark\"]) .pfe-chip__close:focus::after {\n  margin: 1px;\n}\n\n:host([read-only]) {\n  padding: var(--pfe-chip--Padding, var(--pfe-chip--PaddingTop, var(--pfe-theme--form-spacer, 0.02344rem)) var(--pfe-chip--PaddingRight, var(--pfe-theme--content-spacer--body--sm, 0.5rem)) var(--pfe-chip--PaddingBottom, var(--pfe-theme--form-spacer, 0.02344rem)) var(--pfe-chip--PaddingLeft, var(--pfe-theme--content-spacer--body--sm, 0.5rem)));\n}\n\n:host([overflow]) {\n  padding-left: var(--pfe-chip--PaddingLeft, 0);\n  border-width: var(--pfe-chip--BorderWidth, 0);\n  color: var(--pfe-chip--Color, var(--pfe-theme--color--link, #06c));\n}\n\n:host([overflow]) .pfe-chip__button:hover,\n:host([overflow]) .pfe-chip__close:hover {\n  border-width: var(--pfe-chip__button--BorderWidth--hover, var(--pfe-theme--ui--border-width, 1px));\n  color: var(--pfe-chip--Color, var(--pfe-theme--color--link--hover, #004080));\n}\n\n:host([overflow]) .pfe-chip__button:active,\n:host([overflow]) .pfe-chip__close:active {\n  border-width: var(--pfe-chip__button--BorderWidth--active, var(--pfe-theme--ui--border-width, 1px));\n  color: var(--pfe-chip--Color, var(--pfe-theme--color--link--hover, #004080));\n}\n\n:host([overflow]) .pfe-chip__button:focus,\n:host([overflow]) .pfe-chip__close:focus {\n  border-width: var(--pfe-chip__button--BorderWidth--focus, var(--pfe-theme--ui--border-width, 1px));\n  color: var(--pfe-chip--Color, var(--pfe-theme--color--link--hover, #004080));\n}\n","////\n/// Tools for leveraging custom property stacks\n/// @group custom-properties\n/// @author castastrophe\n////\n\n/// Get full theme stack with a fallback from the provided map - used by pfe-var and pfe-zindex\n/// @param {String} $category  - Category name to be appended to variables within the map/system\n/// @param {String} $key - Variable name to be used and prepended with --pfe-theme\n/// @param {Map} $map  - Sass map of variables\n/// @param {String} $fallback [null]  - Optional fallback override\n/// @param {Boolean} $use-fallback [true]  - Optional hook to return a stack with no fallback value\n/// @requires $custom-prop-prefix\n/// @return {String} theme stack with fallback value from a sass map\n@function pfe-get-from-map($category, $key, $map, $fallback: null, $prefix: \"#{$custom-prop-prefix}-theme\", $use-fallback: true) {\n    // Start building the variable declaration\n    $var-declaration: \"--#{$prefix}--\";\n    @if $prefix == \"pf-c\" {\n        $var-declaration: \"--#{$prefix}-\";  // one dash at the end\n    }\n    // If the category exists, inject that into the string\n    @if $category != \"\" {\n        $var-declaration: \"#{$var-declaration}#{$category}--\";\n    }\n    // Append the key to the string\n    $var-declaration: \"#{$var-declaration}#{$key}\";\n\n    // If the fallback is not provided but use-fallback is set to true\n    @if $fallback == null and $use-fallback and map-get($map, $key) != null {\n        $fallback: map-get($map, $key);\n    }\n    @if $fallback != null {\n        // Create the variable declaration\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});   \n}\n\n\n\n/// Returns CSS Var for the local component-scoped variable\n/// @param {String} $cssvar - Variable identifiers which are postfixed and combined using '--'\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $custom-prop-prefix\n/// @see $LOCAL\n/// @example\n///   :host {\n///       padding-top:      #{pfe-local(paddingTop)};\n///       padding-bottom:   #{pfe-local(paddingBottom)};\n///   }\n@function pfe-local($cssvar, $fallback: null, $region: null) {\n    // If a fallback is not defined, use the global variables map\n    @if $fallback == null and length($LOCAL-VARIABLES) > 0 {\n        @if $region == null {\n            $fallback: map-get($LOCAL-VARIABLES, $cssvar);\n        }\n        @else {\n            $submap: map-get($LOCAL-VARIABLES, $region);\n            @if type-of($submap) == \"map\" {\n                $fallback: map-deep-get($LOCAL-VARIABLES, $region, $cssvar);\n            }\n        }\n    }\n\n    // If a region value exists, build the region string\n    @if $region != null {\n        $region: \"__#{$region}\";\n    }\n\n    // Start building the variable declaration\n    $var-declaration: \"--#{$custom-prop-prefix}-#{$LOCAL}#{$region}--#{to-string($cssvar, '--')}\";\n    \n    @if $fallback != null {\n        $var-declaration: \"#{$var-declaration}, #{$fallback}\";\n    }\n\n    // Return the variable declaration string\n    @return var(#{$var-declaration});\n}\n\n/// Fetches a CSS variable stack for broadcasted variables, providing a hook for context\n/// to influence the styles of children elements such as p tags or links.\n/// @param {String} $broadcast - name of the broadcast variable to apply\n/// @requires {String} $custom-prop-prefix - Name of repo, which is \"pfe\"\n/// @example - scss\n///   :host {\n///     color: pfe-broadcasted(link);\n///   }\n/// @example - css\n///   :host {\n///     color: var(--pfe-broadcasted--link, #06c);\n///   }\n@function pfe-broadcasted($broadcast, $use-fallback: true) {\n    $fallback: \"\";\n    @if $use-fallback {\n        $fallback: \", #{map-get($pfe-broadcasted, #{to-string($broadcast,'--')})}\";\t\n    }\n    @if not index($BROADCAST-VARS, first(str-split($broadcast, '--'))) {\n      @error \"--#{$custom-prop-prefix}-broadcasted--#{$broadcast} variable is not currently supported.\";\n    }\n    @else {\n      @return var(--#{$custom-prop-prefix}-broadcasted--#{to-string($broadcast,'--')}#{unquote($fallback)});\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme--zindex\n/// @requires {Map} $pfe-zindex - SASS Map of z-index values\n/// @see $pfe-zindex\n/// @example - scss - In your component styles\n///   .my-element {\n///     z-index: pfe-zindex( content );\n///   }\n\n@function pfe-zindex($cssvar) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-zindex, $var-name) != null {\n        @return pfe-get-from-map(\"zindex\", $var-name, $pfe-zindex);\n    }\n    @else {\n        @error \"The key for #{$var-name} could not be found in the $pfe-zindex map.\";\n    }\n}\n\n/// Returns the value (only) of a property from the respective maps\n/// Similar to pfe-var, but does not include css variable in the compiled CSS\n/// @param {String} $name - Name of the key for the map\n/// @param {String} $region - Identifies the region or slot to which this is assigned\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example - scss - In your component styles\n///   .my-element {\n///     background-color: pfe-fetch( ui-base );\n///   }\n@function pfe-fetch($name, $region: null) {\n    $var-name: to-string($name, \"--\");\n    @if $region != null and map-deep-get($LOCAL-VARIABLES, $region, $var-name) != null {\n        @return map-deep-get($LOCAL-VARIABLES, $region, $var-name);\n    }\n    @else if $region == null and map-get($LOCAL-VARIABLES, $var-name) != null {\n        @return map-get($LOCAL-VARIABLES, $var-name);\n    }\n    @else if map-get($pfe-vars, $var-name) != null {\n        @return map-get($pfe-vars, $var-name);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return map-get($pfe-colors, $var-name);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return map-get($pfe-broadcasted, $var-name);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return map-get($pfe-typography-base, $var-name);\n    }\n\n    // PATTERNFLY CORE\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return map-get($pf-type-sizing, $var-name);\n    }\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return map-get($pf-type-sizing--component, $var-name);\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return map-get($pf-type-sizing--modifers, $var-name);\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return map-get($pf-type-sizing--content, $var-name);\n    }\n    // DEPRECATED\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-base-deprecated, $var-name);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return map-get($pfe-typography-deprecated, $var-name);\n    }\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}\n\n/// Returns CSS variable stack with exposed theme variable and respective fallback\n/// @param {String} $cssvar - Variable name to be used and prepended with --pfe-theme\n/// @param {String} $fallback [null] - Optional custom fallback\n/// @see $pfe-vars\n/// @see $pfe-colors\n/// @see $pfe-broadcasted\n/// @example scss - In your component styles\n///   .my-element {\n///     padding:     pfe-var( container-spacer );\n///     font-size:   pfe-var( font-size );\n///   }\n/// @example - css Rendered output\n///   .my-element {\n///      padding: var(--pfe-theme--container-spacer, 16px);\n///      font-size: var(--pfe-theme--font-size, 16px);\n///   }\n@function pfe-var($cssvar, $fallback: null) {\n    $var-name: to-string($cssvar, \"--\");\n    @if map-get($pfe-vars, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-vars, $fallback);\n    }\n    @else if map-get($pfe-colors, $var-name) != null {\n        @return pfe-get-from-map(\"color\", $var-name, $pfe-colors, $fallback);\n    }\n    @else if map-get($pfe-broadcasted, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-broadcasted);\n    }\n    @else if map-get($pfe-typography-base, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base, $fallback);\n    }\n    // PATTERNFLY CORE:\n    @else if map-get($pf-type-sizing, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing, $fallback, $prefix: \"pf-global\");\n    }\n    @else if map-get($pf-type-sizing--modifers, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--modifers, $fallback, $prefix: \"pf-c\");\n    }\n    @else if map-get($pf-type-sizing--content, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--content, $fallback, $prefix: \"pf-c\");\n    }\n    // PFE components (must be below core)\n    @else if map-get($pf-type-sizing--component, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pf-type-sizing--component, $fallback);\n    }\n\n    // DEPRECATED:\n    @else if map-get($pfe-typography-base-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-base-deprecated, $fallback);\n    }\n    @else if map-get($pfe-typography-deprecated, $var-name) != null {\n        @return pfe-get-from-map(\"\", $var-name, $pfe-typography-deprecated, $fallback);\n    }\n\n    @else {\n        @error \"#{$var-name} could not be found.\";\n    }\n}"],"sourceRoot":"../src"}