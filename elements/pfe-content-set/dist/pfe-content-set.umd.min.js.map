{"version":3,"file":"pfe-content-set.umd.min.js","sources":["../_temp/polyfills--pfe-content-set.js","../_temp/pfe-content-set.umd.js"],"sourcesContent":["// @POLYFILL  NodeList.prototype.forEach()\n// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n  NodeList.prototype.forEach = function(callback, thisArg) {\n    thisArg = thisArg || window;\n    for (var i = 0; i < this.length; i++) {\n      callback.call(thisArg, this[i], i, this);\n    }\n  };\n}\n\n// @POLYFILL  Object.prototype.assign()\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\nif (typeof Object.assign !== \"function\") {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      // .length of function is 2\n      \"use strict\";\n      if (target === null || target === undefined) {\n        throw new TypeError(\"Cannot convert undefined or null to object\");\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource !== null && nextSource !== undefined) {\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n","/*!\n * PatternFly Elements: PfeContentSet 1.3.1\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\n// Import polyfills: matches, closest, includes, assign\nimport \"./polyfills--pfe-content-set.js\";\n\nimport PFElement from \"../../pfelement/dist/pfelement\";\nimport PfeAccordion from \"../../pfe-accordion/dist/pfe-accordion\";\nimport PfeTabs from \"../../pfe-tabs/dist/pfe-tabs\";\n\nconst CONTENT_MUTATION_CONFIG = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nclass PfeContentSet extends PFElement {\n\n  // Injected at build-time\n  static get version() {\n    return \"1.3.1\";\n  }\n\n  // Injected at build-time\n  get html() {\n    return `\n<style>:host{display:block}::slotted(:not(pfe-accordion,pfe-tabs)),::slotted([hidden]),:host([hidden]),[hidden]{display:none!important}:host([align=center]),:host([align=right]){text-align:left} /*# sourceMappingURL=pfe-content-set.min.css.map */</style>\n<div hidden><slot id=\"lightdom\"></slot></div>\n<slot name=\"_view\" private></slot>`;\n  }\n\n  static get tag() {\n    return \"pfe-content-set\";\n  }\n\n  get templateUrl() {\n    return \"pfe-content-set.html\";\n  }\n\n  get styleUrl() {\n    return \"pfe-content-set.scss\";\n  }\n\n  static get meta() {\n    return {\n      title: \"Content set\",\n      description:\n        \"This element creates a flexible component that renders an accordion or tabset depending on screen size.\"\n    };\n  }\n\n  static get pfeType() {\n    return PFElement.pfeType.combo;\n  }\n\n  /**\n   * Property definitions for Content set combine the options available for Tabs & Accordion\n   */\n  static get properties() {\n    return {\n      //-- PFE-TABS specific properties\n      vertical: {\n        title: \"Vertical orientation\",\n        type: Boolean,\n        default: false,\n        cascade: \"pfe-tabs\"\n      },\n      selectedIndex: {\n        title: \"Index of the selected tab\",\n        type: Number,\n        cascade: \"pfe-tabs\"\n      },\n      tabAlign: {\n        title: \"Tab alignment\",\n        type: String,\n        enum: [\"center\"],\n        cascade: \"pfe-tabs\"\n      },\n      variant: {\n        title: \"Variant\",\n        type: String,\n        enum: [\"wind\", \"earth\"],\n        default: \"wind\",\n        cascade: \"pfe-tabs\"\n      },\n      // @TODO: Deprecated for 1.0\n      oldVariant: {\n        type: String,\n        attr: \"pfe-variant\",\n        alias: \"variant\"\n      },\n      tabHistory: {\n        title: \"Tab History\",\n        type: Boolean,\n        default: false,\n        cascade: \"pfe-tabs\"\n      },\n      // @TODO: Deprecated for 1.0\n      oldTabHistory: {\n        type: Boolean,\n        alias: \"tabHistory\",\n        attr: \"pfe-tab-history\"\n      },\n      //-- PFE-ACCORDION specific properties\n      disclosure: {\n        // Leaving this as a string since it's an opt out\n        title: \"Disclosure\",\n        type: String,\n        values: [\"true\", \"false\"],\n        cascade: \"pfe-accordion\"\n      },\n      // @TODO: Deprecated pfe-disclosure in 1.0\n      oldDisclosure: {\n        type: String,\n        alias: \"disclosure\",\n        attr: \"pfe-disclosure\"\n      },\n      //-- PFE-CONTENT-SET specific properties\n      breakpoint: {\n        title: \"Custom breakpoint\",\n        type: String,\n        default: \"700\",\n        observer: \"_updateBreakpoint\"\n      },\n      // @TODO: Deprecated in 1.0\n      oldBreakpoint: {\n        type: String,\n        alias: \"breakpoint\",\n        attr: \"pfe-breakpoint\"\n      },\n      align: {\n        type: String,\n        enum: [\"center\"],\n        observer: \"_alignmentHandler\"\n      },\n      // @TODO: Deprecated in 1.0\n      oldAlign: {\n        attr: \"pfe-align\",\n        alias: \"align\"\n      },\n      // @TODO: Deprecated in 1.0\n      pfeId: {\n        type: String,\n        attr: \"pfe-id\",\n        observer: \"_copyToId\"\n      }\n    };\n  }\n\n  /**\n   * Schema definition for slotted content\n   * Useful for CMS dynamic imports of components\n   */\n  static get slots() {\n    return {\n      default: {\n        title: \"Default\",\n        type: \"array\",\n        namedSlot: false,\n        items: {\n          $ref: \"raw\"\n        }\n      }\n    };\n  }\n\n  get breakpointValue() {\n    return parseInt(this.breakpoint.replace(/\\D/g, \"\"));\n  }\n\n  /**\n   * Getter: should this be rendered as a tabset based on the breakpoint size\n   * @returns {boolean} Is this a tabset?\n   */\n  get isTab() {\n    return this.parentNode\n      ? this.parentNode.offsetWidth > this.breakpointValue\n      : window.outerWidth > this.breakpointValue;\n  }\n\n  /**\n   * Getter: Capture all components in the _view slot\n   * @returns {NodeList} All components in the _view slot\n   */\n  get viewAll() {\n    return this.querySelectorAll(`[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Capture the rendering component from the _view slot\n   * @returns {NodeItem} The rendering component from the _view slot\n   */\n  get view() {\n    let views = [...this.viewAll].filter(view => [PfeTabs.tag, PfeAccordion.tag].includes(view.tag));\n    if (views.length <= 0) return null;\n    return views[0];\n  }\n\n  /**\n   * Getter: should this be rendered as a tabset based on the breakpoint size\n   * @returns {boolean} Is this a tabset?\n   */\n  get expectedTag() {\n    return this.isTab ? PfeTabs.tag : PfeAccordion.tag;\n  }\n\n  /**\n   * Getter: Capture the tabs component from the _view slot (if it exists)\n   * @returns {NodeItem} The tabs component from the _view slot\n   */\n  get tabs() {\n    return this.querySelector(`pfe-tabs[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Capture the accordion component from the _view slot (if it exists)\n   * @returns {NodeItem} The accordion component from the _view slot\n   */\n  get accordion() {\n    return this.querySelector(`pfe-accordion[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Validates the incoming light DOM for some usable content\n   * @returns {boolean} Returns true if some usable light DOM exists\n   */\n  get hasValidLightDOM() {\n    // If any light DOM exists, validate it meets the requirements for rendering\n    if (this.hasLightDOM()) {\n      let valid = false;\n      // For non-IE environments, use assigned nodes\n      const content = this.shadowRoot.querySelector(`slot#lightdom`);\n      let nodes = content.assignedNodes();\n      // Otherwise grab the direct children\n      if (this.isIE11) nodes = [...this.children];\n\n      // Loop through the assigned nodes\n      nodes.forEach(node => {\n        // Validate that any non-text nodes have the right attributes present\n        // They don't have to be in the right order, just that they exist at all lets us progress\n        if (\n          node.nodeName !== \"#text\" &&\n          (this._isHeader(node) ||\n            this._isPanel(node) ||\n            (node.tagName && node.tagName.toLowerCase() === this.expectedTag))\n        )\n          valid = true;\n      });\n      return valid;\n    } else return false;\n  }\n\n  constructor() {\n    super(PfeContentSet, { type: PfeContentSet.PfeType });\n\n    this.isIE11 = /MSIE|Trident|Edge\\//.test(window.navigator.userAgent);\n\n    this.build = this.build.bind(this);\n\n    this._mutationHandler = this._mutationHandler.bind(this);\n    this._resizeHandler = this._resizeHandler.bind(this);\n\n    this._cleanSet = this._cleanSet.bind(this);\n    this._build = this._build.bind(this);\n    this._buildWrapper = this._buildWrapper.bind(this);\n    this._buildSets = this._buildSets.bind(this);\n\n    this._observer = new MutationObserver(this._mutationHandler);\n    if (window.ResizeObserver) this._resizeObserver = new ResizeObserver(this._resizeHandler);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    // If the element has an ID, postfix container\n    if (this.id) this.id = `${this.id.replace(/-container$/, \"\")}-container`;\n\n    // Validate that the light DOM data exists before building\n    if (this.hasValidLightDOM) {\n      this._build();\n\n      if (!this.isIE11 && window.ResizeObserver && this.parentElement) {\n        this._resizeObserver.observe(this.parentElement);\n      }\n    } else if (!this.isIE11) this._observer.observe(this, CONTENT_MUTATION_CONFIG);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._observer.disconnect();\n    if (window.ResizeObserver) this._resizeObserver.disconnect();\n  }\n\n  /**\n   * Run the internal build task\n   */\n  build() {\n    // Fire the build of the internals for the new component\n    return this._build();\n  }\n\n  /**\n   * Mutation handler\n   * Read in and parse the mutation list, rebuilding as necessary\n   */\n  _mutationHandler(mutationsList) {\n    if (!this.isIE11 && mutationsList) {\n      for (let mutation of mutationsList) {\n        switch (mutation.type) {\n          case \"childList\":\n            if (mutation.addedNodes) {\n              // Check the added nodes to make sure it's not assigned to the _view slot\n              let nodes = this._cleanSet(mutation.addedNodes);\n              if (nodes.length > 0) this._build(nodes);\n            }\n            if (mutation.removedNodes) {\n              // Check the added nodes to make sure it's not assigned to the _view slot\n              let nodes = this._cleanSet(mutation.removedNodes);\n              if (nodes.length > 0) this._removeNodes(nodes);\n            }\n            break;\n          case \"characterData\":\n            if (mutation.target && mutation.target.parentNode)\n              this._updateNode(mutation.target.parentNode, mutation.target.textContent);\n            break;\n        }\n      }\n\n      return;\n    }\n\n    // If no mutation list is provided or it's IE11, rebuild the whole thing\n    this._build();\n  }\n\n  /**\n   * Checks if the element provided is a header region\n   * @returns {boolean} True if the element provided is a header region\n   */\n  _isHeader(el) {\n    return !!(el.hasAttribute(`${this.tag}--header`) || el.tagName.match(/H[1-6]/));\n  }\n\n  /**\n   * Checks if the element provided is a panel region\n   * @returns {boolean} True if the element provided is a panel region\n   */\n  _isPanel(el) {\n    return !!el.hasAttribute(`${this.tag}--panel`);\n  }\n\n  /**\n   * Reflect the removal of nodes from light DOM into the rendered view\n   */\n  _removeNodes(list) {\n    list.forEach(item => this._removeNode(item));\n\n    // If a container doesn't exist, escape now\n    if (!this.view) return;\n\n    // Check if the container is empty, hide\n    if (!this.view.hasChildNodes()) this.view.setAttribute(\"hidden\", \"\");\n    else this.view.removeAttribute(\"hidden\");\n  }\n\n  /**\n   * Find a connection between a node in light DOM that was added or removed\n   * and the matching node in the rendered component; this makes upgrades more\n   * efficient so we're not rebuilding everything every time.\n   * @returns {Node} Returns the node in the rendered component that maps to the light DOM node provided\n   */\n  _findConnection(node) {\n    let connection = null;\n\n    if (!this.view) return connection;\n\n    // If this node is mapped to one in the upgraded component\n    if (node.nodeName !== \"#text\" && node.hasAttribute(\"maps-to\")) {\n      const id = node.getAttribute(\"maps-to\");\n      if (!id) return connection;\n\n      connection = this.view.querySelector(`#${id}`);\n      if (!connection) this.warn(`no element could be found with #${id}`);\n    }\n\n    // Return the connection\n    return connection;\n  }\n\n  /**\n   * Reflect the removal of a node from light DOM into the rendered view\n   */\n  _removeNode(node) {\n    if (!this.view) return;\n\n    const connection = _findConnection(node);\n    if (connection) this.view.removeChild(connection);\n    // Fire a full rebuild if it can't determine the mapped element\n    else this._build();\n  }\n\n  _updateNode(node, textContent) {\n    if (!this.view) return;\n\n    const connection = _findConnection(node);\n    if (connection) connection.textContent = textContent;\n    // Fire a full rebuild if it can't determine the mapped element\n    else this._build();\n  }\n\n  _cleanSet(set) {\n    return [...set].filter(item => item !== this.view);\n  }\n\n  /**\n   * Manage the building of the rendering component\n   * Optionally accepts the input of new nodes added to the DOM\n   */\n  _build(addedNodes) {\n    // @TODO: Add back a promise here post-IE11\n    let view = this.view;\n    if (!view || view.tag !== this.expectedTag) {\n      view = this._buildWrapper();\n    }\n\n    // Disconnect the observer while we parse it\n    this._observer.disconnect();\n\n    const template = view.tag === \"pfe-tabs\" ? PfeTabs.contentTemplate : PfeAccordion.contentTemplate;\n\n    // If no id is present, give it the id from the wrapper\n    if (!view.id) view.id = this.id || this.pfeId || this.randomId;\n\n    let rawSets = null;\n    if (addedNodes) rawSets = addedNodes;\n    if (!rawSets && [...this.children].length) rawSets = this.children;\n\n    // Clear out the content of the host if we're using the full child list\n    if (!addedNodes && rawSets) view.innerHTML = \"\";\n\n    // If sets is not null, build them using the template\n    if (rawSets) {\n      let sets = this._buildSets(rawSets, template);\n      if (sets) view.appendChild(sets);\n    }\n\n    // Wait until the tabs upgrade before setting the selectedIndex value\n    Promise.all([customElements.whenDefined(PfeTabs.tag)]).then(() => {\n      // pass the selectedIndex property down from pfe-content-set\n      // to pfe-tabs if there is a selectedIndex value that's not 0\n      // Pass the selectedIndex down to the tabset\n      if (this.isTab && this.selectedIndex) {\n        view.selectedIndex = this.selectedIndex;\n      }\n\n      // Attach the mutation observer\n      if (!this.isIE11) this._observer.observe(this, CONTENT_MUTATION_CONFIG);\n\n      return;\n    });\n  }\n\n  /*\n   * Note: be sure to disconnect the observer before running this\n   */\n  _buildWrapper() {\n    if (this.view && this.view.tag === this.expectedTag) return this.view;\n\n    // If the upgraded component matches the tag name of the expected rendering component, return now;\n    if (this.view) {\n      // One option was to just remove the existing element: existingEl.remove();\n      // But it seems safer to clear out the entire slot to make sure nothing snuck in unexpectedly\n      this.viewAll.forEach(item => item.remove());\n    }\n\n    // If there was no rendering component or it was the wrong one (and thus removed), create one!\n    let newEl = document.createElement(this.expectedTag);\n    newEl.setAttribute(\"slot\", \"_view\");\n    if (this.id) newEl.id = this.id.replace(/-container$/, \"\");\n    this.appendChild(newEl);\n\n    return newEl;\n  }\n\n  _buildSets(sets, template) {\n    sets = this._cleanSet(sets);\n    let fragment = document.createDocumentFragment();\n\n    for (let i = 0; i < sets.length; i = i + 2) {\n      let header = sets[i];\n      let panel = sets[i + 1];\n\n      // Set up the template for the sets of content\n      const wrapper = document.createElement(\"template\");\n      wrapper.innerHTML = template.trim();\n      const templateMarkup = wrapper.content.cloneNode(true);\n\n      if (!header) this.warn(`no element found at position ${i} of the light DOM input.`);\n      if (!panel) this.warn(`no element found at position ${i + 1} of the light DOM input.`);\n\n      if (header && this._isHeader(header) && panel && this._isPanel(panel)) {\n        // Capture the line-item from the template\n        [header, panel].forEach((region, idx) => {\n          const section = idx === 0 ? \"header\" : \"panel\";\n\n          let piece = templateMarkup.querySelector(`[content-type=\"${section}\"]`).cloneNode(true);\n\n          // Remove the section from the ID name in case it was already upgraded\n          let regionId = region.id;\n          if (region.hasAttribute(\"upgraded\") && regionId) {\n            regionId = regionId.replace(new RegExp(`--${section}$`), \"\");\n          }\n          // Capture the ID from the region, the pfe-id, a previous \"maps-to\" attr, or generate a random one\n          const id = regionId || region.getAttribute(\"pfe-id\") || region.getAttribute(\"maps-to\") || this.randomId;\n\n          // Update the region ID with a postfix to prevent duplication\n          if (region.id) region.id = `${regionId}--${section}`;\n          // Flag that this element was upgraded\n          region.setAttribute(\"upgraded\", \"\");\n\n          const clone = region.cloneNode(true);\n\n          // Remove the flag from the clone\n          clone.removeAttribute(`${this.tag}--${section}`);\n\n          // Append a clone of the region to the template item\n          piece.appendChild(clone);\n\n          // Flag light DOM as upgraded\n          region.setAttribute(\"maps-to\", id);\n\n          piece.id = id;\n\n          // Attach the template item to the fragment\n          fragment.appendChild(piece);\n        });\n      }\n    }\n\n    return fragment;\n  }\n\n  _cleanSet(set) {\n    return [...set].filter(item => item !== this.view);\n  }\n\n  _copyToId() {\n    // Don't overwrite an existing ID but backwards support pfe-id\n    if (!this.id) this.id = this.pfeId;\n  }\n\n  _alignmentHandler(oldVal, newVal) {\n    if (oldVal !== newVal) this.tabAlign = newVal;\n  }\n\n  _resizeHandler() {\n    if (!this.view || (this.view && this.view.tag !== this.expectedTag)) {\n      this._build();\n    }\n  }\n\n  _updateBreakpoint() {\n    // If the correct rendering element isn't in use yet, build it from scratch\n    if (!this.view || (this.view && this.view.tag !== this.expectedTag)) {\n      this._build();\n    }\n  }\n}\n\nPFElement.create(PfeContentSet);\n\nexport default PfeContentSet;\n"],"names":["window","NodeList","prototype","forEach","callback","thisArg","i","this","length","call","Object","assign","defineProperty","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","hasOwnProperty","CONTENT_MUTATION_CONFIG","PfeContentSet","PFElement","parseInt","breakpoint","replace","parentNode","offsetWidth","breakpointValue","outerWidth","querySelectorAll","views","viewAll","filter","PfeTabs","tag","PfeAccordion","includes","view","isTab","querySelector","hasLightDOM","valid","nodes","shadowRoot","assignedNodes","isIE11","children","node","nodeName","_this2","_isHeader","_isPanel","tagName","toLowerCase","expectedTag","pfeType","combo","Boolean","Number","String","id","hasValidLightDOM","_build","ResizeObserver","parentElement","_resizeObserver","observe","_observer","disconnect","mutationsList","mutation","type","addedNodes","_cleanSet","removedNodes","_removeNodes","_updateNode","textContent","el","hasAttribute","match","list","_this3","_removeNode","item","hasChildNodes","removeAttribute","setAttribute","connection","getAttribute","warn","_findConnection","removeChild","set","_this4","_buildWrapper","template","contentTemplate","pfeId","randomId","rawSets","innerHTML","sets","_buildSets","appendChild","all","customElements","whenDefined","then","_this5","selectedIndex","remove","newEl","document","createElement","fragment","createDocumentFragment","header","panel","wrapper","trim","templateMarkup","content","cloneNode","_this6","region","idx","section","piece","regionId","RegExp","clone","_this7","oldVal","newVal","tabAlign","PfeType","test","navigator","userAgent","build","_this","bind","_mutationHandler","_resizeHandler","MutationObserver","create"],"mappings":"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"}