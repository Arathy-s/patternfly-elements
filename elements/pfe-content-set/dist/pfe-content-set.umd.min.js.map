{"version":3,"file":"pfe-content-set.umd.min.js","sources":["../_temp/polyfills--pfe-content-set.js","../_temp/pfe-content-set.umd.js"],"sourcesContent":["// @POLYFILL  NodeList.prototype.forEach()\n// https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach\nif (window.NodeList && !NodeList.prototype.forEach) {\n  NodeList.prototype.forEach = function(callback, thisArg) {\n    thisArg = thisArg || window;\n    for (var i = 0; i < this.length; i++) {\n      callback.call(thisArg, this[i], i, this);\n    }\n  };\n}\n\n// @POLYFILL  Object.prototype.assign()\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\nif (typeof Object.assign !== \"function\") {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {\n      // .length of function is 2\n      \"use strict\";\n      if (target === null || target === undefined) {\n        throw new TypeError(\"Cannot convert undefined or null to object\");\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource !== null && nextSource !== undefined) {\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true\n  });\n}\n","/*!\n * PatternFly Elements: PfeContentSet 1.5.1\n * @license\n * Copyright 2021 Red Hat, Inc.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n*/\n\n// Import polyfills: matches, closest, includes, assign\nimport \"./polyfills--pfe-content-set.js\";\n\nimport PFElement from \"../../pfelement/dist/pfelement\";\nimport PfeAccordion from \"../../pfe-accordion/dist/pfe-accordion\";\nimport PfeTabs from \"../../pfe-tabs/dist/pfe-tabs\";\n\nconst CONTENT_MUTATION_CONFIG = {\n  characterData: false,\n  childList: true,\n  subtree: false\n};\nclass PfeContentSet extends PFElement {\n\n  // Injected at build-time\n  static get version() {\n    return \"1.5.1\";\n  }\n\n  // Injected at build-time\n  get html() {\n    return `\n<style>:host{display:block}::slotted([hidden]),:host([hidden]),[hidden]{display:none!important}:host([align=center]),:host([align=right]){text-align:left} /*# sourceMappingURL=pfe-content-set.min.css.map */</style>\n<div id=\"container\"></div>`;\n  }\n\n  static get tag() {\n    return \"pfe-content-set\";\n  }\n\n  get styleUrl() {\n    return \"pfe-content-set.scss\";\n  }\n\n  get templateUrl() {\n    return \"pfe-content-set.html\";\n  }\n\n  static get meta() {\n    return {\n      title: \"Content set\",\n      description:\n        \"This element creates a flexible component that renders an accordion or tabset depending on screen size.\"\n    };\n  }\n\n  static get pfeType() {\n    return PFElement.pfeType.combo;\n  }\n\n  /**\n   * Property definitions for Content set combine the options available for Tabs & Accordion\n   */\n  static get properties() {\n    return {\n      //-- PFE-TABS specific properties\n      vertical: {\n        title: \"Vertical orientation\",\n        type: Boolean,\n        default: false,\n        cascade: \"pfe-tabs\"\n      },\n      selectedIndex: {\n        title: \"Index of the selected tab\",\n        type: Number,\n        cascade: \"pfe-tabs\"\n      },\n      tabAlign: {\n        title: \"Tab alignment\",\n        type: String,\n        enum: [\"center\"],\n        cascade: \"pfe-tabs\"\n      },\n      variant: {\n        title: \"Variant\",\n        type: String,\n        enum: [\"wind\", \"earth\"],\n        default: \"wind\",\n        cascade: \"pfe-tabs\"\n      },\n      // @TODO: Deprecated for 1.0\n      oldVariant: {\n        type: String,\n        attr: \"pfe-variant\",\n        alias: \"variant\"\n      },\n      // @TODO: Deprecated for 1.0\n      oldTabHistory: {\n        type: Boolean,\n        alias: \"tabHistory\",\n        attr: \"pfe-tab-history\"\n      },\n      tabHistory: {\n        title: \"Tab History\",\n        type: Boolean,\n        default: false,\n        cascade: \"pfe-tabs\"\n      },\n      //-- PFE-ACCORDION specific properties\n      disclosure: {\n        // Leaving this as a string since it's an opt out\n        title: \"Disclosure\",\n        type: String,\n        values: [\"true\", \"false\"],\n        cascade: \"pfe-accordion\"\n      },\n      // @TODO: Deprecated pfe-disclosure in 1.0\n      oldDisclosure: {\n        type: String,\n        alias: \"disclosure\",\n        attr: \"pfe-disclosure\"\n      },\n      //-- PFE-CONTENT-SET specific properties\n      breakpoint: {\n        title: \"Custom breakpoint\",\n        type: String,\n        default: \"700\",\n        observer: \"_updateBreakpoint\"\n      },\n      // @TODO: Deprecated in 1.0\n      oldBreakpoint: {\n        type: String,\n        alias: \"breakpoint\",\n        attr: \"pfe-breakpoint\"\n      },\n      align: {\n        type: String,\n        enum: [\"center\"],\n        observer: \"_alignmentHandler\"\n      },\n      // @TODO: Deprecated in 1.0\n      oldAlign: {\n        attr: \"pfe-align\",\n        alias: \"align\"\n      },\n      // @TODO: Deprecated in 1.0\n      pfeId: {\n        type: String,\n        attr: \"pfe-id\",\n        observer: \"_copyToId\"\n      }\n    };\n  }\n\n  /**\n   * Schema definition for slotted content\n   * Useful for CMS dynamic imports of components\n   */\n  static get slots() {\n    return {\n      default: {\n        title: \"Default\",\n        type: \"array\",\n        namedSlot: false,\n        items: {\n          $ref: \"raw\"\n        }\n      }\n    };\n  }\n\n  get breakpointValue() {\n    return parseInt(this.breakpoint.replace(/\\D/g, \"\"));\n  }\n\n  /**\n   * Getter: should this be rendered as a tabset based on the breakpoint size\n   * @returns {boolean} Is this a tabset?\n   */\n  get isTab() {\n    return this.parentNode\n      ? this.parentNode.offsetWidth > this.breakpointValue\n      : window.outerWidth > this.breakpointValue;\n  }\n\n  /**\n   * Getter: Alias now for this.view\n   * @returns {NodeItem} The rendering component\n   */\n  get viewAll() {\n    return this.view;\n  }\n\n  /**\n   * Getter: Capture the rendering component from the shadow DOM\n   * @returns {NodeItem} The rendering component from the shadow DOM\n   */\n  get view() {\n    if (!this._rendered) return;\n\n    return this.shadowRoot.querySelector(`#container > ${this.expectedTag}`);\n  }\n\n  /**\n   * Getter: should this be rendered as a tabset based on the breakpoint size\n   * @returns {boolean} Is this a tabset?\n   */\n  get expectedTag() {\n    return this.isTab ? PfeTabs.tag : PfeAccordion.tag;\n  }\n\n  /**\n   * Getter: Capture the tabs component from the _view slot (if it exists)\n   * @returns {NodeItem} The tabs component from the _view slot\n   */\n  get tabs() {\n    return this.querySelector(`pfe-tabs[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Capture the accordion component from the _view slot (if it exists)\n   * @returns {NodeItem} The accordion component from the _view slot\n   */\n  get accordion() {\n    return this.querySelector(`pfe-accordion[slot=\"_view\"]`);\n  }\n\n  /**\n   * Getter: Validates the incoming light DOM for some usable content\n   * @returns {boolean} Returns true if some usable light DOM exists\n   */\n  get hasValidLightDOM() {\n    // If any light DOM exists, validate it meets the requirements for rendering\n    if (this.hasLightDOM()) {\n      let valid = false;\n      // Loop through the assigned nodes\n      [...this.children].forEach(node => {\n        // Validate that any non-text nodes have the right attributes present\n        // They don't have to be in the right order, just that they exist at all lets us progress\n        if (\n          node.nodeName !== \"#text\" &&\n          (this._isHeader(node) ||\n            this._isPanel(node) ||\n            (node.tagName && node.tagName.toLowerCase() === this.expectedTag))\n        )\n          valid = true;\n      });\n      return valid;\n    } else return false;\n  }\n\n  constructor() {\n    super(PfeContentSet, { type: PfeContentSet.PfeType });\n\n    this.build = this.build.bind(this);\n\n    this._mutationHandler = this._mutationHandler.bind(this);\n    this._alignmentHandler = this._alignmentHandler.bind(this);\n    this._resizeHandler = this._resizeHandler.bind(this);\n\n    this._build = this._build.bind(this);\n    this._buildWrapper = this._buildWrapper.bind(this);\n    this._buildSets = this._buildSets.bind(this);\n\n    this._isHeader = this._isHeader.bind(this);\n    this._isPanel = this._isPanel.bind(this);\n    this._addNodes = this._addNodes.bind(this);\n    this._removeNodes = this._removeNodes.bind(this);\n    this._findConnection = this._findConnection.bind(this);\n    this._addNode = this._addNode.bind(this);\n    this._removeNode = this._removeNode.bind(this);\n    this._updateNode = this._updateNode.bind(this);\n\n    this._copyToId = this._copyToId.bind(this);\n    this._updateBreakpoint = this._updateBreakpoint.bind(this);\n\n    this._observer = new MutationObserver(this._mutationHandler);\n    if (window.ResizeObserver) this._resizeObserver = new ResizeObserver(this._resizeHandler);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    // Validate that the light DOM data exists before building\n    if (this.hasValidLightDOM) {\n      this._build();\n\n      if (!this.isIE11 && window.ResizeObserver && this.parentElement) {\n        this._resizeObserver.observe(this.parentElement);\n      }\n    } else if (!this.isIE11) this._observer.observe(this, CONTENT_MUTATION_CONFIG);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this._observer.disconnect();\n    if (window.ResizeObserver) this._resizeObserver.disconnect();\n  }\n\n  /**\n   * Run the internal build task\n   */\n  build() {\n    // Fire the build of the internals for the new component\n    return this._build();\n  }\n\n  /**\n   * Mutation handler\n   * Read in and parse the mutation list, rebuilding as necessary\n   */\n  _mutationHandler(mutationsList) {\n    if (!this.isIE11 && mutationsList) {\n      for (let mutation of mutationsList) {\n        if (mutation.type === \"childList\") {\n          if (mutation.addedNodes && mutation.addedNodes.length > 0) {\n            // Check the added nodes to make sure it's not assigned to the _view slot\n            let nodes = mutation.addedNodes;\n            if (nodes.length > 0) this._addNodes(nodes);\n          }\n          if (mutation.removedNodes && mutation.removedNodes.length > 0) {\n            // Check the added nodes to make sure it's not assigned to the _view slot\n            let nodes = mutation.removedNodes;\n            if (nodes.length > 0) this._removeNodes(nodes);\n          }\n        }\n      }\n\n      return;\n    }\n\n    // If no mutation list is provided or it's IE11, rebuild the whole thing\n    this._build();\n  }\n\n  /**\n   * Checks if the element provided is a header region\n   * @returns {boolean} True if the element provided is a header region\n   */\n  _isHeader(el) {\n    // Ensure that we don't throw an error if we encounter a web component\n    // yet to be defined.\n    if (typeof el.hasAttribute !== \"undefined\") {\n      return !!(el.hasAttribute(`${this.tag}--header`) || el.tagName.match(/H[1-6]/));\n    }\n    return false;\n  }\n\n  /**\n   * Checks if the element provided is a panel region\n   * @returns {boolean} True if the element provided is a panel region\n   */\n  _isPanel(el) {\n    // Ensure that we don't throw an error if we encounter a web component\n    // yet to be defined.\n    if (typeof el.previousElementSibling !== \"undefined\") {\n      return !!this._isHeader(el.previousElementSibling);\n    }\n    return false;\n  }\n\n  /**\n   * Reflect the addition of nodes from light DOM into the rendered view\n   */\n  _addNodes(list) {\n    this._build(list);\n\n    // @TODO: Build in some logic for injecting a single node rather than rebuild\n    // list.forEach(item => this._addNode(item));\n  }\n\n  /**\n   * Reflect the removal of nodes from light DOM into the rendered view\n   */\n  _removeNodes(list) {\n    list.forEach(item => this._removeNode(item));\n\n    // If a container doesn't exist, escape now\n    if (!this.view) return;\n\n    // Check if the container is empty, hide\n    if (!this.view.hasChildNodes()) this.view.setAttribute(\"hidden\", \"\");\n    else this.view.removeAttribute(\"hidden\");\n  }\n\n  /**\n   * Find a connection between a node in light DOM that was added or removed\n   * and the matching node in the rendered component; this makes upgrades more\n   * efficient so we're not rebuilding everything every time.\n   * @returns {Node} Returns the node in the rendered component that maps to the light DOM node provided\n   */\n  _findConnection(node) {\n    let connection = null;\n\n    if (!this.view) return connection;\n\n    // If this node is mapped to one in the upgraded component\n    if (node.nodeName !== \"#text\" && node.hasAttribute(\"slot\")) {\n      const id = node.getAttribute(\"slot\");\n      if (id) connection = this.view.querySelector(`[name=\"${id}\"]`);\n    }\n\n    if (!connection) this.warn(`no slot could be found with [name=\"${id}\"]`);\n\n    // Return the connection\n    return connection;\n  }\n\n  /**\n   * Reflect the removal of a node from light DOM into the rendered view\n   */\n  _addNode(node) {\n    if (!this.view) return;\n\n    // @TODO: Build in some logic for injecting a single node rather than rebuild\n\n    // Fire a full rebuild if it can't determine the mapped element\n    this._build();\n  }\n\n  /**\n   * Reflect the removal of a node from light DOM into the rendered view\n   */\n  _removeNode(node) {\n    if (!this.view) return;\n\n    const connection = this._findConnection(node);\n    if (connection) {\n      let header, panel;\n      const el = connection.parentElement;\n\n      // Look for the sibling element\n      if (\n        el.getAttribute(\"content-type\") === \"header\" &&\n        el.nextElementSibling &&\n        el.nextElementSibling.getAttribute(\"content-type\") === \"panel\"\n      ) {\n        header = el;\n        panel = el.nextElementSibling;\n      } else if (\n        el.getAttribute(\"content-type\") === \"panel\" &&\n        el.previousElementSibling &&\n        el.previousElementSibling.getAttribute(\"content-type\") === \"header\"\n      ) {\n        header = el.previousElementSibling;\n        panel = el;\n      }\n\n      // This will remove the sibling element from the\n      // shadow template but not the light DOM\n      if (header) header.remove();\n      if (panel) panel.remove();\n    }\n    // Fire a full rebuild if it can't determine the mapped element\n    else this._build();\n  }\n\n  _updateNode(node, textContent) {\n    if (!this.view) return;\n\n    const connection = this._findConnection(node);\n    if (connection) {\n      if (textContent) connection.textContent = textContent;\n      else connection.innerHTML = node.innerHTML;\n    }\n    // Fire a full rebuild if it can't determine the mapped element\n    else this._build();\n  }\n\n  /**\n   * Manage the building of the rendering component\n   * Optionally accepts the input of new nodes added to the DOM\n   */\n  _build(addedNodes) {\n    // @TODO: Add back a promise here post-IE11\n    let view = this.view;\n    if (!view || view.tag !== this.expectedTag) {\n      view = this._buildWrapper();\n    }\n\n    // Disconnect the observer while we parse it\n    this._observer.disconnect();\n\n    let tag = view.tag || view.tagName.toLowerCase();\n    const template = tag === \"pfe-tabs\" ? PfeTabs.contentTemplate : PfeAccordion.contentTemplate;\n\n    let rawSets = null;\n    if (addedNodes) rawSets = addedNodes;\n    if (!rawSets && [...this.children].length) rawSets = this.children;\n\n    // Clear out the content of the host if we're using the full child list\n    if (!addedNodes && rawSets) view.innerHTML = \"\";\n\n    // If sets is not null, build them using the template\n    if (rawSets) {\n      let sets = this._buildSets(rawSets, template);\n      if (sets) view.appendChild(sets);\n    }\n\n    // @todo find out why we need this shim\n    // Shadydom breaks if we use innerHTML to set the new content but Selenium will infinitely\n    // loop in out tests if we use appendChild.\n    if (window.ShadyDOM) this.shadowRoot.querySelector(`#container`).appendChild(view);\n    else this.shadowRoot.querySelector(`#container`).innerHTML = view.outerHTML;\n\n    Promise.all([customElements.whenDefined(tag)]).then(() => {\n      this.cascadeProperties();\n\n      // Attach the mutation observer\n      if (!this.isIE11) this._observer.observe(this, CONTENT_MUTATION_CONFIG);\n\n      return;\n    });\n  }\n\n  /*\n   * Note: be sure to disconnect the observer before running this\n   */\n  _buildWrapper() {\n    // If the upgraded component matches the tag name of the expected rendering component, return now;\n    if (this.view) return this.view;\n\n    // Create the rendering element\n    let newEl = document.createElement(this.expectedTag);\n    newEl.id = this.id || this.pfeId || this.randomId;\n\n    // Return the new element so that the content can be injected\n    return newEl;\n  }\n\n  _buildSets(sets, template) {\n    let fragment = document.createDocumentFragment();\n\n    for (let i = 0; i < sets.length; i = i + 2) {\n      let header = sets[i];\n      let panel = sets[i + 1];\n\n      // Set up the template for the sets of content\n      const wrapper = document.createElement(\"template\");\n      wrapper.innerHTML = template.trim();\n\n      // Capture the template markup as a cloned node\n      const templateMarkup = wrapper.content.cloneNode(true);\n\n      if (!header) this.warn(`no element found at position ${i} of the light DOM input.`);\n      if (!panel) this.warn(`no element found at position ${i + 1} of the light DOM input.`);\n\n      if (header && this._isHeader(header) && panel && this._isPanel(panel)) {\n        // Capture the line-item from the template\n        [header, panel].forEach((region, idx) => {\n          const section = idx === 0 ? \"header\" : \"panel\";\n\n          let piece = templateMarkup.querySelector(`[content-type=\"${section}\"]`).cloneNode(true);\n\n          // Create a new slot for the shadow template and create a random name for it\n          const slot = document.createElement(\"slot\");\n          slot.name = this.randomId.replace(\"pfe-\", `${section}-`);\n\n          // Append the new slot into the template item\n          piece.appendChild(slot);\n\n          // Connect the light DOM region to the newly create slot\n          region.setAttribute(\"slot\", slot.name);\n\n          // Capture the ID from the region or the pfe-id if they exist\n          if (region.id || region.getAttribute(\"pfe-id\")) piece.id = region.id || region.getAttribute(\"pfe-id\");\n\n          // Attach the template item to the fragment\n          fragment.appendChild(piece);\n        });\n      }\n    }\n\n    return fragment;\n  }\n\n  _copyToId(oldVal, newVal) {\n    if (oldVal !== newVal && !this.id) {\n      // Don't overwrite an existing ID but backwards support pfe-id\n      this.id = newVal;\n    }\n  }\n\n  _alignmentHandler(oldVal, newVal) {\n    if (oldVal !== newVal) this.tabAlign = newVal;\n  }\n\n  _resizeHandler() {\n    if (!this.view || (this.view && this.view.tag !== this.expectedTag)) {\n      this._build();\n    }\n  }\n\n  _updateBreakpoint() {\n    // If the correct rendering element isn't in use yet, build it from scratch\n    if (!this.view || (this.view && this.view.tag !== this.expectedTag)) {\n      this._build();\n    }\n  }\n}\n\nPFElement.create(PfeContentSet);\n\nexport default PfeContentSet;\n"],"names":["window","NodeList","prototype","forEach","callback","thisArg","i","this","length","call","Object","assign","defineProperty","target","varArgs","TypeError","to","index","arguments","nextSource","nextKey","hasOwnProperty","CONTENT_MUTATION_CONFIG","PfeContentSet","PFElement","parseInt","breakpoint","replace","parentNode","offsetWidth","breakpointValue","outerWidth","view","_rendered","shadowRoot","querySelector","expectedTag","isTab","PfeTabs","PfeAccordion","tag","hasLightDOM","valid","children","node","nodeName","_this2","_isHeader","_isPanel","tagName","toLowerCase","pfeType","combo","Boolean","Number","String","hasValidLightDOM","_build","isIE11","ResizeObserver","parentElement","_resizeObserver","observe","_observer","disconnect","mutationsList","nodes","mutation","type","addedNodes","_addNodes","removedNodes","_removeNodes","el","hasAttribute","match","previousElementSibling","list","_this3","_removeNode","item","hasChildNodes","removeAttribute","setAttribute","connection","id","getAttribute","warn","header","_findConnection","panel","nextElementSibling","remove","textContent","innerHTML","_buildWrapper","template","contentTemplate","rawSets","sets","_buildSets","appendChild","ShadyDOM","outerHTML","all","customElements","whenDefined","then","cascadeProperties","_this4","newEl","document","createElement","pfeId","randomId","fragment","createDocumentFragment","wrapper","trim","templateMarkup","content","cloneNode","_this5","region","idx","section","piece","slot","name","oldVal","newVal","tabAlign","PfeType","build","_this","bind","_mutationHandler","_alignmentHandler","_resizeHandler","_addNode","_updateNode","_copyToId","_updateBreakpoint","MutationObserver","create"],"mappings":"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"}