/*
 * Copyright 2018 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* Palette of Border Colors */
/* Palette of Feedback Colors */
:host {
  --pfe-modal--MaxWidth: 70vw;
  --pfe-modal--MinWidth: 50vw;
  --pfe-modal--MaxWidth--mobile: 94vw;
  --pfe-modal--MaxHeight: 90vh;
  --pfe-modal--Padding: calc(var(--pfe-theme--container-padding, 1rem) * 2) calc(var(--pfe-theme--container-padding, 1rem) * 3.5) calc(var(--pfe-theme--container-padding, 1rem) * 2) calc(var(--pfe-theme--container-padding, 1rem) * 2);
  --pfe-modal__overlay--BackgroundColor: var(--pfe-theme--color--overlay, rgba(45, 45, 45, 0.5));
  --pfe-modal__close--size: calc(var(--pfe-theme--ui--element--size, 20px) - 4px);
  display: block;
  position: relative;
}

@media screen and (max-height: 640px) {
  :host {
    --pfe-modal--Padding: 0 0 0 calc(var(--pfe-theme--container-padding, 1rem) * 2);
  }
}

.pfe-modal__outer {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: fixed;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
  z-index: 99;
  z-index: var(--pfe-theme--zindex--modal, 99);
}

.pfe-modal__outer[hidden] {
  display: none;
}

.pfe-modal__overlay {
  position: fixed;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  background-color: var(--pfe-modal__overlay--BackgroundColor);
  cursor: pointer;
}

.pfe-modal__overlay[hidden] {
  display: none;
}

.pfe-modal__window {
  position: relative;
  max-width: var(--pfe-modal--MaxWidth--mobile);
  min-width: var(--pfe-modal--MinWidth);
  max-height: var(--pfe-modal--MaxHeight);
  margin: 0 auto;
  -webkit-box-shadow: 0  0.1875rem  0.4375rem 0.1875rem rgba(#131313, .13), 0  0.6875rem  1.5rem 1rem rgba(#131313, .12);
          box-shadow: 0  0.1875rem  0.4375rem 0.1875rem rgba(#131313, .13), 0  0.6875rem  1.5rem 1rem rgba(#131313, .12);
  -webkit-box-shadow: var(--pfe-theme--box-shadow--lg, 0  0.1875rem  0.4375rem 0.1875rem rgba(#131313, .13), 0  0.6875rem  1.5rem 1rem rgba(#131313, .12));
          box-shadow: var(--pfe-theme--box-shadow--lg, 0  0.1875rem  0.4375rem 0.1875rem rgba(#131313, .13), 0  0.6875rem  1.5rem 1rem rgba(#131313, .12));
  background-color: #fff;
  background-color: var(--pfe-theme--color--surface--lightest, #fff);
  border-radius: 2px;
  border-radius: var(--pfe-theme--ui--border-radius, 2px);
}

@media screen and (min-width: 640px) {
  .pfe-modal__window {
    max-width: var(--pfe-modal--MaxWidth);
  }
}

.pfe-modal__container {
  position: relative;
  max-height: inherit;
}

.pfe-modal__container[hidden] {
  display: none;
}

.pfe-modal__content {
  overflow-y: auto;
  -ms-scroll-chaining: none;
      overscroll-behavior: contain;
  max-height: var(--pfe-modal--MaxHeight);
  padding: var(--pfe-modal--Padding);
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

@media screen and (max-height: 640px) {
  .pfe-modal__content {
    --pfe-modal--Padding: var(--pfe-theme--container-padding, 1rem) calc(var(--pfe-theme--container-padding, 1rem) * 3) var(--pfe-theme--container-padding, 1rem) var(--pfe-theme--container-padding, 1rem);
  }
}

:host(:not([has_header])) .pfe-modal__content ::slotted(*:nth-child(2)),
:host(:not([has_header])) .pfe-modal__content ::slotted(*:nth-child(1)) {
  margin-top: 0 !important;
}

.pfe-modal__content ::slotted([slot="pfe-modal--header"]) {
  margin-top: 0 !important;
}

.pfe-modal__close {
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;
  position: absolute;
  top: calc(1rem * .25);
  top: calc(var(--pfe-theme--container-padding, 1rem) * .25);
  right: calc(1rem * .25);
  right: calc(var(--pfe-theme--container-padding, 1rem) * .25);
  cursor: pointer;
  line-height: .5;
  padding: 1rem;
  padding: var(--pfe-theme--container-padding, 1rem);
}

@media screen and (min-width: 640px) {
  .pfe-modal__close {
    top: 1rem;
    top: var(--pfe-theme--container-padding, 1rem);
    right: 1rem;
    right: var(--pfe-theme--container-padding, 1rem);
  }
}

@media screen and (max-height: 640px) and (min-width: 640px) {
  .pfe-modal__close {
    top: calc(1rem / 2);
    top: calc(var(--pfe-theme--container-padding, 1rem) / 2);
    right: calc(1rem / 2);
    right: calc(var(--pfe-theme--container-padding, 1rem) / 2);
  }
}

.pfe-modal__close > svg {
  fill: var(--pfe-broadcasted--text);
  height: 20px;
  height: var(--pfe-theme--ui--element--size, 20px);
  width: 20px;
  width: var(--pfe-theme--ui--element--size, 20px);
  height: var(--pfe-modal__close--size);
  width: var(--pfe-modal__close--size);
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3BmZS1zYXNzL3BmZS1zYXNzLnNjc3MiLCJwZmUtbW9kYWwuY3NzIiwiLi4vLi4vcGZlLXNhc3MvdmFyaWFibGVzL19jb2xvcnMuc2NzcyIsInBmZS1tb2RhbC5zY3NzIiwiLi4vLi4vcGZlLXNhc3MvZnVuY3Rpb25zL19mdW5jdGlvbnMuc2NzcyIsIi4uLy4uL3BmZS1zYXNzL21peGlucy9fbWl4aW5zLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VDb0JFO0FDNEhGLDZCQUFBO0FBT0EsK0JBQUE7QUNsSkE7RUFDQywyQkFBc0I7RUFDdEIsMkJBQXNCO0VBQ3RCLG1DQUE4QjtFQUM5Qiw0QkFBdUI7RUFDdkIsdU9BQXFCO0VBQ3JCLDhGQUFzQztFQUN0QywrRUFBeUI7RUFDekIsY0FBYztFQUNkLGtCQUFrQjtBRm1CbkI7O0FFakJHO0VBWEg7SUFZTSwrRUFBcUI7RUZxQnpCO0FBQ0Y7O0FFakJDO0VBQ0Msb0JBQWE7RUFBYixxQkFBYTtFQUFiLG9CQUFhO0VBQWIsYUFBYTtFQUNiLGVBQWU7RUFDZixZQUFZO0VBQ1osV0FBVztFQUNYLE1BQU07RUFDTixPQUFPO0VBQ1AsNEJBQXNCO0VBQXRCLDZCQUFzQjtFQUF0Qiw4QkFBc0I7TUFBdEIsMEJBQXNCO1VBQXRCLHNCQUFzQjtFQUN0Qix5QkFBbUI7RUFBbkIsMkJBQW1CO01BQW5CLHNCQUFtQjtVQUFuQixtQkFBbUI7RUFDbkIsd0JBQXVCO0VBQXZCLCtCQUF1QjtNQUF2QixxQkFBdUI7VUFBdkIsdUJBQXVCO0VBQ3ZCLFdBQVM7RUFBVCw0Q0FBUztBRm9CWDs7QUU5QkU7RUFhQyxhQUFhO0FGcUJoQjs7QUVsQkM7RUFDQyxlQUFlO0VBQ2YsWUFBWTtFQUNaLFdBQVc7RUFDWCxNQUFNO0VBQ04sT0FBTztFQUNQLDREQzJSa0M7RUQxUmxDLGVBQWU7QUZxQmpCOztBRTVCRTtFQVVDLGFBQWE7QUZzQmhCOztBRW5CQztFQUNDLGtCQUFrQjtFQUNsQiw2Q0NrUmtDO0VEalJsQyxxQ0NpUmtDO0VEaFJsQyx1Q0NnUmtDO0VEL1FsQyxjQUFjO0VBQ2Qsc0hDa0xrQztVRGxMbEMsOEdDa0xrQztFRGxMbEMsd0pDa0xrQztVRGxMbEMsZ0pDa0xrQztFRGpMbEMsc0JDd09rQztFRHhPbEMsa0VDd09rQztFRHZPbEMsa0JBQWU7RUFBZix1REFBZTtBRnNCakI7O0FFcEJFO0VBVkQ7SUFXRSxxQ0N5UWlDO0VIalBsQztBQUNGOztBRXRCQztFQUNDLGtCQUFrQjtFQUNsQixtQkFBbUI7QUZ5QnJCOztBRTNCRTtFQUtDLGFBQWE7QUYwQmhCOztBRXRCQztFQUNDLGdCQUFnQjtFQUNoQix5QkFBNEI7TUFBNUIsNEJBQTRCO0VBQzVCLHVDQzBQa0M7RUR6UGxDLGtDQ3lQa0M7RUR4UGxDLDhCQUFzQjtVQUF0QixzQkFBc0I7QUZ5QnhCOztBRXZCRTtFQVBEO0lBUUUsdU1BQXFCO0VGMkJ0QjtBQUNGOztBRXpCRTs7RUFLRSx3QkFBd0I7QUZ5QjVCOztBRXpDRTtFQXFCQyx3QkFBd0I7QUZ3QjNCOztBRXBCQztFRXhFQyw2QkFBNkI7RUFDN0IsWUFBWTtFQUNaLFNBQVM7RUFDVCxVQUFVO0VGdUVWLGtCQUFrQjtFQUNsQixxQkFBOEM7RUFBOUMsMERBQThDO0VBQzlDLHVCQUFnRDtFQUFoRCw0REFBZ0Q7RUFDaEQsZUFBZTtFQUNmLGVBQWU7RUFDZixhQ2lJa0M7RURqSWxDLGtEQ2lJa0M7QUh2R3BDOztBRXhCRTtFQVREO0lBVUUsU0FBSztJQUFMLDhDQUFLO0lBQ0wsV0FBTztJQUFQLGdEQUFPO0VGNEJSO0FBQ0Y7O0FFMUJFO0VBZEQ7SUFlRSxtQkFBNEM7SUFBNUMsd0RBQTRDO0lBQzVDLHFCQUE4QztJQUE5QywwREFBOEM7RUY4Qi9DO0FBQ0Y7O0FFL0NFO0VBb0JDLGtDQ21PaUY7RURsT2pGLFlDbUhpQztFRG5IakMsaURDbUhpQztFRGxIakMsV0NrSGlDO0VEbEhqQyxnRENrSGlDO0VEakhqQyxxQ0M2TWlDO0VENU1qQyxvQ0M0TWlDO0FIN0twQyIsImZpbGUiOiJwZmUtbW9kYWwuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAyMDE4IFJlZCBIYXQsIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG5cbi8vXG4vLyBQRkVsZW1lbnRzIFNBU1MgLyBTdHlsZXNcbi8vIFRoaXMgd2lsbCBubyBsb25nZXIgYmUgXCJSSFwiIGZvciBcIlJlZCBIYXRcIiwgYnV0IGZvciBcIlBGRWxlbWVudFwiXG4vL1xuXG4kcmVwbzogcGZlICFkZWZhdWx0O1xuJHBmZS1nbG9iYWwtLWZvbnQtc2l6ZS1yb290OiAxNiAhZGVmYXVsdDsgLy8gcm9vdCBmb3IgZm9udHMgYW5kIGV2ZXJ5dGhpbmcgZWxzZVxuXG5AaW1wb3J0IFwiX2Z1bmN0aW9uc1wiO1xuQGltcG9ydCBcIl92YXJpYWJsZXNcIjtcbkBpbXBvcnQgXCJfbWl4aW5zXCI7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMTggUmVkIEhhdCwgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbi8qIFBhbGV0dGUgb2YgQm9yZGVyIENvbG9ycyAqL1xuLyogUGFsZXR0ZSBvZiBGZWVkYmFjayBDb2xvcnMgKi9cbjpob3N0IHtcbiAgLS1wZmUtbW9kYWwtLU1heFdpZHRoOiA3MHZ3O1xuICAtLXBmZS1tb2RhbC0tTWluV2lkdGg6IDUwdnc7XG4gIC0tcGZlLW1vZGFsLS1NYXhXaWR0aC0tbW9iaWxlOiA5NHZ3O1xuICAtLXBmZS1tb2RhbC0tTWF4SGVpZ2h0OiA5MHZoO1xuICAtLXBmZS1tb2RhbC0tUGFkZGluZzogY2FsYyh2YXIoLS1wZmUtdGhlbWUtLWNvbnRhaW5lci1wYWRkaW5nLCAxcmVtKSAqIDIpIGNhbGModmFyKC0tcGZlLXRoZW1lLS1jb250YWluZXItcGFkZGluZywgMXJlbSkgKiAzLjUpIGNhbGModmFyKC0tcGZlLXRoZW1lLS1jb250YWluZXItcGFkZGluZywgMXJlbSkgKiAyKSBjYWxjKHZhcigtLXBmZS10aGVtZS0tY29udGFpbmVyLXBhZGRpbmcsIDFyZW0pICogMik7XG4gIC0tcGZlLW1vZGFsX19vdmVybGF5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmZS10aGVtZS0tY29sb3ItLW92ZXJsYXksIHJnYmEoNDUsIDQ1LCA0NSwgMC41KSk7XG4gIC0tcGZlLW1vZGFsX19jbG9zZS0tc2l6ZTogY2FsYyh2YXIoLS1wZmUtdGhlbWUtLXVpLS1lbGVtZW50LS1zaXplLCAyMHB4KSAtIDRweCk7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtaGVpZ2h0OiA2NDBweCkge1xuICA6aG9zdCB7XG4gICAgLS1wZmUtbW9kYWwtLVBhZGRpbmc6IDAgMCAwIGNhbGModmFyKC0tcGZlLXRoZW1lLS1jb250YWluZXItcGFkZGluZywgMXJlbSkgKiAyKTtcbiAgfVxufVxuXG4ucGZlLW1vZGFsX19vdXRlciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgei1pbmRleDogdmFyKC0tcGZlLXRoZW1lLS16aW5kZXgtLW1vZGFsLCA5OSk7XG59XG5cbi5wZmUtbW9kYWxfX291dGVyW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4ucGZlLW1vZGFsX19vdmVybGF5IHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXBmZS1tb2RhbF9fb3ZlcmxheS0tQmFja2dyb3VuZENvbG9yKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ucGZlLW1vZGFsX19vdmVybGF5W2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4ucGZlLW1vZGFsX193aW5kb3cge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1heC13aWR0aDogdmFyKC0tcGZlLW1vZGFsLS1NYXhXaWR0aC0tbW9iaWxlKTtcbiAgbWluLXdpZHRoOiB2YXIoLS1wZmUtbW9kYWwtLU1pbldpZHRoKTtcbiAgbWF4LWhlaWdodDogdmFyKC0tcGZlLW1vZGFsLS1NYXhIZWlnaHQpO1xuICBtYXJnaW46IDAgYXV0bztcbiAgYm94LXNoYWRvdzogdmFyKC0tcGZlLXRoZW1lLS1ib3gtc2hhZG93LS1sZywgMCAgMC4xODc1cmVtICAwLjQzNzVyZW0gMC4xODc1cmVtIHJnYmEoIzEzMTMxMywgLjEzKSwgMCAgMC42ODc1cmVtICAxLjVyZW0gMXJlbSByZ2JhKCMxMzEzMTMsIC4xMikpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wZmUtdGhlbWUtLWNvbG9yLS1zdXJmYWNlLS1saWdodGVzdCwgI2ZmZik7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLXBmZS10aGVtZS0tdWktLWJvcmRlci1yYWRpdXMsIDJweCk7XG59XG5cbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0MHB4KSB7XG4gIC5wZmUtbW9kYWxfX3dpbmRvdyB7XG4gICAgbWF4LXdpZHRoOiB2YXIoLS1wZmUtbW9kYWwtLU1heFdpZHRoKTtcbiAgfVxufVxuXG4ucGZlLW1vZGFsX19jb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1heC1oZWlnaHQ6IGluaGVyaXQ7XG59XG5cbi5wZmUtbW9kYWxfX2NvbnRhaW5lcltoaWRkZW5dIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLnBmZS1tb2RhbF9fY29udGVudCB7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIG92ZXJzY3JvbGwtYmVoYXZpb3I6IGNvbnRhaW47XG4gIG1heC1oZWlnaHQ6IHZhcigtLXBmZS1tb2RhbC0tTWF4SGVpZ2h0KTtcbiAgcGFkZGluZzogdmFyKC0tcGZlLW1vZGFsLS1QYWRkaW5nKTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC1oZWlnaHQ6IDY0MHB4KSB7XG4gIC5wZmUtbW9kYWxfX2NvbnRlbnQge1xuICAgIC0tcGZlLW1vZGFsLS1QYWRkaW5nOiB2YXIoLS1wZmUtdGhlbWUtLWNvbnRhaW5lci1wYWRkaW5nLCAxcmVtKSBjYWxjKHZhcigtLXBmZS10aGVtZS0tY29udGFpbmVyLXBhZGRpbmcsIDFyZW0pICogMykgdmFyKC0tcGZlLXRoZW1lLS1jb250YWluZXItcGFkZGluZywgMXJlbSkgdmFyKC0tcGZlLXRoZW1lLS1jb250YWluZXItcGFkZGluZywgMXJlbSk7XG4gIH1cbn1cblxuOmhvc3QoOm5vdChbaGFzX2hlYWRlcl0pKSAucGZlLW1vZGFsX19jb250ZW50IDo6c2xvdHRlZCgqOm50aC1jaGlsZCgyKSksXG46aG9zdCg6bm90KFtoYXNfaGVhZGVyXSkpIC5wZmUtbW9kYWxfX2NvbnRlbnQgOjpzbG90dGVkKCo6bnRoLWNoaWxkKDEpKSB7XG4gIG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcbn1cblxuLnBmZS1tb2RhbF9fY29udGVudCA6OnNsb3R0ZWQoW3Nsb3Q9XCJwZmUtbW9kYWwtLWhlYWRlclwiXSkge1xuICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7XG59XG5cbi5wZmUtbW9kYWxfX2Nsb3NlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogbm9uZTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogY2FsYyh2YXIoLS1wZmUtdGhlbWUtLWNvbnRhaW5lci1wYWRkaW5nLCAxcmVtKSAqIC4yNSk7XG4gIHJpZ2h0OiBjYWxjKHZhcigtLXBmZS10aGVtZS0tY29udGFpbmVyLXBhZGRpbmcsIDFyZW0pICogLjI1KTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBsaW5lLWhlaWdodDogLjU7XG4gIHBhZGRpbmc6IHZhcigtLXBmZS10aGVtZS0tY29udGFpbmVyLXBhZGRpbmcsIDFyZW0pO1xufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NDBweCkge1xuICAucGZlLW1vZGFsX19jbG9zZSB7XG4gICAgdG9wOiB2YXIoLS1wZmUtdGhlbWUtLWNvbnRhaW5lci1wYWRkaW5nLCAxcmVtKTtcbiAgICByaWdodDogdmFyKC0tcGZlLXRoZW1lLS1jb250YWluZXItcGFkZGluZywgMXJlbSk7XG4gIH1cbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC1oZWlnaHQ6IDY0MHB4KSBhbmQgKG1pbi13aWR0aDogNjQwcHgpIHtcbiAgLnBmZS1tb2RhbF9fY2xvc2Uge1xuICAgIHRvcDogY2FsYyh2YXIoLS1wZmUtdGhlbWUtLWNvbnRhaW5lci1wYWRkaW5nLCAxcmVtKSAvIDIpO1xuICAgIHJpZ2h0OiBjYWxjKHZhcigtLXBmZS10aGVtZS0tY29udGFpbmVyLXBhZGRpbmcsIDFyZW0pIC8gMik7XG4gIH1cbn1cblxuLnBmZS1tb2RhbF9fY2xvc2UgPiBzdmcge1xuICBmaWxsOiB2YXIoLS1wZmUtYnJvYWRjYXN0ZWQtLXRleHQpO1xuICBoZWlnaHQ6IHZhcigtLXBmZS10aGVtZS0tdWktLWVsZW1lbnQtLXNpemUsIDIwcHgpO1xuICB3aWR0aDogdmFyKC0tcGZlLXRoZW1lLS11aS0tZWxlbWVudC0tc2l6ZSwgMjBweCk7XG4gIGhlaWdodDogdmFyKC0tcGZlLW1vZGFsX19jbG9zZS0tc2l6ZSk7XG4gIHdpZHRoOiB2YXIoLS1wZmUtbW9kYWxfX2Nsb3NlLS1zaXplKTtcbn1cbiIsIi8vIFRPRE86IFJlY29uY2lsZSB3aXRoIF9tYXBzLnNjc3Mgc28gdGhlcmUncyBvbmx5IG9uZSBmaWxlIGFuZCBubyBtaWRkbGVtYW4uXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ09MT1JTIGZvciBQRkVsZW1lbnRzXG4vL1xuLy8gQ29udGV4dC1iYXNlZCBjb2xvcnMgdG8gYmUgdXNlZCBpbiBzdHlsaW5nIFBGRWxlbWVudHMgYWxvbmcgd2l0aCBfbWFwcy5zY3NzXG4vLyBAcmVxdWlyZXMgX2NyYXlvbGEuc2Nzc1xuLy9cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQmFzZSBUZXh0IENvbG9yc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiRwZmUtY29sb3ItLXRleHQ6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1ncmF5LWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS10ZXh0LS1vbi1kYXJrOiAgICAgICAgICAgICAgICAgICAgICAkcGZlLWNvbG9yLS13aGl0ZSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXRleHQtLW9uLXNhdHVyYXRlZDogICAgICAgICAgICAgICAgICRwZmUtY29sb3ItLXdoaXRlICFkZWZhdWx0O1xuXG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQmFzZSBVSSBMaW5rIENvbG9ycyB0byBiZSB1c2VkIGJlbG93XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuJHBmZS1jb2xvci0tdWktbGluazogICAgICAgICAgICAgICAgICAgICAgICAgICAgIzA2YyAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWxpbmstLXZpc2l0ZWQ6ICAgICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1wdXJwbGUgIWRlZmF1bHQ7ICAgICAgICAgICAgIC8vIFdhcyAjNzU1MWE2XG4kcGZlLWNvbG9yLS11aS1saW5rLS1ob3ZlcjogICAgICAgICAgICAgICAgICAgICBkYXJrZW4oJHBmZS1jb2xvci0tdWktbGluaywgMjAlKSAhZGVmYXVsdDsgLy8gV2FzICMwMDQwODBcbiRwZmUtY29sb3ItLXVpLWxpbmstLWZvY3VzOiAgICAgICAgICAgICAgICAgICAgIGRhcmtlbigkcGZlLWNvbG9yLS11aS1saW5rLCAyMCUpICFkZWZhdWx0OyAvLyBXYXMgIzAwNDA4MFxuXG4kcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrOiAgICAgICAgICAgICAgICAgICBsaWdodGVuKCRwZmUtY29sb3ItLXVpLWxpbmssIDQwJSkgIWRlZmF1bHQ7ICAgICAgICAgIC8vIFdhcyAjOTdkYWZmXG4kcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrLS12aXNpdGVkOiAgICAgICAgICBsaWdodGVuKCRwZmUtY29sb3ItLXVpLWxpbmstLXZpc2l0ZWQsIDMwJSkgIWRlZmF1bHQ7IC8vIFdhcyAjZDhjMGZmXG4kcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrLS1ob3ZlcjogICAgICAgICAgICBsaWdodGVuKCRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmssIDEwJSkgIWRlZmF1bHQ7IC8vIFdhcyAjYzBlY2ZmXG4kcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrLS1mb2N1czogICAgICAgICAgICBsaWdodGVuKCRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmssIDEwJSkgIWRlZmF1bHQ7IC8vIFdhcyAjYzBlY2ZmXG5cbiRwZmUtY29sb3ItLXVpLWxpbmstLW9uLXNhdHVyYXRlZDogICAgICAgICAgICAgICRwZmUtY29sb3ItLXdoaXRlOyAgICAgICAgICAgICAgIC8vIFdhcyAjOTdkYWZmXG4kcGZlLWNvbG9yLS11aS1saW5rLS1vbi1zYXR1cmF0ZWQtLXZpc2l0ZWQ6ICAgICBsaWdodGVuKCRwZmUtY29sb3ItLXVpLWxpbmstLXZpc2l0ZWQsIDMwJSkgIWRlZmF1bHQ7ICAgICAgLy8gV2FzICNkOGMwZmZcbiRwZmUtY29sb3ItLXVpLWxpbmstLW9uLXNhdHVyYXRlZC0taG92ZXI6ICAgICAgIGxpZ2h0ZW4oJHBmZS1jb2xvci0tdWktbGluay0tb24tc2F0dXJhdGVkLCAxMCUpICFkZWZhdWx0OyAvLyBXYXMgI2MwZWNmZlxuJHBmZS1jb2xvci0tdWktbGluay0tb24tc2F0dXJhdGVkLS1mb2N1czogICAgICAgbGlnaHRlbigkcGZlLWNvbG9yLS11aS1saW5rLS1vbi1zYXR1cmF0ZWQsIDEwJSkgIWRlZmF1bHQ7IC8vIFdhcyAjYzBlY2ZmXG5cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBCYXNlIFVJIENvbG9ycyBmb3IgQnV0dG9ucywgQ1RBcywgYW5kIGFjdGlvbmFibGUgVUkgZWxlbWVudHNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4kcGZlLWNvbG9yLS11aS1iYXNlOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGZlbGVtZW50cy0tYmx1ZSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWJhc2UtLWhvdmVyOiAgICAgICAgICAgICAgICAgICAgIGRhcmtlbigkcGZlbGVtZW50cy0tYmx1ZSwgMjAlKSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWJhc2UtLWZvY3VzOiAgICAgICAgICAgICAgICAgICAgIGRhcmtlbigkcGZlbGVtZW50cy0tYmx1ZSwgMjAlKSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWJhc2UtLXZpc2l0ZWQ6ICAgICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1ibHVlICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktYmFzZS0tdGV4dDogICAgICAgICAgICAgICAgICAgICAgJHBmZS1jb2xvci0tdGV4dC0tb24tZGFyayAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWJhc2UtLXRleHQtLWhvdmVyOiAgICAgICAgICAgICAgICRwZmUtY29sb3ItLXRleHQtLW9uLWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1iYXNlLS10ZXh0LS1mb2N1czogICAgICAgICAgICAgICAkcGZlLWNvbG9yLS10ZXh0LS1vbi1kYXJrICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktYmFzZS0tdGV4dC0tdmlzaXRlZDogICAgICAgICAgICAgJHBmZS1jb2xvci0tdGV4dC0tb24tZGFyayAhZGVmYXVsdDtcblxuJHBmZS1jb2xvci0tdWktY29tcGxlbWVudDogICAgICAgICAgICAgICAgICAgICAgJHBmZS1jb2xvci0tZ3JheS04MDAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1jb21wbGVtZW50LS1ob3ZlcjogICAgICAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTEwMDAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1jb21wbGVtZW50LS1mb2N1czogICAgICAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTEwMDAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1jb21wbGVtZW50LS12aXNpdGVkOiAgICAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTgwMCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWNvbXBsZW1lbnQtLXRleHQ6ICAgICAgICAgICAgICAgICRwZmUtY29sb3ItLXRleHQtLW9uLWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1jb21wbGVtZW50LS10ZXh0LS1ob3ZlcjogICAgICAgICAkcGZlLWNvbG9yLS10ZXh0LS1vbi1kYXJrICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktY29tcGxlbWVudC0tdGV4dC0tZm9jdXM6ICAgICAgICAgJHBmZS1jb2xvci0tdGV4dC0tb24tZGFyayAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWNvbXBsZW1lbnQtLXRleHQtLXZpc2l0ZWQ6ICAgICAgICRwZmUtY29sb3ItLXRleHQtLW9uLWRhcmsgIWRlZmF1bHQ7XG5cbiRwZmUtY29sb3ItLXVpLWFjY2VudDogICAgICAgICAgICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1vcmFuZ2UgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1hY2NlbnQtLWhvdmVyOiAgICAgICAgICAgICAgICAgICBkYXJrZW4oJHBmZWxlbWVudHMtLW9yYW5nZSwgMjAlKSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWFjY2VudC0tZm9jdXM6ICAgICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1vcmFuZ2UgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1hY2NlbnQtLXZpc2l0ZWQ6ICAgICAgICAgICAgICAgICAkcGZlbGVtZW50cy0tb3JhbmdlICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktYWNjZW50LS10ZXh0OiAgICAgICAgICAgICAgICAgICAgJHBmZS1jb2xvci0tdGV4dC0tb24tZGFyayAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWFjY2VudC0tdGV4dC0taG92ZXI6ICAgICAgICAgICAgICRwZmUtY29sb3ItLXRleHQtLW9uLWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1hY2NlbnQtLXRleHQtLWZvY3VzOiAgICAgICAgICAgICAkcGZlLWNvbG9yLS10ZXh0LS1vbi1kYXJrICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktYWNjZW50LS10ZXh0LS12aXNpdGVkOiAgICAgICAgICAgJHBmZS1jb2xvci0tdGV4dC0tb24tZGFyayAhZGVmYXVsdDtcblxuJHBmZS1jb2xvci0tdWktZGlzYWJsZWQ6ICAgICAgICAgICAgICAgICAgICAgICAgJHBmZWxlbWVudHMtLWdyYXktbGlnaHQgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1kaXNhYmxlZC0taG92ZXI6ICAgICAgICAgICAgICAgICAkcGZlbGVtZW50cy0tZ3JheS1saWdodCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWRpc2FibGVkLS1mb2N1czogICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1ncmF5LWxpZ2h0ICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktZGlzYWJsZWQtLXZpc2l0ZWQ6ICAgICAgICAgICAgICAgJHBmZWxlbWVudHMtLWdyYXktbGlnaHQgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1kaXNhYmxlZC0tdGV4dDogICAgICAgICAgICAgICAgICAkcGZlbGVtZW50cy0tZ3JheSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXVpLWRpc2FibGVkLS10ZXh0LS1ob3ZlcjogICAgICAgICAgICRwZmVsZW1lbnRzLS1ncmF5ICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tdWktZGlzYWJsZWQtLXRleHQtLWZvY3VzOiAgICAgICAgICAgJHBmZWxlbWVudHMtLWdyYXkgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS11aS1kaXNhYmxlZC0tdGV4dC0tdmlzaXRlZDogICAgICAgICAkcGZlbGVtZW50cy0tZ3JheSAhZGVmYXVsdDtcblxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJhc2UgU3VyZmFjZSBDb2xvcnMgZm9yIENvbnRhaW5lciBlbGVtZW50c1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIExpZ2h0ZXN0IGdyb3VwXG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1saWdodGVzdDogICAgICAgICAgICAgICAgICAkcGZlLWNvbG9yLS13aGl0ZSAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWxpZ2h0ZXN0LS10ZXh0OiAgICAgICAgICAgICRwZmUtY29sb3ItLXRleHQgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1saWdodGVzdC0tbGluazogICAgICAgICAgICAkcGZlLWNvbG9yLS11aS1saW5rICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tbGlnaHRlc3QtLWxpbmstLXZpc2l0ZWQ6ICAgJHBmZS1jb2xvci0tdWktbGluay0tdmlzaXRlZCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWxpZ2h0ZXN0LS1saW5rLS1ob3ZlcjogICAgICRwZmUtY29sb3ItLXVpLWxpbmstLWhvdmVyICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tbGlnaHRlc3QtLWxpbmstLWZvY3VzOiAgICAgJHBmZS1jb2xvci0tdWktbGluay0tZm9jdXMgIWRlZmF1bHQ7XG5cbi8vIExpZ2h0ZXIgZ3JvdXBcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWxpZ2h0ZXI6ICAgICAgICAgICAgICAgICAgICRwZmUtY29sb3ItLWdyYXktMTAwICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tbGlnaHRlci0tdGV4dDogICAgICAgICAgICAgJHBmZS1jb2xvci0tdGV4dCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWxpZ2h0ZXItLWxpbms6ICAgICAgICAgICAgICRwZmUtY29sb3ItLXVpLWxpbmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1saWdodGVyLS1saW5rLS12aXNpdGVkOiAgICAkcGZlLWNvbG9yLS11aS1saW5rLS12aXNpdGVkICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tbGlnaHRlci0tbGluay0taG92ZXI6ICAgICAgJHBmZS1jb2xvci0tdWktbGluay0taG92ZXIgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1saWdodGVyLS1saW5rLS1mb2N1czogICAgICAkcGZlLWNvbG9yLS11aS1saW5rLS1mb2N1cyAhZGVmYXVsdDtcblxuLy8gQmFzZSBncm91cFxuJHBmZS1jb2xvci0tc3VyZmFjZS0tYmFzZTogICAgICAgICAgICAgICAgICAgICAgJHBmZS1jb2xvci0tZ3JheS0yMDAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1iYXNlLS10ZXh0OiAgICAgICAgICAgICAgICAkcGZlLWNvbG9yLS10ZXh0ICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tYmFzZS0tbGluazogICAgICAgICAgICAgICAgIzAwNTM4YyAhZGVmYXVsdDsgIC8vIENvbnRyYXN0IHdpdGggJHBmZS1jb2xvci0tdWktbGluayBkb2Vzbid0IG1lZXQgV0NBRzIgQUFcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWJhc2UtLWxpbmstLXZpc2l0ZWQ6ICAgICAgICM3NTUxYTYgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1iYXNlLS1saW5rLS1ob3ZlcjogICAgICAgICAjMDAzMDViICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tYmFzZS0tbGluay0tZm9jdXM6ICAgICAgICAgIzAwMzA1YiAhZGVmYXVsdDtcblxuLy8gRGFya2VyIGdyb3VwXG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1kYXJrZXI6ICAgICAgICAgICAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTgwMCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWRhcmtlci0tdGV4dDogICAgICAgICAgICAgICRwZmUtY29sb3ItLXRleHQtLW9uLWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1kYXJrZXItLWxpbms6ICAgICAgICAgICAgICAkcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tZGFya2VyLS1saW5rLS12aXNpdGVkOiAgICAgJHBmZS1jb2xvci0tdWktbGluay0tb24tZGFyay0tdmlzaXRlZCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWRhcmtlci0tbGluay0taG92ZXI6ICAgICAgICRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmstLWhvdmVyICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tZGFya2VyLS1saW5rLS1mb2N1czogICAgICAgJHBmZS1jb2xvci0tdWktbGluay0tb24tZGFyay0tZm9jdXMgIWRlZmF1bHQ7XG5cbi8vIERhcmtlc3QgZ3JvdXBcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWRhcmtlc3Q6ICAgICAgICAgICAgICAgICAgICRwZmUtY29sb3ItLWdyYXktMTAwMCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWRhcmtlc3QtLXRleHQ6ICAgICAgICAgICAgICRwZmUtY29sb3ItLXRleHQtLW9uLWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1kYXJrZXN0LS1saW5rOiAgICAgICAgICAgICAkcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tZGFya2VzdC0tbGluay0tdmlzaXRlZDogICAgJHBmZS1jb2xvci0tdWktbGluay0tb24tZGFyay0tdmlzaXRlZCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWRhcmtlc3QtLWxpbmstLWhvdmVyOiAgICAgICRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmstLWhvdmVyICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tZGFya2VzdC0tbGluay0tZm9jdXM6ICAgICAgJHBmZS1jb2xvci0tdWktbGluay0tb24tZGFyay0tZm9jdXMgIWRlZmF1bHQ7XG5cbi8vIENvbXBsZW1lbnQgZ3JvdXBcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWNvbXBsZW1lbnQ6ICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1ibHVlO1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tY29tcGxlbWVudC0tdGV4dDogICAgICAgICAgJHBmZS1jb2xvci0tdGV4dC0tb24tZGFyayAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWNvbXBsZW1lbnQtLWxpbms6ICAgICAgICAgICRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmsgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1jb21wbGVtZW50LS1saW5rLS12aXNpdGVkOiAkcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrLS12aXNpdGVkICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tY29tcGxlbWVudC0tbGluay0taG92ZXI6ICAgJHBmZS1jb2xvci0tdWktbGluay0tb24tZGFyay0taG92ZXIgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1jb21wbGVtZW50LS1saW5rLS1mb2N1czogICAkcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrLS1mb2N1cyAhZGVmYXVsdDtcblxuXG4vLyBBY2NlbnQgZ3JvdXBcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWFjY2VudDogICAgICAgICAgICAgICAgICAgICRwZmVsZW1lbnRzLS1vcmFuZ2U7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1hY2NlbnQtLXRleHQ6ICAgICAgICAgICAgICAkcGZlLWNvbG9yLS10ZXh0LS1vbi1kYXJrICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tYWNjZW50LS1saW5rOiAgICAgICAgICAgICAgJHBmZS1jb2xvci0tdWktbGluay0tb24tZGFyayAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWFjY2VudC0tbGluay0tdmlzaXRlZDogICAgICRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmstLXZpc2l0ZWQgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1hY2NlbnQtLWxpbmstLWhvdmVyOiAgICAgICAkcGZlLWNvbG9yLS11aS1saW5rLS1vbi1kYXJrLS1ob3ZlciAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWFjY2VudC0tbGluay0tZm9jdXM6ICAgICAgICRwZmUtY29sb3ItLXVpLWxpbmstLW9uLWRhcmstLWZvY3VzICFkZWZhdWx0O1xuXG5cblxuLyogUGFsZXR0ZSBvZiBCb3JkZXIgQ29sb3JzICovXG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1ib3JkZXI6ICAgICAgICAgICAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTIwMCAhZGVmYXVsdDsgIC8vIFdhcyAjY2NjXG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1ib3JkZXItLWxpZ2h0ZXN0OiAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTEwMCAhZGVmYXVsdDsgIC8vIFdhcyAjZTdlN2U3XG4kcGZlLWNvbG9yLS1zdXJmYWNlLS1ib3JkZXItLWxpZ2h0ZXI6ICAgICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTEwMCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLXN1cmZhY2UtLWJvcmRlci0tZGFya2VzdDogICAgICAgICAgICRwZmUtY29sb3ItLWdyYXktODAwICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tc3VyZmFjZS0tYm9yZGVyLS1kYXJrZXI6ICAgICAgICAgICAgJHBmZS1jb2xvci0tZ3JheS0zMDAgIWRlZmF1bHQ7XG5cbi8qIFBhbGV0dGUgb2YgRmVlZGJhY2sgQ29sb3JzICovXG4kcGZlLWNvbG9yLS1mZWVkYmFjay0tY3JpdGljYWw6ICAgICAgICAgICAgICAgICAkcGZlLWNvbG9yLS1yZWQtNjAwICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tZmVlZGJhY2stLWNyaXRpY2FsLS1saWdodGVzdDogICAgICAgJHBmZS1jb2xvci0tcmVkLTUwICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tZmVlZGJhY2stLWNyaXRpY2FsLS1kYXJrZXN0OiAgICAgICAgJHBmZS1jb2xvci0tcmVkLTgwMCAhZGVmYXVsdDtcblxuJHBmZS1jb2xvci0tZmVlZGJhY2stLWltcG9ydGFudDogICAgICAgICAgICAgICAgJHBmZS1jb2xvci0tb3JhbmdlLTUwMCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLWZlZWRiYWNrLS1pbXBvcnRhbnQtLWxpZ2h0ZXN0OiAgICAgICRwZmUtY29sb3ItLW9yYW5nZS01MCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLWZlZWRiYWNrLS1pbXBvcnRhbnQtLWRhcmtlc3Q6ICAgICAgICRwZmUtY29sb3ItLW9yYW5nZS03MDAgIWRlZmF1bHQ7XG5cbiRwZmUtY29sb3ItLWZlZWRiYWNrLS1tb2RlcmF0ZTogICAgICAgICAgICAgICAgICRwZmUtY29sb3ItLXllbGxvdy00MDAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1mZWVkYmFjay0tbW9kZXJhdGUtLWxpZ2h0ZXN0OiAgICAgICAkcGZlLWNvbG9yLS15ZWxsb3ctNTAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1mZWVkYmFjay0tbW9kZXJhdGUtLWRhcmtlc3Q6ICAgICAgICAkcGZlLWNvbG9yLS15ZWxsb3ctNzAwICFkZWZhdWx0O1xuXG4kcGZlLWNvbG9yLS1mZWVkYmFjay0tc3VjY2VzczogICAgICAgICAgICAgICAgICAjMmU3ZDMyICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tZmVlZGJhY2stLXN1Y2Nlc3MtLWxpZ2h0ZXN0OiAgICAgICAgJHBmZS1jb2xvci0tZ3JlZW4tNTAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1mZWVkYmFjay0tc3VjY2Vzcy0tZGFya2VzdDogICAgICAgICAjMWI1ZTIwICFkZWZhdWx0O1xuXG4kcGZlLWNvbG9yLS1mZWVkYmFjay0taW5mbzogICAgICAgICAgICAgICAgICAgICAjMDI3N2JkICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tZmVlZGJhY2stLWluZm8tLWxpZ2h0ZXN0OiAgICAgICAgICAgJHBmZS1jb2xvci0tYmx1ZS01MCAhZGVmYXVsdDtcbiRwZmUtY29sb3ItLWZlZWRiYWNrLS1pbmZvLS1kYXJrZXN0OiAgICAgICAgICAgICMwMTU3OWIgIWRlZmF1bHQ7XG5cbiRwZmUtY29sb3ItLWZlZWRiYWNrLS1kZWZhdWx0OiAgICAgICAgICAgICAgICAgICRwZmUtY29sb3ItLWdyYXktNzAwICFkZWZhdWx0O1xuJHBmZS1jb2xvci0tZmVlZGJhY2stLWRlZmF1bHQtLWxpZ2h0ZXN0OiAgICAgICAgJHBmZS1jb2xvci0tZ3JheS0xMDAgIWRlZmF1bHQ7XG4kcGZlLWNvbG9yLS1mZWVkYmFjay0tZGVmYXVsdC0tZGFya2VzdDogICAgICAgICAkcGZlLWNvbG9yLS1ncmF5LTgwMCAhZGVmYXVsdDtcbiIsIkBpbXBvcnQgXCIuLi8uLi9wZmUtc2Fzcy9wZmUtc2Fzc1wiO1xuJExPQ0FMOiBtb2RhbDtcblxuJHBmZS1tb2RhbC0tYnJlYWtwb2ludC0tbWVkaXVtOiA2NDBweDtcblxuOmhvc3Qge1xuXHQtLXBmZS1tb2RhbC0tTWF4V2lkdGg6IDcwdnc7XG5cdC0tcGZlLW1vZGFsLS1NaW5XaWR0aDogNTB2dztcblx0LS1wZmUtbW9kYWwtLU1heFdpZHRoLS1tb2JpbGU6IDk0dnc7XG5cdC0tcGZlLW1vZGFsLS1NYXhIZWlnaHQ6IDkwdmg7XG5cdC0tcGZlLW1vZGFsLS1QYWRkaW5nOiBjYWxjKCN7cGZlLXZhcihjb250YWluZXItcGFkZGluZyl9ICogMikgY2FsYygje3BmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpfSAqIDMuNSkgY2FsYygje3BmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpfSAqIDIpIGNhbGMoI3twZmUtdmFyKGNvbnRhaW5lci1wYWRkaW5nKX0gKiAyKTtcblx0LS1wZmUtbW9kYWxfX292ZXJsYXktLUJhY2tncm91bmRDb2xvcjogI3twZmUtY29sb3Iob3ZlcmxheSl9O1xuXHQtLXBmZS1tb2RhbF9fY2xvc2UtLXNpemU6IGNhbGMoI3twZmUtdmFyKHVpLS1lbGVtZW50LS1zaXplKX0gLSA0cHgpO1xuXHRkaXNwbGF5OiBibG9jaztcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LWhlaWdodDogJHBmZS1tb2RhbC0tYnJlYWtwb2ludC0tbWVkaXVtKSB7XG4gICAgICAtLXBmZS1tb2RhbC0tUGFkZGluZzogMCAwIDAgY2FsYygje3BmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpfSAqIDIpO1xuICAgfVxufVxuXG4ucGZlLW1vZGFsIHtcblx0Jl9fb3V0ZXIge1xuXHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0cG9zaXRpb246IGZpeGVkO1xuXHRcdGhlaWdodDogMTAwJTtcblx0XHR3aWR0aDogMTAwJTtcblx0XHR0b3A6IDA7XG5cdFx0bGVmdDogMDtcblx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0ei1pbmRleDogI3twZmUtdmFyKCRjc3N2YXI6IG1vZGFsLCAkY2F0ZWdvcnk6IHppbmRleCwgJG1hcDogJHotaW5kZXgpfTtcblxuXHRcdCZbaGlkZGVuXSB7XG5cdFx0XHRkaXNwbGF5OiBub25lO1xuXHRcdH1cblx0fVxuXHQmX19vdmVybGF5IHtcblx0XHRwb3NpdGlvbjogZml4ZWQ7XG5cdFx0aGVpZ2h0OiAxMDAlO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdHRvcDogMDtcblx0XHRsZWZ0OiAwO1xuXHRcdGJhY2tncm91bmQtY29sb3I6IHBmZS1sb2NhbCgkY3NzdmFyOiBCYWNrZ3JvdW5kQ29sb3IsICRyZWdpb246IG92ZXJsYXkpO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblxuXHRcdCZbaGlkZGVuXSB7XG5cdFx0XHRkaXNwbGF5OiBub25lO1xuXHRcdH1cblx0fVxuXHQmX193aW5kb3cge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRtYXgtd2lkdGg6IHBmZS1sb2NhbChNYXhXaWR0aC0tbW9iaWxlKTtcblx0XHRtaW4td2lkdGg6IHBmZS1sb2NhbChNaW5XaWR0aCk7XG5cdFx0bWF4LWhlaWdodDogcGZlLWxvY2FsKE1heEhlaWdodCk7XG5cdFx0bWFyZ2luOiAwIGF1dG87XG5cdFx0Ym94LXNoYWRvdzogcGZlLXZhcihib3gtc2hhZG93LS1sZyk7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogcGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXN0KTtcblx0XHRib3JkZXItcmFkaXVzOiAje3BmZS12YXIodWktLWJvcmRlci1yYWRpdXMpfTtcblxuXHRcdEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRwZmUtbW9kYWwtLWJyZWFrcG9pbnQtLW1lZGl1bSkge1xuXHRcdFx0bWF4LXdpZHRoOiBwZmUtbG9jYWwoTWF4V2lkdGgpO1xuXHRcdH1cblx0fVxuXHQmX19jb250YWluZXIge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRtYXgtaGVpZ2h0OiBpbmhlcml0O1xuXG5cdFx0JltoaWRkZW5dIHtcblx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0fVxuXHR9XG5cblx0Jl9fY29udGVudCB7XG5cdFx0b3ZlcmZsb3cteTogYXV0bztcblx0XHRvdmVyc2Nyb2xsLWJlaGF2aW9yOiBjb250YWluO1xuXHRcdG1heC1oZWlnaHQ6IHBmZS1sb2NhbChNYXhIZWlnaHQpO1xuXHRcdHBhZGRpbmc6IHBmZS1sb2NhbChQYWRkaW5nKTtcblx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1heC1oZWlnaHQ6ICRwZmUtbW9kYWwtLWJyZWFrcG9pbnQtLW1lZGl1bSkge1xuXHRcdFx0LS1wZmUtbW9kYWwtLVBhZGRpbmc6ICN7cGZlLXZhcihjb250YWluZXItcGFkZGluZyl9IGNhbGMoI3twZmUtdmFyKGNvbnRhaW5lci1wYWRkaW5nKX0gKiAzKSAje3BmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpfSAje3BmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpfTtcblx0XHR9XG5cblx0XHQ6aG9zdCg6bm90KFtoYXNfaGVhZGVyXSkpICYge1xuXG5cdFx0XHQvLyBSZW1vdmUgbWFyZ2luLXRvcCBvbiB0aGUgZmlyc3Qgc2xvdHRlZCBlbGVtZW50IHRoYXQgaXMgbm90IHRoZSBoZWFkZXIuXG5cdFx0XHQ6OnNsb3R0ZWQoKjpudGgtY2hpbGQoMikpLFxuXHRcdFx0OjpzbG90dGVkKCo6bnRoLWNoaWxkKDEpKSB7XG5cdFx0XHRcdG1hcmdpbi10b3A6IDAgIWltcG9ydGFudDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQ6OnNsb3R0ZWQoW3Nsb3Q9XCJwZmUtbW9kYWwtLWhlYWRlclwiXSkge1xuXHRcdFx0bWFyZ2luLXRvcDogMCAhaW1wb3J0YW50O1xuXHRcdH1cblx0fVxuXG5cdCZfX2Nsb3NlIHtcblx0XHRAaW5jbHVkZSBwZmUtcmVzZXQtYnV0dG9uO1xuXHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHR0b3A6IGNhbGMoI3twZmUtdmFyKGNvbnRhaW5lci1wYWRkaW5nKX0gKiAuMjUpO1xuXHRcdHJpZ2h0OiBjYWxjKCN7cGZlLXZhcihjb250YWluZXItcGFkZGluZyl9ICogLjI1KTtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0bGluZS1oZWlnaHQ6IC41O1xuXHRcdHBhZGRpbmc6IHBmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpO1xuXG5cdFx0QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJHBmZS1tb2RhbC0tYnJlYWtwb2ludC0tbWVkaXVtKSB7XG5cdFx0XHR0b3A6ICN7cGZlLXZhcihjb250YWluZXItcGFkZGluZyl9O1xuXHRcdFx0cmlnaHQ6ICN7cGZlLXZhcihjb250YWluZXItcGFkZGluZyl9O1xuXHRcdH1cblxuXHRcdEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtaGVpZ2h0OiAkcGZlLW1vZGFsLS1icmVha3BvaW50LS1tZWRpdW0pIGFuZCAobWluLXdpZHRoOiAkcGZlLW1vZGFsLS1icmVha3BvaW50LS1tZWRpdW0pIHtcblx0XHRcdHRvcDogY2FsYygje3BmZS12YXIoY29udGFpbmVyLXBhZGRpbmcpfSAvIDIpO1xuXHRcdFx0cmlnaHQ6IGNhbGMoI3twZmUtdmFyKGNvbnRhaW5lci1wYWRkaW5nKX0gLyAyKTtcblx0XHR9XG5cblx0XHQ+IHN2ZyB7XG5cdFx0XHRmaWxsOiBwZmUtcmFkaW8odGV4dCk7XG5cdFx0XHRoZWlnaHQ6IHBmZS12YXIodWktLWVsZW1lbnQtLXNpemUpO1xuXHRcdFx0d2lkdGg6IHBmZS12YXIodWktLWVsZW1lbnQtLXNpemUpO1xuXHRcdFx0aGVpZ2h0OiBwZmUtbG9jYWwoJGNzc3Zhcjogc2l6ZSwgJHJlZ2lvbjogY2xvc2UpO1xuXHRcdFx0d2lkdGg6IHBmZS1sb2NhbCgkY3NzdmFyOiBzaXplLCAkcmVnaW9uOiBjbG9zZSk7XG5cdFx0fVxuXHR9XG59XG4iLCJAZnVuY3Rpb24gcGZlLXN0cmlwLXVuaXQoJG51bWJlcikge1xuICAgIEBpZiB0eXBlLW9mKCRudW1iZXIpID09IFwibnVtYmVyXCIgYW5kIG5vdCB1bml0bGVzcygkbnVtYmVyKSB7XG4gICAgICBAcmV0dXJuICRudW1iZXIgLyAoJG51bWJlciAqIDAgKyAxKTtcbiAgICB9XG4gIFxuICAgIEByZXR1cm4gJG51bWJlcjtcbiAgfVxuXG5AZnVuY3Rpb24gcGZlLXNpemUtcGVtKCRweHZhbCwgJGJhc2U6ICRwZmUtZ2xvYmFsLS1mb250LXNpemUtcm9vdCkge1xuICAgIEByZXR1cm4gcGZlLXN0cmlwLXVuaXQoJHB4dmFsKSAvICRiYXNlICogMWVtO1xufVxuXG5AZnVuY3Rpb24gcGZlLXNpemUtcHJlbSgkcHh2YWwsICRiYXNlOiAkcGZlLWdsb2JhbC0tZm9udC1zaXplLXJvb3QpIHtcbiAgICBAcmV0dXJuIHBmZS1zdHJpcC11bml0KCRweHZhbCkgLyAkYmFzZSAqIDFyZW07XG59XG5cbkBmdW5jdGlvbiBwZmUtc2l6ZS1yZW0ycHgoJHJlbXZhbCwgJGJhc2U6ICRwZmUtZ2xvYmFsLS1mb250LXNpemUtcm9vdCkge1xuICAgIEByZXR1cm4gcGZlLXN0cmlwLXVuaXQoJHJlbXZhbCkgKiAoJGJhc2UgLyAxcHgpO1xufVxuXG4vLy8gTWFwIGRlZXAgZ2V0XG4vLy8gQGF1dGhvciBIdWdvIEdpcmF1ZGVsXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIE1hcFxuLy8vIEBwYXJhbSB7QXJnbGlzdH0gJGtleXMgLSBLZXkgY2hhaW5cbi8vLyBAcmV0dXJuIHsqfSAtIERlc2lyZWQgdmFsdWVcbkBmdW5jdGlvbiBtYXAtZGVlcC1nZXQoJG1hcCwgJGtleXMuLi4pIHtcbiAgICBAZWFjaCAka2V5IGluICRrZXlzIHtcbiAgICAgICAgQGlmIHR5cGUtb2YoJG1hcCk9PVwibWFwXCIge1xuICAgICAgICAgICAgJG1hcDogbWFwLWdldCgkbWFwLCAka2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBlbHNlIHtcbiAgICAgICAgICAgIEB3YXJuIFwiTWFwIHByb3ZpZGVkIGlzIG5vdCBhIG1hcC5cIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQHJldHVybiAkbWFwO1xufVxuXG4vLyBDb2xsZWN0IGFsbCBtYXBzIGFuZCBtZXJnZSB0aGVtIHRvZ2V0aGVyXG5AZnVuY3Rpb24gbWFwLWNvbGxlY3QoJG1hcHMuLi4pIHtcbiAgICAkY29sbGVjdGlvbjogKCk7XG5cbiAgICBAZWFjaCAkbWFwIGluICRtYXBzIHtcbiAgICAgICAgJGNvbGxlY3Rpb246IG1hcC1tZXJnZSgkY29sbGVjdGlvbiwgJG1hcCk7XG4gICAgfVxuXG4gICAgQHJldHVybiAkY29sbGVjdGlvbjtcbn1cblxuLy8gTmV3IGNvbG9yIGZ1bmN0aW9uIHRvIG9ubHkgcmV0dXJuIHRoZW1lIGNvbG9yc1xuQGZ1bmN0aW9uIGNvbG9yKCRuYW1lLCAkdGhlbWU6IFwibGlnaHRcIiwgJG9wYWNpdHk6IDEpIHtcbiAgICAkbWFwOiBtYXAtZ2V0KCRjb2xvci1tYXAsICRuYW1lKTtcbiAgICAkZXJyb3I6IGZhbHNlO1xuICAgICRjb2xvcjogbnVsbDtcblxuICAgIEBpZiAkbWFwICE9bnVsbCB7XG4gICAgICAgICRjb2xvcjogbWFwLWdldCgkbWFwLCAkdGhlbWUpO1xuICAgIH1cblxuICAgIEBlbHNlIHtcbiAgICAgICAgJGVycm9yOiB0cnVlO1xuICAgIH1cblxuICAgIEBpZiB0eXBlLW9mKCRjb2xvcik9PWNvbG9yIHtcbiAgICAgICAgQGlmICRvcGFjaXR5PT0xIHtcbiAgICAgICAgICAgIEByZXR1cm4gJGNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgQGlmICRvcGFjaXR5IDwgMSB7XG4gICAgICAgICAgICBAcmV0dXJuIHJnYmEoJGNvbG9yLCAkb3BhY2l0eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAZWxzZSB7XG4gICAgICAgICRlcnJvcjogdHJ1ZTtcbiAgICB9XG5cbiAgICBAaWYgJGVycm9yIHtcbiAgICAgICAgQHdhcm4gXCIjeyRuYW1lfSBpcyBub3QgYSB2YWxpZCBjb2xvclwiO1xuICAgIH1cbn1cblxuLy8gaHR0cHM6Ly9odWdvZ2lyYXVkZWwuY29tLzIwMTMvMDgvMDgvYWR2YW5jZWQtc2Fzcy1saXN0LWZ1bmN0aW9ucy9cbi8vIEdldCB0aGUgZmlyc3QgaXRlbSBpbiBhIGxpc3RcbkBmdW5jdGlvbiBmaXJzdCgkbGlzdCkge1xuICAgIEByZXR1cm4gbnRoKCRsaXN0LCAxKTtcbn1cblxuLy8gR2V0IHRoZSBsYXN0IGl0ZW0gaW4gYSBsaXN0XG5AZnVuY3Rpb24gbGFzdCgkbGlzdCkge1xuICAgIEByZXR1cm4gbnRoKCRsaXN0LCBsZW5ndGgoJGxpc3QpKTtcbn1cblxuQGZ1bmN0aW9uIHN0ci1yZXBsYWNlKCRzdHJpbmcsICRzZWFyY2gsICRyZXBsYWNlOiBcIlwiKSB7XG4gICAgQGlmIHR5cGUtb2YoJHN0cmluZyk9PVwic3RyaW5nXCJhbmQgdHlwZS1vZigkc2VhcmNoKT09XCJzdHJpbmdcIiB7XG4gICAgICAgICRpbmRleDogc3RyLWluZGV4KCRzdHJpbmcsICRzZWFyY2gpO1xuXG4gICAgICAgIEBpZiAkaW5kZXgge1xuICAgICAgICAgICAgQHJldHVybiBzdHItc2xpY2UoJHN0cmluZywgMSwgJGluZGV4IC0gMSkrJHJlcGxhY2Urc3RyLXJlcGxhY2Uoc3RyLXNsaWNlKCRzdHJpbmcsICRpbmRleCArIHN0ci1sZW5ndGgoJHNlYXJjaCkpLCAkc2VhcmNoLCAkcmVwbGFjZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAcmV0dXJuICRzdHJpbmc7XG59XG5cbkBmdW5jdGlvbiB0by1zdHJpbmcoJGxpc3QsICRnbHVlOiAnJywgJGlzLW5lc3RlZDogZmFsc2UpIHtcbiAgICAkcmVzdWx0OiBudWxsO1xuXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgJGU6IG50aCgkbGlzdCwgJGkpO1xuXG4gICAgICAgIEBpZiB0eXBlLW9mKCRlKT09bGlzdCB7XG4gICAgICAgICAgICAkcmVzdWx0OiAkcmVzdWx0I3t0by1zdHJpbmcoJGUsICRnbHVlLCB0cnVlKX07XG4gICAgICAgIH1cblxuICAgICAgICBAZWxzZSB7XG4gICAgICAgICAgICAkcmVzdWx0OiBpZigkaSAhPWxlbmd0aCgkbGlzdCkgb3IgJGlzLW5lc3RlZCxcbiAgICAgICAgICAgICRyZXN1bHQjeyRlfSN7JGdsdWV9LFxuICAgICAgICAgICAgJHJlc3VsdCN7JGV9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEByZXR1cm4gJHJlc3VsdDtcbn1cblxuQGZ1bmN0aW9uIHN0ci1zcGxpdCgkc3RyaW5nLCAkc2VwYXJhdG9yKSB7XG4gICAgLy8gZW1wdHkgYXJyYXkvbGlzdFxuICAgICRzcGxpdC1hcnI6ICgpO1xuICAgIC8vIGZpcnN0IGluZGV4IG9mIHNlcGFyYXRvciBpbiBzdHJpbmdcbiAgICAkaW5kZXg6IHN0ci1pbmRleChcIiN7JHN0cmluZ31cIiwgJHNlcGFyYXRvcik7XG5cbiAgICAvLyBsb29wIHRocm91Z2ggc3RyaW5nXG4gICAgQHdoaWxlICRpbmRleCAhPW51bGwge1xuICAgICAgICAvLyBnZXQgdGhlIHN1YnN0cmluZyBmcm9tIHRoZSBmaXJzdCBjaGFyYWN0ZXIgdG8gdGhlIHNlcGFyYXRvclxuICAgICAgICAkaXRlbTogc3RyLXNsaWNlKCRzdHJpbmcsIDEsICRpbmRleCAtIDEpO1xuICAgICAgICAvLyBwdXNoIGl0ZW0gdG8gYXJyYXlcbiAgICAgICAgJHNwbGl0LWFycjogYXBwZW5kKCRzcGxpdC1hcnIsICRpdGVtKTtcbiAgICAgICAgLy8gcmVtb3ZlIGl0ZW0gYW5kIHNlcGFyYXRvciBmcm9tIHN0cmluZ1xuICAgICAgICAkc3RyaW5nOiBzdHItc2xpY2UoJHN0cmluZywgJGluZGV4ICsgMSk7XG4gICAgICAgIC8vIGZpbmQgbmV3IGluZGV4IG9mIHNlcGFyYXRvclxuICAgICAgICAkaW5kZXg6IHN0ci1pbmRleCgkc3RyaW5nLCAkc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvLyBhZGQgdGhlIHJlbWFpbmluZyBzdHJpbmcgdG8gbGlzdCAodGhlIGxhc3QgaXRlbSkgYW5kIHJldHVyblxuICAgIEByZXR1cm4gYXBwZW5kKCRzcGxpdC1hcnIsICRzdHJpbmcpO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSHVnb0dpcmF1ZGVsL1Nhc3N5U3RyaW5ncy9ibG9iL21hc3Rlci9kaXN0L19TYXNzeVN0cmluZ3Muc2Nzc1xuLy8vIFJlbW92ZSBhbGwgdHJhaWxpbmcgYW5kIGxlYWRpbmcgd2hpdGVzcGFjZXMgZnJvbSBgJHN0cmluZ2AuXG4vLy8gQHNpbmNlIDEuMi4wXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRzdHJpbmcgLSBzdHJpbmdcbi8vLyBAcmV0dXJuIHtTdHJpbmd9XG5cbkBmdW5jdGlvbiBzdHItdHJpbSgkc3RyaW5nKSB7XG4gICAgJHN0YXJ0OiAxO1xuICAgICRlbmQ6IHN0ci1sZW5ndGgoJHN0cmluZyk7XG5cbiAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoIHN0ci1sZW5ndGgoJHN0cmluZykge1xuICAgICAgICAkZmlyc3Q6IHN0ci1zbGljZSgkc3RyaW5nLCAkaSwgJGkpO1xuICAgICAgICAkbGFzdDogc3RyLXNsaWNlKCRzdHJpbmcsIC0kaSwgLSRpKTtcblxuICAgICAgICBAaWYgJGZpcnN0PT1cIiBcImFuZCAkaSsxPT0kc3RhcnQrMSB7XG4gICAgICAgICAgICAkc3RhcnQ6ICRpICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIEBpZiAkbGFzdD09XCIgXCJhbmQgc3RyLWxlbmd0aCgkc3RyaW5nKSAtICRpPT0kZW5kIC0gMSB7XG4gICAgICAgICAgICAkZW5kOiBzdHItbGVuZ3RoKCRzdHJpbmcpIC0gJGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAcmV0dXJuIHN0ci1zbGljZSgkc3RyaW5nLCAkc3RhcnQsICRlbmQpO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSHVnb0dpcmF1ZGVsL1Nhc3N5U3RyaW5ncy9ibG9iL21hc3Rlci9kaXN0L19TYXNzeVN0cmluZ3Muc2Nzc1xuLy8vIENoZWNrIHdoZXRoZXIgYCRzdHJpbmdgIHN0YXJzIHdpdGggYCRuZWVkbGVgLlxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkc3RyaW5nIC0gc3RyaW5nIHRvIGNoZWNrXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRuZWVkbGUgLSBzdWJzdHJpbmcgdG8gY2hlY2tcbi8vLyBAcmV0dXJuIHtCb29sfVxuXG5AZnVuY3Rpb24gc3RyLXN0YXJ0cy13aXRoKCRzdHJpbmcsICRuZWVkbGUpIHtcbiAgICBAcmV0dXJuIHN0ci1zbGljZSgkc3RyaW5nLCAxLCBzdHItbGVuZ3RoKCRuZWVkbGUpKT09JG5lZWRsZTtcbn1cblxuLy8gaHR0cHM6Ly9odWdvZ2lyYXVkZWwuY29tLzIwMTMvMDgvMDgvYWR2YW5jZWQtc2Fzcy1saXN0LWZ1bmN0aW9ucy8jcmVtb3ZpbmctdmFsdWVzLWZyb20tbGlzdFxuQGZ1bmN0aW9uIHJlbW92ZSgkbGlzdCwgJHZhbHVlLCAkcmVjdXJzaXZlOiBmYWxzZSkge1xuICAgICRyZXN1bHQ6ICgpO1xuXG4gICAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsZW5ndGgoJGxpc3QpIHtcbiAgICAgICAgQGlmIHR5cGUtb2YobnRoKCRsaXN0LCAkaSkpPT1saXN0IGFuZCAkcmVjdXJzaXZlIHtcbiAgICAgICAgICAgICRyZXN1bHQ6IGFwcGVuZCgkcmVzdWx0LCByZW1vdmUobnRoKCRsaXN0LCAkaSksICR2YWx1ZSwgJHJlY3Vyc2l2ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgQGVsc2UgaWYgbnRoKCRsaXN0LCAkaSkgIT0kdmFsdWUge1xuICAgICAgICAgICAgJHJlc3VsdDogYXBwZW5kKCRyZXN1bHQsIG50aCgkbGlzdCwgJGkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEByZXR1cm4gJHJlc3VsdDtcbn1cblxuXG5cbi8vLyBWYXJcbi8vL1xuLy8vIFJldHVybnMgQ1NTIFZhciBzdGFjayB3aXRoIGV4cG9zZWQgdGhlbWUgVmFyIGFuZCByZXNwZWN0aXZlIFNDU1MgZmFsbGJhY2tcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY3NzdmFyIC0gVmFyaWFibGUgbmFtZSB0byBiZSB1c2VkIGFuZCBwcmVwZW5kZWQgd2l0aCAtLXBmZS10aGVtZVxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY2F0ZWdvcnkgLSBDYXRlZ29yeSBuYW1lIHRvIGJlIGFwcGVuZGVkIHRvIHZhcmlhYmxlcyB3aXRoaW4gdGhlIG1hcC9zeXN0ZW1cbi8vLyBAcGFyYW0ge01hcH0gJG1hcCAtIFNBU1MgTWFwIG9mIHZhcmlhYmxlc1xuLy8vIEByZXF1aXJlcyB7U3RyaW5nfSAkcmVwbyAtIE5hbWUgb2YgcmVwbywgd2hpY2ggaXMgXCJwZmVcIlxuLy8vIEB1c2UgLVxuLy8vXG4vLy8gICAgIDEubG9vayB1cCBhIGNvbG9yOiAvZWxlbWVudHMvcGZlLXNhc3MvdmFyaWFibGVzL19tYXBzLnNjc3Ncbi8vLyAgICAgICAgIChGWUksIG1hcHMgcmVmZXJlbmNlczogL2VsZW1lbnRzL3BmZS1zYXNzL3ZhcmlhYmxlcy9fY29sb3JzLnNjc3MpXG4vLy9cbi8vLyAgICAgMi4gdXNlIGxpa2UgdGhpczpcbi8vLyAgICAgICAgIGBgYFxuLy8vICAgICAgICAgLm15LWVsZW1lbnQge1xuLy8vICAgICAgICAgICBwYWRkaW5nOiAgICAgI3twZmUtdmFyKCAgY29udGFpbmVyLXNwYWNlciAgKX07XG4vLy8gICAgICAgICAgIGZvbnQtc2l6ZTogICAje3BmZS12YXIoICBmb250LXNpemUgICl9O1xuLy8vICAgICAgICAgfVxuLy8vICAgICAgICAgYGBgXG5AZnVuY3Rpb24gcGZlLXZhcigkY3NzdmFyLCAkY2F0ZWdvcnk6ICcnLCAkbWFwOiAkcGZlLXZhcnMpIHtcbiAgICBAaWYgJGNhdGVnb3J5ICE9XCJcIiB7XG4gICAgICAgICRjYXRlZ29yeTogXCIjeyRjYXRlZ29yeX0tLVwiO1xuICAgIH1cbiAgICAvLyBTdGFydCBidWlsZGluZyB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb25cbiAgICAkdmFyLWRlY2xhcmF0aW9uOiBcIi0tI3skcmVwb30tdGhlbWUtLSN7JGNhdGVnb3J5fSN7JGNzc3Zhcn1cIjtcbiAgICAvLyBJZiBhIGZhbGxiYWNrIGlzIGRlZmluZWQsIHBhc3MgdGhhdCBpbiB0b29cbiAgICBAaWYgbWFwLWdldCgkbWFwLCAkY3NzdmFyKSAhPSBudWxsIHtcbiAgICAgICAgJHZhci1kZWNsYXJhdGlvbjogXCIjeyR2YXItZGVjbGFyYXRpb259LCAje21hcC1nZXQoJG1hcCwgJGNzc3Zhcil9XCI7XG4gICAgfVxuICAgIC8vIFJldHVybiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gc3RyaW5nXG4gICAgQHJldHVybiB2YXIoI3skdmFyLWRlY2xhcmF0aW9ufSk7XG59XG5cblxuXG4vLy8gVmFyIEZhbGxiYWNrXG4vLy9cbi8vLyBSZXR1cm5zIHRoZSBTQ1NTIGZhbGxiYWNrIHZhbHVlIG9ubHlcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkc2l6ZSAtIFZhcmlhYmxlIG5hbWUgdG8gYmUgdXNlZCBhbmQgcHJlcGVuZGVkIHdpdGggLS1wZmUtdGhlbWVcbi8vLyBAdXNlIC1cbi8vLyBgYGBcbi8vLyBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiBwZmUtYnJlYWtwb2ludChzbSkpIHtcbi8vLyAgICAtLXBmZS1iYW5kLS13aWR0aDogI3twZmUtYnJlYWtwb2ludChzbSkgLSAkYm94LXBhZGRpbmcgKiAyfTtcbi8vLyB9XG4vLy8gYGBgXG5AZnVuY3Rpb24gcGZlLWJyZWFrcG9pbnQoJHNpemUsICRtYXg6IGZhbHNlKSB7XG4gICAgJGJwOiBtYXAtZ2V0KCRwZmUtdmFycywgZ3JpZC1icmVha3BvaW50LS0jeyRzaXplfSk7XG4gICAgQGlmICRtYXgge1xuICAgICAgICAkYnA6IChwZmUtc3RyaXAtdW5pdCgkYnApIC0gMSkgKiAxcHg7XG4gICAgfVxuICAgIEByZXR1cm4gJGJwO1xufVxuXG4vLy8gQ29sb3Jcbi8vL1xuLy8vIFJldHVybnMgQ1NTIFZhciBzdGFjayB3aXRoIGV4cG9zZWQgdGhlbWUgVmFyIGFuZCByZXNwZWN0aXZlIFNDU1MgZmFsbGJhY2tcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY3NzdmFyIC0gVmFyaWFibGUgbmFtZSB0byBiZSB1c2VkIGFuZCBwcmVwZW5kZWQgd2l0aCAtLXBmZS10aGVtZVxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY2F0ZWdvcnkgLSBDYXRlZ29yeSBuYW1lIHRvIGJlIGFwcGVuZGVkIHRvIHZhcmlhYmxlcyB3aXRoaW4gdGhlIG1hcC9zeXN0ZW0sIGRlZmF1bHQgaXMgXCJjb2xvclwiXG4vLy8gQHBhcmFtIHtNYXB9ICRtYXAgLSBTQVNTIE1hcCBvZiB2YXJpYWJsZXNcbi8vLyBAcmVxdWlyZXMge1N0cmluZ30gJHJlcG8gLSBOYW1lIG9mIHJlcG8sIHdoaWNoIGlzIFwicGZlXCJcbi8vLyBAdXNlIC1cbi8vL1xuLy8vICAgICAxLmxvb2sgdXAgYSBjb2xvcjogL2VsZW1lbnRzL3BmZS1zYXNzL3ZhcmlhYmxlcy9fbWFwcy5zY3NzXG4vLy8gICAgICAgICAoRllJLCBtYXBzIHJlZmVyZW5jZXM6IC9lbGVtZW50cy9wZmUtc2Fzcy92YXJpYWJsZXMvX2NvbG9ycy5zY3NzKVxuLy8vXG4vLy8gICAgIDIuIHVzZSBsaWtlIHRoaXM6XG4vLy8gICAgICAgICBgYGBcbi8vLyAgICAgICAgIC5teS1lbGVtZW50IHtcbi8vLyAgICAgICAgICAgY29sb3I6ICAgICAgICN7cGZlLWNvbG9yKCAgc3VyZmFjZS0tYmFzZS0tdGV4dCAgKX07XG4vLy8gICAgICAgICAgIGJhY2tncm91bmQ6ICAje3BmZS1jb2xvciggIHN1cmZhY2UtLWJhc2UgKX07XG4vLy8gICAgICAgICB9XG4vLy8gICAgICAgICBgYGBcbkBmdW5jdGlvbiBwZmUtY29sb3IoJGNzc3ZhciwgJGNhdGVnb3J5OiAnY29sb3InLCAkbWFwOiAkcGZlLWNvbG9ycykge1xuICAgIEBpZiAkY2F0ZWdvcnkgIT1cIlwiIHtcbiAgICAgICAgJGNhdGVnb3J5OiBcIiN7JGNhdGVnb3J5fS0tXCI7XG4gICAgfVxuICAgIC8vIFN0YXJ0IGJ1aWxkaW5nIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvblxuICAgICR2YXItZGVjbGFyYXRpb246IFwiLS0jeyRyZXBvfS10aGVtZS0tI3skY2F0ZWdvcnl9I3skY3NzdmFyfVwiO1xuICAgIC8vIElmIGEgZmFsbGJhY2sgaXMgZGVmaW5lZCwgcGFzcyB0aGF0IGluIHRvb1xuICAgIEBpZiBtYXAtZ2V0KCRtYXAsICRjc3N2YXIpICE9IG51bGwge1xuICAgICAgICAkdmFyLWRlY2xhcmF0aW9uOiBcIiN7JHZhci1kZWNsYXJhdGlvbn0sICN7bWFwLWdldCgkbWFwLCAkY3NzdmFyKX1cIjtcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBzdHJpbmdcbiAgICBAcmV0dXJuIHZhcigjeyR2YXItZGVjbGFyYXRpb259KTtcbn1cbkBmdW5jdGlvbiBwZmUtZmFsbGJhY2soJGNzc3ZhciwgJGNhdGVnb3J5OiAnY29sb3InLCAkbWFwOiAkcGZlLWNvbG9ycykge1xuICAgIEBpZiAkY2F0ZWdvcnkgIT1cIlwiIHtcbiAgICAgICAgJGNhdGVnb3J5OiBcIiN7JGNhdGVnb3J5fS0tXCI7XG4gICAgfVxuICAgIC8vIFJldHVybiB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb24gc3RyaW5nXG4gICAgQHJldHVybiAje21hcC1nZXQoJG1hcCwgJGNzc3Zhcil9O1xufVxuXG4vLy8gTG9jYWxcbi8vL1xuLy8vIFJldHVybnMgQ1NTIFZhciBmb3IgdGhlIGxvY2FsIGNvbXBvbmVudC1zY29wZWQgdmFyaWFibGVcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY3NzdmFyIC0gVmFyaWFibGUgaWRlbnRpZmllcnMgd2hpY2ggYXJlIHBvc3RmaXhlZCBhbmQgY29tYmluZWQgdXNpbmcgJy0tJ1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkcmVnaW9uIC0gSWRlbnRpZmllcyB0aGUgcmVnaW9uIG9yIHNsb3QgdG8gd2hpY2ggdGhpcyBpcyBhc3NpZ25lZFxuLy8vIEByZXF1aXJlcyB7U3RyaW5nfSAkcmVwbyAtIE5hbWUgb2YgcmVwbywgd2hpY2ggaXMgXCJwZmVcIlxuLy8vIEByZXF1aXJlcyB7U3RyaW5nfSAkTE9DQUwgLSBOYW1lIG9mIGNvbXBvbmVudCwgdGhpcyBpcyBkZWZpbmVkIGF0IHRoZSB0b3Agb2YgdGhlIHNhc3MgZmlsZSBmb3IgdGhlIGNvbXBvbmVudFxuLy8vIEB1c2UgLVxuLy8vICAgICBgYGBcbi8vLyAgICAgOmhvc3Qge1xuLy8vICAgICAgICAgcGFkZGluZy10b3A6ICAgICAgI3twZmUtbG9jYWwocGFkZGluZ1RvcGApfTtcbi8vLyAgICAgICAgIHBhZGRpbmctYm90dG9tOiAgICN7cGZlLWxvY2FsKHBhZGRpbmdCb3R0b20pfTtcbi8vLyAgICAgfVxuLy8vICAgICBgYGBcbkBmdW5jdGlvbiBwZmUtbG9jYWwoJGNzc3ZhciwgJGZhbGxiYWNrOiBudWxsLCAkcmVnaW9uOiBudWxsKSB7XG4gICAgLy8gSWYgYSByZWdpb24gdmFsdWUgZXhpc3RzLCBidWlsZCB0aGUgcmVnaW9uIHN0cmluZ1xuICAgIEBpZiAkcmVnaW9uICE9IG51bGwge1xuICAgICAgICAkcmVnaW9uOiBcIl9fI3skcmVnaW9ufVwiO1xuICAgIH1cbiAgICAvLyBTdGFydCBidWlsZGluZyB0aGUgdmFyaWFibGUgZGVjbGFyYXRpb25cbiAgICAkdmFyLWRlY2xhcmF0aW9uOiBcIi0tI3skcmVwb30tI3skTE9DQUx9I3skcmVnaW9ufS0tI3t0by1zdHJpbmcoJGNzc3ZhciwgJy0tJyl9XCI7XG4gICAgLy8gSWYgYSBmYWxsYmFjayBpcyBkZWZpbmVkLCBwYXNzIHRoYXQgaW4gdG9vXG4gICAgQGlmICRmYWxsYmFjayAhPSBudWxsIHtcbiAgICAgICAgJHZhci1kZWNsYXJhdGlvbjogXCIjeyR2YXItZGVjbGFyYXRpb259LCAjeyRmYWxsYmFja31cIjtcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSB2YXJpYWJsZSBkZWNsYXJhdGlvbiBzdHJpbmdcbiAgICBAcmV0dXJuIHZhcigjeyR2YXItZGVjbGFyYXRpb259KTtcbn1cblxuLy8vIFJhZGlvXG4vLy9cbi8vLyBSZXR1cm5zIENTUyBWYXIgZm9yIGEgYnJvYWRjYXN0ZWQgdmFyaWFibGVcbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkY3NzdmFyIC0gVmFyaWFibGUgaWRlbnRpZmllcnMgd2hpY2ggYXJlIHBvc3RmaXhlZCBhbmQgY29tYmluZWQgdXNpbmcgJy0tJ1xuLy8vIEByZXF1aXJlcyB7U3RyaW5nfSAkcmVwbyAtIE5hbWUgb2YgcmVwbywgd2hpY2ggaXMgXCJwZmVcIlxuLy8vIEB1c2UgLVxuLy8vICAgICBgYGBcbi8vLyAgICAgYTp2aXNpdGVkIHtcbi8vLyAgICAgICAgIGNvbG9yOiAgICAgICAje3BmZS1yYWRpbyggIHVpLWxpbmssIHZpc2l0ZWQgICl9O1xuLy8vICAgICB9XG4vLy8gICAgIGBgYFxuLy8vXG4vLy8gQHJldHVybnMgLSB2YXIoLS1wZmUtYnJvYWRjYXN0ZWQtLXVpLWxpbmstLXZpc2l0ZWQpO1xuLy8vXG5AZnVuY3Rpb24gcGZlLXJhZGlvKCRjc3N2YXIuLi4pIHtcbiAgICBAcmV0dXJuIHZhcigtLSN7JHJlcG99LWJyb2FkY2FzdGVkLS0je3RvLXN0cmluZygkY3NzdmFyLCAnLS0nKX0pO1xufSIsIi8vICRib3hTaXplID0gYW55IGJveC1zaXppbmcgcHJvcGVydHksIGRlZmF1bHQgaXMgYm9yZGVyLWJveFxuQG1peGluIHBmZS1ib3gtc2l6aW5nKCRib3hTaXplOiBib3JkZXItYm94KSB7XG4gICosICo6OmJlZm9yZSwgKjo6YWZ0ZXIge1xuICAgIGJveC1zaXppbmc6ICRib3hTaXplO1xuICB9XG59XG5cbkBtaXhpbiBwZmUtY2xlYXJmaXgge1xuICAmOjphZnRlciB7XG4gICAgY2xlYXI6IGJvdGg7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgfVxufVxuXG5AbWl4aW4gcGZlLXJlc2V0LWxpc3QoKSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuQG1peGluIHBmZS1yZXNldC1ib3goKSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuQG1peGluIHBmZS1yZXNldC1idXR0b24oKSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IG5vbmU7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuQG1peGluIHBmZS1zci1vbmx5KCkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIGNsaXA6IHJlY3QoMCwwLDAsMCk7XG4gIGhlaWdodDogMXB4O1xuICB3aWR0aDogMXB4O1xuICBtYXJnaW46IC0xcHg7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbn1cblxuLy8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8vIFRoZW1lIENvbG9yIFZhcnMgICAtIHVzZSB3aXRoIG9uPVwiZGFya1wiIHRvIGFmZmVjdCBsaWdodCBET01cbi8vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuQG1peGluIHBmZS10aGVtZSgkdGhlbWUpIHtcbiAgLy8gR0VORVJBTCBDT05URVhULUJBU0VEIFVQREFURVMsIE9OPVwiREFSS1wiXG4gIEBpZiAkdGhlbWUgPT0gZGFyayB7XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS10ZXh0OiAgICAgICAgICAgICAgICN7cGZlLWNvbG9yKHRleHQtLW9uLWRhcmspfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbms6ICAgICAgICAgICAgI3twZmUtY29sb3IodWktbGluay0tb24tZGFyayl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0tdmlzaXRlZDogICAje3BmZS1jb2xvcih1aS1saW5rLS1vbi1kYXJrLS12aXNpdGVkKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS1ob3ZlcjogICAgICN7cGZlLWNvbG9yKHVpLWxpbmstLW9uLWRhcmstLWhvdmVyKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS1mb2N1czogICAgICN7cGZlLWNvbG9yKHVpLWxpbmstLW9uLWRhcmstLWZvY3VzKX07XG4gIH1cbiAgQGVsc2UgaWYgJHRoZW1lID09IGxpZ2h0IHtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXRleHQ6ICAgICAgICAgICAgICAgI3twZmUtY29sb3IodGV4dCl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluazogICAgICAgICAgICAje3BmZS1jb2xvcih1aS1saW5rKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS12aXNpdGVkOiAgICN7cGZlLWNvbG9yKHVpLWxpbmstLXZpc2l0ZWQpfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLWhvdmVyOiAgICAgI3twZmUtY29sb3IodWktbGluay0taG92ZXIpfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLWZvY3VzOiAgICAgI3twZmUtY29sb3IodWktbGluay0tZm9jdXMpfTtcbiAgfVxuICAvLyBNT1JFIFNQRUNJRklDIENPTE9SIEJBU0VEIFVQREFURVMsIENPTE9SPVwiREFSS0VSXCJcbiAgQGVsc2UgaWYgJHRoZW1lID09IGRhcmtlciB7XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS10ZXh0OiAgICAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWRhcmtlci0tdGV4dCl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluazogICAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1kYXJrZXItLWxpbmspfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLXZpc2l0ZWQ6ICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VyLS1saW5rLS12aXNpdGVkKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS1ob3ZlcjogICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWRhcmtlci0tbGluay0taG92ZXIpfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLWZvY3VzOiAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VyLS1saW5rLS1mb2N1cyl9O1xuICB9XG4gIEBlbHNlIGlmICR0aGVtZSA9PSBkYXJrZXN0IHtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXRleHQ6ICAgICAgICAgICAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VzdC0tdGV4dCl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluazogICAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1kYXJrZXN0LS1saW5rKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS12aXNpdGVkOiAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWRhcmtlc3QtLWxpbmstLXZpc2l0ZWQpfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLWhvdmVyOiAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VzdC0tbGluay0taG92ZXIpfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLWZvY3VzOiAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VzdC0tbGluay0tZm9jdXMpfTtcbiAgfVxuICBAZWxzZSBpZiAkdGhlbWUgPT0gYWNjZW50IHtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXRleHQ6ICAgICAgICAgICAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tYWNjZW50LS10ZXh0KX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rOiAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWFjY2VudC0tbGluayl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0tdmlzaXRlZDogICAje3BmZS1jb2xvcihzdXJmYWNlLS1hY2NlbnQtLWxpbmstLXZpc2l0ZWQpfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLWhvdmVyOiAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tYWNjZW50LS1saW5rLS1ob3Zlcil9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0tZm9jdXM6ICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1hY2NlbnQtLWxpbmstLWZvY3VzKX07XG4gIH1cbiAgQGVsc2UgaWYgJHRoZW1lID09IGNvbXBsZW1lbnQge1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdGV4dDogICAgICAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1jb21wbGVtZW50LS10ZXh0KX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rOiAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWNvbXBsZW1lbnQtLWxpbmspfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLXZpc2l0ZWQ6ICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tY29tcGxlbWVudC0tbGluay0tdmlzaXRlZCl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0taG92ZXI6ICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1jb21wbGVtZW50LS1saW5rLS1ob3Zlcil9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0tZm9jdXM6ICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1jb21wbGVtZW50LS1saW5rLS1mb2N1cyl9O1xuICB9XG5cbiAgQGVsc2UgaWYgJHRoZW1lID09IGxpZ2h0ZXIge1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdGV4dDogICAgICAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVyLS10ZXh0KX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rOiAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXItLWxpbmspfTtcbiAgICAtLXBmZS1icm9hZGNhc3RlZC0tY29sb3ItLXVpLWxpbmstLXZpc2l0ZWQ6ICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tbGlnaHRlci0tbGluay0tdmlzaXRlZCl9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0taG92ZXI6ICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVyLS1saW5rLS1ob3Zlcil9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0tZm9jdXM6ICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVyLS1saW5rLS1mb2N1cyl9O1xuICB9XG4gIEBlbHNlIGlmICR0aGVtZSA9PSBsaWdodGVzdCB7XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS10ZXh0OiAgICAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXN0LS10ZXh0KX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rOiAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXN0LS1saW5rKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS12aXNpdGVkOiAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXN0LS1saW5rLS12aXNpdGVkKX07XG4gICAgLS1wZmUtYnJvYWRjYXN0ZWQtLWNvbG9yLS11aS1saW5rLS1ob3ZlcjogICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXN0LS1saW5rLS1ob3Zlcil9O1xuICAgIC0tcGZlLWJyb2FkY2FzdGVkLS1jb2xvci0tdWktbGluay0tZm9jdXM6ICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVzdC0tbGluay0tZm9jdXMpfTtcbiAgfVxufVxuXG5AbWl4aW4gcGZlLXRyYW5zaXRpb24oJHByb3BlcnRpZXMuLi4pIHtcbiAgJHJldHVybjogbnVsbDtcbiAgQGVhY2ggJHByb3BlcnR5IGluICRwcm9wZXJ0aWVzIHtcbiAgICBAaWYgbGVuZ3RoKCRwcm9wZXJ0eSkgPT0gMSB7XG4gICAgICAkcmV0dXJuOiBhcHBlbmQoJHJldHVybiwgI3skcHJvcGVydHl9IDI1MG1zICRwZmUtZ2xvYmFsLS1hbmltYXRpb24tdGltaW5nLCBjb21tYSk7XG4gICAgfVxuICAgIEBlbHNlIGlmIGxlbmd0aCgkcHJvcGVydHkpID09IDIge1xuICAgICAgJHJldHVybjogYXBwZW5kKCRyZXR1cm4sIG50aCgkcHJvcGVydHksIDEpIG50aCgkcHJvcGVydHksIDIpLCBjb21tYSk7XG4gICAgfVxuICB9XG4gIHRyYW5zaXRpb246ICRyZXR1cm47XG59XG5cbi8vIE1ha2UgYSBDU1MgYXJyb3dcbkBtaXhpbiBwZmUtYXJyb3coJHR5cGUsICRjb2xvciwgJHdpZHRoOiA4cHgsICRoZWlnaHQ6IDVweCwgJHBzZXVkbzogZmFsc2UpIHtcbiAgJGRpcmVjdGlvbjogKFxuICAgIHVwOiAxODBkZWcsXG4gICAgZG93bjogMGRlZyxcbiAgICByaWdodDogLTkwZGVnLFxuICAgIGxlZnQ6IDkwZGVnLFxuICApO1xuICBib3JkZXItc3R5bGU6ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfTtcbiAgYm9yZGVyLXdpZHRoOiAkd2lkdGggJGhlaWdodCAwO1xuICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXItdG9wLWNvbG9yOiAkY29sb3I7XG4gIHRyYW5zZm9ybTogcm90YXRlKG1hcC1nZXQoJGRpcmVjdGlvbiwgJHR5cGUpKTtcbiAgQGlmICRwc2V1ZG8ge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIEBjb250ZW50O1xuICB9XG59XG5cbkBtaXhpbiBwZmUtYXJyb3ctY29sb3IoJGNvbG9yKSB7XG4gIGJvcmRlci10b3AtY29sb3I6ICRjb2xvcjtcbn1cblxuQG1peGluIHBmZS1wcmludC1tZWRpYSB7XG4gIEBtZWRpYSBwcmludCB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIHBmZS1wcmludC1iYWNrZ3JvdW5kIHtcbiAgLXdlYmtpdC1wcmludC1jb2xvci1hZGp1c3Q6IGV4YWN0O1xuICBjb2xvci1hZGp1c3Q6IGV4YWN0O1xufVxuLy8gc2Nzcy1saW50OmRpc2FibGUgSW1wb3J0YW50UnVsZVxuQG1peGluIHBmZS1uby1wcmludC1iYWNrZ3JvdW5kIHtcbiAgQGluY2x1ZGUgcGZlLXByaW50LW1lZGlhIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmUgIWltcG9ydGFudDtcbiAgICBib3gtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7XG4gIH1cbn1cbi8vIHNjc3MtbGludDplbmFibGUgSW1wb3J0YW50UnVsZVxuXG5AbWl4aW4gcGZlLXBpcGUoICRwb3NpdGlvbjogcmlnaHQsICRwYWRkaW5nOiAwLCAkbWFyZ2luOiAwLCAkY29sb3I6ICRib3JkZXItY29sb3IpIHtcbiAgYm9yZGVyOiAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXdpZHRoKX0gI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci1zdHlsZSl9IHRyYW5zcGFyZW50O1xuICBib3JkZXItI3skcG9zaXRpb259LWNvbG9yOiAkY29sb3I7XG4gIEBpZiAkcG9zaXRpb24gPT0gcmlnaHQge1xuICAgIHBhZGRpbmctbGVmdDogJHBhZGRpbmc7XG4gICAgbWFyZ2luLXJpZ2h0OiAkbWFyZ2luO1xuICB9XG4gIEBlbHNlIGlmICRwb3NpdGlvbiA9PSBsZWZ0IHtcbiAgICBwYWRkaW5nLXJpZ2h0OiAkcGFkZGluZztcbiAgICBtYXJnaW4tbGVmdDogJG1hcmdpbjtcbiAgfVxufVxuXG5AbWl4aW4gcGZlLXJldGluYSB7XG4gIEBtZWRpYSAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBNaXhpbiBmb3IgYnVpbGRpbmcgc2xvdCBzZWxlY3RvcnNcbkBtaXhpbiBwZmUtc2xvdCgkc2xvdC1uYW1lLCAkc2VsZWN0b3I6IFwiXCIpIHtcbiAgLy8gVGhpcyBsb2dpYyBtYWtlcyBpdCBtdWNoIGVhc2llciB0byBzdHlsZSBkZWZhdWx0IHNsb3RzIGluIGEgbG9vcFxuICAvLyB3aXRoIG5hbWVkIHNsb3RzXG4gIEBpZiAkc2xvdC1uYW1lICE9IGRlZmF1bHQge1xuICAgIDo6c2xvdHRlZChbc2xvdD1cIiN7JHNsb3QtbmFtZX1cIl0jeyRzZWxlY3Rvcn0pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSB7XG4gICAgOjpzbG90dGVkKCopIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLy8gQWNjb3JkaW9uIFNwZWNpZmljIFNBU1MgVmFyc1xuLy8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4kcGZlLWV4cGFuZF9idXR0b24tLUxpbmVIZWlnaHQ6ICAgICAgMS41O1xuJHBmZS1leHBhbmRfYnV0dG9uLS1wYWRkaW5nOiAgICAgICAgICN7cGZlLXZhcihjb250YWluZXItc3BhY2VyKX07XG4kcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmctLWZhY3RvcjogLjc1O1xuJHBmZS1leHBhbmRfYnV0dG9uLS1wYWRkaW5nLS13aWRlOiAgIGNhbGMoI3skcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmd9ICogMS41KTtcblxuJHBmZS1leHBhbmRfY2hldnJvbi0tc2l6ZTogICAgICAgICAgIC40ZW07XG4kcGZlLWV4cGFuZF9jaGV2cm9uLS13ZWlnaHQ6ICAgICAgICAgLjFlbTtcbiRwZmUtZXhwYW5kX2NoZXZyb24tLXBhZGRpbmc6ICAgICAgICAzZW07XG4kcGZlLWV4cGFuZF9jaGV2cm9uLS1wbGFjZW1lbnQ6ICAgICAgI3skcGZlLWV4cGFuZF9idXR0b24tLUxpbmVIZWlnaHQgLyAyIC0gJHBmZS1leHBhbmRfY2hldnJvbi0tc2l6ZSAvIDJ9O1xuXG5AbWl4aW4gcGZlLWFjY29yZGlvbi1oZWFkZXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgPiAqIHtcbiAgICBtYXJnaW46IDA7XG4gIH1cbn1cblxuQG1peGluIHBmZS10cmlnZ2VyLWJ1dHRvbigkYWxpZ246IGxlZnQpIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgICBtYXJnaW46IDA7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAgIGZvbnQtd2VpZ2h0OiAje3BmZS12YXIoZm9udC13ZWlnaHQtLWJvbGQpfTtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB6LWluZGV4OiAxO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgIGZvbnQtc2l6ZTogICBjYWxjKCN7cGZlLXZhcihmb250LXNpemUpfSAqIDEuMSk7XG4gICAgbGluZS1oZWlnaHQ6ICN7cGZlLXZhcihsaW5lLWhlaWdodCl9O1xuXG4gICAgY29sb3I6ICAgICAgICAgICAgI3twZmUtbG9jYWwoYXV4KX07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI3twZmUtbG9jYWwobWFpbil9O1xuICAgIGJvcmRlci1sZWZ0OiAgICAgICN7cGZlLWxvY2FsKEJvcmRlckxlZnQpfTtcbiAgICBib3JkZXItcmlnaHQ6ICAgICAje3BmZS1sb2NhbChCb3JkZXJSaWdodCl9O1xuICAgIGJvcmRlci1ib3R0b206ICAgICN7cGZlLWxvY2FsKEJvcmRlckJvdHRvbSl9O1xuICAgIGJvcmRlci10b3A6IDA7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICN7cGZlLWxvY2FsKEJvcmRlckxlZnRDb2xvci0tZm9jdXMpfTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICB9XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgfVxuXG4gICAgJjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICB9XG5cbiAgICBAaWYgJGFsaWduID09IHJpZ2h0IHtcbiAgICAgICAgcGFkZGluZzogI3skcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmd9ICN7JHBmZS1leHBhbmRfYnV0dG9uLS1wYWRkaW5nLS13aWRlfSAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZ30gNTBweDtcbiAgICB9IEBlbHNlIHtcbiAgICAgICAgcGFkZGluZzogI3skcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmd9IDUwcHggI3skcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmd9ICN7JHBmZS1leHBhbmRfYnV0dG9uLS1wYWRkaW5nLS13aWRlfTtcbiAgICB9XG59XG5cbkBtaXhpbiBwZmUtdHJpZ2dlci1idXR0b24tbGFzdCgkdGhlbWU6IGxpZ2h0KSB7XG4gIGJvcmRlci1ib3R0b206ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItd2lkdGgpfSAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXN0eWxlKX0gI3twZmUtY29sb3Ioc3VyZmFjZS0tYm9yZGVyKX07XG4gIGJvcmRlci10b3A6IDA7XG4gIC8vIEBUT0RPIFN1cHBvcnQgZGlmZmVyZW5jZXMgYmFzZWQgb24gdGhlbWVcbn1cblxuQG1peGluIHBmZS10cmlnZ2VyLWJ1dHRvbi1maXJzdCgkdGhlbWU6IGxpZ2h0KSB7XG4gIGJvcmRlci10b3A6ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItd2lkdGgpfSAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXN0eWxlKX0gI3twZmUtY29sb3Ioc3VyZmFjZS0tYm9yZGVyKX07XG4gIC8vIEBUT0RPIFN1cHBvcnQgZGlmZmVyZW5jZXMgYmFzZWQgb24gdGhlbWVcbn1cblxuQG1peGluIHBmZS10cmlnZ2VyLWV4cGFuZGVkIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgYm9yZGVyLWJvdHRvbTogMDtcbn1cblxuQG1peGluIHBmZS10cmlnZ2VyLWNvbG9yKCRjb21wb25lbnQtbmFtZSwgJHRoZW1lOiBsaWdodCkge1xuICBAaWYgJHRoZW1lID09IGRhcmsge1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tbWFpbjogICAgICAgICB0cmFuc3BhcmVudDtcbiAgICAtLXBmZS0jeyRjb21wb25lbnQtbmFtZX0tLWF1eDogICAgICAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VzdC0tdGV4dCl9O1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tQm9yZGVyTGVmdENvbG9yLS1mb2N1czogI3twZmUtY29sb3Ioc3VyZmFjZS0tbGlnaHRlc3QpfTtcbiAgfVxuICBAZWxzZSB7XG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1tYWluOiAgICAgICAgIHRyYW5zcGFyZW50O1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tYXV4OiAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVzdC0tdGV4dCl9O1xuXG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1Cb3JkZXJMZWZ0OiAgI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci13aWR0aC0taGVhdnkpfSAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXN0eWxlKX0gdHJhbnNwYXJlbnQ7XG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1Cb3JkZXJSaWdodDogI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci13aWR0aCl9ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfSB0cmFuc3BhcmVudDtcbiAgICAtLXBmZS0jeyRjb21wb25lbnQtbmFtZX0tLUJvcmRlckJvdHRvbTogI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci13aWR0aCl9ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfSAje3BmZS1jb2xvcihzdXJmYWNlLS1ib3JkZXIpfTtcblxuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tQm9yZGVyTGVmdENvbG9yLS1mb2N1czogI3twZmUtY29sb3Ioc3VyZmFjZS0tbGlnaHRlc3QtLWxpbmspfTtcbiAgfVxufVxuXG5AbWl4aW4gcGZlLXRyaWdnZXItY29sb3ItZXhwYW5kZWQoJGNvbXBvbmVudC1uYW1lLCAkdGhlbWU6IGxpZ2h0KSB7XG4gIEBpZiAkdGhlbWUgPT0gZGFyayB7XG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1tYWluOiAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWRhcmtlcil9O1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tYXV4OiAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1kYXJrZXN0LS10ZXh0KX07XG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1Cb3JkZXJMZWZ0OiAgICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItd2lkdGgtLWhlYXZ5KX0gI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci1zdHlsZSl9ICN7cGZlLWNvbG9yKHN1cmZhY2UtLWJvcmRlcil9O1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tQm9yZGVyUmlnaHQ6ICAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXdpZHRoKX0gI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci1zdHlsZSl9ICN7cGZlLWNvbG9yKHN1cmZhY2UtLWJvcmRlcil9O1xuXG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1Cb3JkZXJMZWZ0Q29sb3ItLWZvY3VzOiAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVzdCl9O1xuICB9XG4gIEBlbHNlIHtcbiAgICAtLXBmZS0jeyRjb21wb25lbnQtbmFtZX0tLW1haW46ICAgICAgICAgICAgICAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVzdCl9O1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tYXV4OiAgICAgICAgICAgICAgICN7cGZlLWNvbG9yKHN1cmZhY2UtLWxpZ2h0ZXN0LS10ZXh0KX07XG4gICAgLS1wZmUtI3skY29tcG9uZW50LW5hbWV9LS1mb2N1czogICAgICAgICAgICAgI3twZmUtY29sb3Ioc3VyZmFjZS0tbGlnaHRlc3QtLWxpbmspfTtcbiAgICAtLXBmZS0jeyRjb21wb25lbnQtbmFtZX0tLUJvcmRlckxlZnQ6ICAgICAgICAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXdpZHRoLS1oZWF2eSl9ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfSAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVzdC0tbGluayl9O1xuICAgIC0tcGZlLSN7JGNvbXBvbmVudC1uYW1lfS0tQm9yZGVyUmlnaHQ6ICAgICAgICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItd2lkdGgpfSAje3BmZS12YXIoc3VyZmFjZS0tYm9yZGVyLXN0eWxlKX0gI3twZmUtY29sb3Ioc3VyZmFjZS0tYm9yZGVyKX07XG4gIH1cbn1cblxuLy8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8vIEFjY29yZGlvbiBjaGV2cm9uc1xuLy8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5AbWl4aW4gcGZlLWNoZXZyb24tZXhwYW5kZWQoJHN0YXRlOiB0cnVlLCAkcG9zaXRpb246IGFmdGVyKSB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiBjYWxjKCgje3BmZS12YXIoY29udGFpbmVyLXNwYWNlcil9ICogI3skcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmctLWZhY3Rvcn0pICsgI3skcGZlLWV4cGFuZF9jaGV2cm9uLS1wbGFjZW1lbnR9ICk7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBib3JkZXItc3R5bGU6ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfTtcbiAgaGVpZ2h0OiAjeyRwZmUtZXhwYW5kX2NoZXZyb24tLXNpemV9O1xuICB3aWR0aDogICN7JHBmZS1leHBhbmRfY2hldnJvbi0tc2l6ZX07XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMTVzO1xuICBAaWYgJHN0YXRlIHtcbiAgICBib3JkZXItd2lkdGg6ICN7JHBmZS1leHBhbmRfY2hldnJvbi0td2VpZ2h0fSAjeyRwZmUtZXhwYW5kX2NoZXZyb24tLXdlaWdodH0gMCAwO1xuICAgIGJvcmRlci1ib3R0b206IDA7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbiAgICBAaWYgJHBvc2l0aW9uID09IGJlZm9yZSB7XG4gICAgICBsZWZ0OiAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZy0td2lkZX07XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIHJpZ2h0OiAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZy0td2lkZX07XG4gICAgfVxuICB9XG4gIEBlbHNlIHtcbiAgICBib3JkZXItd2lkdGg6IDAgI3skcGZlLWV4cGFuZF9jaGV2cm9uLS13ZWlnaHR9ICN7JHBmZS1leHBhbmRfY2hldnJvbi0td2VpZ2h0fSAwO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICBAaWYgJHBvc2l0aW9uID09IGJlZm9yZSB7XG4gICAgICBsZWZ0OiAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZy0td2lkZX07XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgIHJpZ2h0OiAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZy0td2lkZX07XG4gICAgfVxuICB9XG59XG5cbi8vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vLyBBY2NvcmRpb24gcGFuZWxcbi8vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuQG1peGluIHBmZS1jb250YWluZXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcblxuICBwYWRkaW5nOiBjYWxjKCN7cGZlLWxvY2FsKHBhZGRpbmctLXZlcnRpY2FsKX0gLyAyKSAgI3twZmUtbG9jYWwocGFkZGluZy0taG9yaXpvbnRhbCl9O1xuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAje3BmZS1icmVha3BvaW50KHNtKX0pIHtcbiAgICAgcGFkZGluZzogI3twZmUtbG9jYWwoUGFkZGluZyl9O1xuICB9XG59XG5cbkBtaXhpbiBwZmUtYWNjb3JkaW9uLXBhbmVsIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgd2lsbC1jaGFuZ2U6IGhlaWdodDtcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgb3BhY2l0eTogMDtcbn1cblxuQG1peGluIHBmZS1hY2NvcmRpb24tcGFuZWwtZXhwYW5kZWQge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBvcGFjaXR5OiAxO1xufVxuXG5AbWl4aW4gcGZlLWFjY29yZGlvbi1wYW5lbC1leHBhbmRlZC1zdHlsZSgkdGhlbWU6IGxpZ2h0KSB7XG4gIGJvcmRlci1yaWdodDogI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci13aWR0aCl9ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfSB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWxlZnQ6ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItd2lkdGgtLWhlYXZ5KX0gI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci1zdHlsZSl9IHRyYW5zcGFyZW50O1xuICBAaWYgJHRoZW1lID09IGRhcmsge1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI3twZmUtY29sb3Ioc3VyZmFjZS0tZGFya2VyKX07XG4gICAgYm9yZGVyLWxlZnQtY29sb3I6ICN7cGZlLWNvbG9yKHN1cmZhY2UtLWJvcmRlcil9O1xuICAgIGJvcmRlci1yaWdodC1jb2xvcjogI3twZmUtY29sb3Ioc3VyZmFjZS0tYm9yZGVyKX07XG4gIH1cbiAgQGVsc2Uge1xuICAgIGJveC1zaGFkb3c6IDAgNXB4ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItd2lkdGgtLWhlYXZ5KX0gcmdiYSgxNDAsIDE0MCwgMTQwLCAwLjM1KTtcbiAgICBib3JkZXItbGVmdC1jb2xvcjogI3twZmUtY29sb3Ioc3VyZmFjZS0tbGlnaHRlc3QtLWxpbmspfTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAje3BmZS1jb2xvcihzdXJmYWNlLS1saWdodGVzdCl9O1xuICAgIGJvcmRlci1yaWdodC1jb2xvcjogI3twZmUtY29sb3Ioc3VyZmFjZS0tYm9yZGVyKX07XG4gICAgYm9yZGVyLWJvdHRvbTogI3twZmUtdmFyKHN1cmZhY2UtLWJvcmRlci13aWR0aCl9ICN7cGZlLXZhcihzdXJmYWNlLS1ib3JkZXItc3R5bGUpfSAje3BmZS1jb2xvcihzdXJmYWNlLS1ib3JkZXIpfTtcbiAgfVxufVxuXG5AbWl4aW4gcGZlLWFjY29yZGlvbi1wYW5lbC1jb250YWluZXItaW5zZXQoJGFsaWduOiBsZWZ0KSAge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogMTAwJTtcblxuICBAaWYgJGFsaWduID09IGxlZnQge1xuICAgIHBhZGRpbmc6IDAgI3skcGZlLWV4cGFuZF9jaGV2cm9uLS1wYWRkaW5nfSAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZ30gI3skcGZlLWV4cGFuZF9idXR0b24tLXBhZGRpbmctLXdpZGV9O1xuICB9XG4gIEBlbHNlIHtcbiAgICBwYWRkaW5nOiAwICN7JHBmZS1leHBhbmRfYnV0dG9uLS1wYWRkaW5nLS13aWRlfSAjeyRwZmUtZXhwYW5kX2J1dHRvbi0tcGFkZGluZ30gI3skcGZlLWV4cGFuZF9jaGV2cm9uLS1wYWRkaW5nfTtcbiAgfVxufSJdfQ== */
