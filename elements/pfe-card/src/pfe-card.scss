@import "../../pfe-sass/pfe-sass";

$LOCAL: card;


$variables: (
  // Individual padding overrides available
  PaddingTop: calc(#{pfe-var(container-spacer)} * 2),
  PaddingRight: calc(#{pfe-var(container-spacer)} * 2),
  PaddingBottom: calc(#{pfe-var(container-spacer)} * 2),
  PaddingLeft: calc(#{pfe-var(container-spacer)} * 2),

  spacing: pfe-var(container-spacer)
);

:host {
  @include pfe-print-variables($variables);
  
  // Broadcasted values set to match background color
  @include pfe-set-broadcast-theme(light);

  // Start of style declarations for host element
  display: flex;
  flex-direction: #{pfe-local($cssvar: FlexDirection, $fallback: column)};

  // Optional hooks, no default styles
  justify-content:  #{pfe-local(JustifyContent)};
  align-items:      #{pfe-local(AlignItems)};

  // This allows the card to fill it's container if necessary
  align-self:       #{pfe-local($cssvar: AlignSelf, $fallback: stretch)};
  position:         relative;

  padding:       #{pfe-local($cssvar: Padding, $fallback: #{pfe-local($cssvar: PaddingTop, $fallback: calc(#{pfe-var(container-spacer)} * 2))} #{pfe-local($cssvar: PaddingRight, $fallback: calc(#{pfe-var(container-spacer)} * 2))} #{pfe-local($cssvar: PaddingBottom, $fallback: calc(#{pfe-var(container-spacer)} * 2))} #{pfe-local($cssvar: PaddingLeft, $fallback: calc(#{pfe-var(container-spacer)} * 2))} )};
  border:        #{pfe-local($cssvar: Border, $fallback: (#{pfe-local(BorderWidth, 0)} #{pfe-local(BorderStyle, solid)} #{pfe-local(BorderColor, transparent)}) )};
  border-top:    #{pfe-local($cssvar: BorderTop)};
  border-radius: #{pfe-local($cssvar: BorderRadius, $fallback: #{pfe-var(surface--border-radius)})};

  // This property ensures that children in the slots do no overflow
  // the border-radius being set on the container
  overflow: hidden;
  position: relative;

  // Base colors
  background-image:       #{pfe-local(BackgroundImage)};
  background-color:       #{pfe-local($cssvar: BackgroundColor, $fallback: #{pfe-color(surface--base)})};
  background-position:    #{pfe-local($cssvar: BackgroundPosition, $fallback: center center)};
  background-repeat:      #{pfe-local(BackgroundRepeat)};
  background-size:        #{pfe-local(BackgroundSize)};
  background-attachment:  #{pfe-local(BackgroundAttachment)};
  color:                  #{pfe-apply-broadcast(text)} !important;

  // Add the border to the card for print
  @include pfe-print-media {
    background-color: #fff !important;
    background-image: none !important;
    box-shadow: none !important;
    
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
  }

  // Remove background color for print
  @include pfe-no-print-background;

  @include browser-query(ie11) {
    background-color: #{pfe-color(surface--lightest)} !important;
    color: #{pfe-color(text)} !important;
    background-image: none !important;
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
    padding: calc(#{pfe-var(container-spacer)});
  }
}

// Pull in pfe-color settings for all supported surface colors
@include pfe-surfaces;

@include pfe-theme-contexts; // imports on="light" etc support

:host([pfe-size="small"]) {
  --pfe-card--PaddingTop:     #{pfe-var(container-spacer)};
  --pfe-card--PaddingRight:   #{pfe-var(container-spacer)};
  --pfe-card--PaddingBottom:  #{pfe-var(container-spacer)};
  --pfe-card--PaddingLeft:    #{pfe-var(container-spacer)};
}

:host([pfe-border]) {
  --pfe-card--BorderColor:   #{map-get($pfe-colors, surface--border)};
  --pfe-card--BorderWidth:   #{map-get($pfe-vars, surface--border-width)};
}

// Targets the wrappers in the shadow DOM
.pfe-card {
  &--overlay {
    @extend %overlay;
    background-color: #{pfe-local($cssvar: BackgroundColor, $region: overlay)};
    z-index: 0;

    @include pfe-print-media {
      display: none;
    }
  }
  &__header,
  &__body,
  &__footer {
    ::slotted([pfe-overflow~="top"]) {
      z-index: 1;
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(PaddingTop)}) !important;
      :host([has_header]) & {
        padding-top: #{pfe-local($cssvar: spacing, $fallback: pfe-var(container-spacer))};
      }
    }

    ::slotted([pfe-overflow~="right"]) {
      margin-right: -2rem; //IE11 fallback
      margin-right: calc(-1 * #{pfe-local(PaddingRight)});
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * calc(#{pfe-local(PaddingBottom)} + #{pfe-local(BorderRadius)}));
      align-self: flex-end;
    }

    ::slotted([pfe-overflow~="left"]) {
      margin-left: -2rem; //IE11 fallback
      margin-left: calc(-1 * #{pfe-local(PaddingLeft)});
    }

    ::slotted(img) {
      max-width: 100% !important;
      align-self: flex-start; //Don't stretch image 100% with other Flexbox items in card.
      object-fit: cover; // Fix distortion
    }

    ::slotted(img:not[pfe-overflow]) {
      align-self: flex-start; //Don't stretch image 100% with other Flexbox items in card.
    }

    ::slotted(img[pfe-overflow~="right"]) {
      max-width: calc(100% + 2rem) !important; //IE11 fallback
      max-width: calc(100% + #{pfe-local(PaddingRight)}) !important;
    }

    ::slotted(img[pfe-overflow~="left"]) {
      max-width: calc(100% + 2rem) !important; //IE11 fallback
      max-width: calc(100% + #{pfe-local(PaddingLeft)}) !important;
    }

    ::slotted(img[pfe-overflow~="right"][pfe-overflow~="left"]) {
      max-width: calc(100% + 4rem) !important; //IE11 fallback
      max-width: calc(100% + calc(#{pfe-local(PaddingRight)} + #{pfe-local(PaddingLeft)})) !important;
    }
  }
  &__header {
    display: #{pfe-local($cssvar: Display, $region: header, $fallback: block)};
    z-index: 2;
    // Declare the header background color
    background-color: #{pfe-local($cssvar: BackgroundColor, $region: header, $fallback: rgba(45, 45, 45, #{pfe-var(opacity)}))};
    color:            #{pfe-local($cssvar: Color, $region: header, $fallback: #{pfe-apply-broadcast(text)})};
    @include browser-query(ie11) {
      background-color: #{map-get($pfe-colors, surface--lighter)} !important;
      color: #{pfe-color(text)} !important;
    }

    // Margin styles on header region
    margin-top:    calc(#{pfe-local(PaddingTop)} * -1) !important;
    margin-right:  calc(#{pfe-local(PaddingRight)} * -1);
    margin-bottom: #{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})};
    margin-left:   calc(#{pfe-local(PaddingLeft)} * -1);

    // Padding for the header region
    padding-top:    #{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})};
    padding-right:  #{pfe-local(PaddingRight)};
    padding-left:   #{pfe-local(PaddingLeft)};
    padding-bottom: #{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})};

    :host(:not([has_body],[has_footer])) & {
      margin-bottom: #{pfe-local(PaddingBottom)};
    }

    ::slotted([pfe-overflow~="top"]) {
      --pfe-card__overflow--MarginTop: calc(#{pfe-local(PaddingTop)} * -1);
    }

    :host([has_body],[has_footer]) & ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})} * -1);
    }

    ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(PaddingBottom)} * -1);
    }

    @include pfe-clear-spacing($properties: margin-bottom, $important: true);
  }
  &__body {
    z-index: 1;
    :host(:not([has_header])) & ::slotted([pfe-overflow~="top"]) {
      --pfe-card__overflow--MarginTop: calc(#{pfe-local(PaddingTop)} * -1);
    }

    ::slotted([pfe-overflow~="top"]) {
      z-index: 1;
      --pfe-card__overflow--MarginTop: calc(#{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})} * -1);
    }

    ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(PaddingBottom)} * -1);
    }

    :host([has_footer]) & ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})} * -1);
    }
  }
  &__footer {
    z-index: 1;
    margin-top: auto; // This allows the footer to move to the very bottom

    display: flex;
    flex-direction: #{pfe-local($cssvar: Row, $region: footer, $fallback: row)};
    flex-wrap: #{pfe-local($cssvar: Wrap, $region: footer, $fallback: wrap)};
    // Aligns buttons and CTAs
    align-items: #{pfe-local($cssvar: AlignItems, $region: footer, $fallback: baseline)};

    ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(PaddingBottom)} * -1);
    }
  }
  &__header,
  &__body {
    &:not(:last-child) {
      margin-bottom: #{pfe-local($cssvar: spacing--vertical, $fallback: #{pfe-local(spacing)})};
    }

    //-- Slotted styles for typography
    // Remove margins from typography inside the slots
    @include pfe-clear-spacing($properties: margin-top, $important: true, $selector: first-child);
  }
}
