@import "../../pfe-sass/pfe-sass";

$LOCAL: card;


$LOCAL-VARIABLES: (
  // These get applied to each region
  TextAlign: left,
  
  // This only applies when the card is inside a flex layout
  AlignSelf: stretch,

  // Individual padding overrides available
  PaddingTop: calc(#{pfe-var(container-spacer)} * 2),
  PaddingRight: calc(#{pfe-var(container-spacer)} * 2),
  PaddingBottom: calc(#{pfe-var(container-spacer)} * 2),
  PaddingLeft: calc(#{pfe-var(container-spacer)} * 2),

  BorderWidth: 0,
  BorderStyle: solid,
  BorderColor: pfe-color(surface--border),
  BorderRadius: pfe-var(surface--border-radius),

  // Space between header, body, footer regions
  region--spacing: pfe-var(container-spacer),

  // Spacing internal to regions
  spacing--horizontal: calc(#{pfe-var(content-spacer)} / 2),
  spacing--vertical:   pfe-var(content-spacer),

  BackgroundColor: pfe-color(surface--base),
  theme: light,
  BackgroundImage: null,
  BackgroundAttachment: null,
  BackgroundPosition: center center,
  BackgroundRepeat: null,
  BackgroundSize: null,

  header: (
    Display: flex,
    JustifyContent: null,
    BackgroundColor: rgba(45, 45, 45, #{pfe-var(opacity)}),
    Color: pfe-apply-broadcast(text)
  ),

  body: (
    FlexDirection: column,
    FlexWrap: nowrap,
    JustifyContent: null,
    AlignItems: null
  ),

  footer: (
    FlexDirection: row,
    FlexWrap: wrap,
    JustifyContent: null,
    AlignItems: null
  )
);

// Note: For combination variables to resolve, they must be added at the end
$combos: (
  Border: pfe-local(BorderWidth) pfe-local(BorderStyle) pfe-local(BorderColor),
  BorderTop: pfe-local($cssvar: Border, $fallback: pfe-local(BorderWidth) pfe-local(BorderStyle) pfe-local(BorderColor)),
  Padding: pfe-local(PaddingTop) pfe-local(PaddingRight) pfe-local(PaddingBottom) pfe-local(PaddingLeft)
);

$LOCAL-VARIABLES: map-collect($LOCAL-VARIABLES, $combos);

:host {
  --theme: #{pfe-local(theme)};

  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  // This allows the card to fill it's container if necessary
  align-self:       #{pfe-local(AlignSelf)};
  position:         relative;

  padding: #{pfe-local(PaddingTop)} #{pfe-local(PaddingRight)} #{pfe-local(PaddingBottom)} #{pfe-local(PaddingLeft)};

  border:        #{pfe-local(Border)};
  border-top:    #{pfe-local(BorderTop)};
  border-radius: #{pfe-local(BorderRadius)};

  // This property ensures that children in the slots do no overflow
  // the border-radius being set on the container
  overflow: hidden;
  position: relative;

  // Base colors
  background-image:       #{pfe-local(BackgroundImage)};
  background-color:       #{pfe-local(BackgroundColor)};
  background-position:    #{pfe-local(BackgroundPosition)};
  background-repeat:      #{pfe-local(BackgroundRepeat)};
  background-size:        #{pfe-local(BackgroundSize)};
  background-attachment:  #{pfe-local(BackgroundAttachment)};
  color:                  #{pfe-apply-broadcast(text)} !important;

  // Add the border to the card for print
  @include pfe-print-media {
    background-color: #fff !important;
    background-image: none !important;
    box-shadow: none !important;
    
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
  }

  // Remove background color for print
  @include pfe-no-print-background;

  @include browser-query(ie11) {
    background-color: #{pfe-color(surface--lightest)} !important;
    color: #{pfe-color(text)} !important;
    background-image: none !important;
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
    padding: calc(#{pfe-var(container-spacer)});
  }
}

// Pull in pfe-color settings for all supported surface colors
@include pfe-surfaces;

@include pfe-theme-contexts; // imports on="light" etc support

:host([pfe-size="small"]) {
  --pfe-card--PaddingTop:     #{pfe-var(container-spacer)};
  --pfe-card--PaddingRight:   #{pfe-var(container-spacer)};
  --pfe-card--PaddingBottom:  #{pfe-var(container-spacer)};
  --pfe-card--PaddingLeft:    #{pfe-var(container-spacer)};
}

:host([pfe-border]:not([pfe-border="false"])) {
  --pfe-card--BorderWidth:   #{map-get($pfe-vars, surface--border-width)};
}

// Targets the wrappers in the shadow DOM
.pfe-card {
  &__overlay {
    @extend %overlay;
    background-color: #{pfe-local($region: overlay, $cssvar: BackgroundColor)};
    z-index: 0;

    @include pfe-print-media {
      display: none;
    }

    :host([pfe-overlay]) & {
      --pfe-card__overlay--BackgroundColor: rgba(0, 0, 0, #{pfe-var(opacity)});
    }
  }
  &__header,
  &__body,
  &__footer {
    z-index: 1;

    text-align: #{pfe-local(TextAlign)};

    ::slotted(img) {
      max-width: 100% !important;
      align-self: flex-start; //Don't stretch image 100% with other Flexbox items in card.
      object-fit: cover; // Fix distortion
    }

    @each $direction in (left, right) {
      ::slotted([pfe-overflow~="#{$direction}"]) {
        margin-#{$direction}: -2rem; //IE11 fallback
        margin-#{$direction}: calc(-1 * #{pfe-local(Padding#{str-capitalize($direction)})});

        max-width: calc(100% + 2rem); //IE11 fallback
        max-width: calc(100% + #{pfe-local(Padding#{str-capitalize($direction)})});
      }
    }

    ::slotted(img[pfe-overflow~="right"][pfe-overflow~="left"]) {
      max-width: calc(100% + 4rem) !important; //IE11 fallback
      max-width: calc(100% + calc(#{pfe-local(PaddingRight)} + #{pfe-local(PaddingLeft)})) !important;
    }
    
    // Target the last item in the slot, injected using JS on upgrade
    ::slotted([last]) {
      margin-bottom: 0;
    }
  }
  &__header {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true);

    display:     #{pfe-local($region: header, $cssvar: Display)};
    flex-direction: row;
    flex-wrap: nowrap;
    justify-content: #{pfe-local($region: header, $cssvar: JustifyContent)};
    z-index: 2;
    
    // Declare the header background color
    background-color: #{pfe-local($region: header, $cssvar: BackgroundColor)};
    color:            #{pfe-local($region: header, $cssvar: Color)};
    
    @include browser-query(ie11) {
      background-color: #{map-get($pfe-colors, surface--lighter)} !important;
      color: #{pfe-color(text)} !important;
    }

    // Padding for the header region
    padding-top:    calc(#{pfe-local(spacing--vertical)} / 2);
    padding-right:  #{pfe-local(PaddingRight)};
    padding-bottom: calc(#{pfe-local(spacing--vertical)} / 2);
    padding-left:  #{pfe-local(PaddingLeft)};

    margin-top: calc(-1 * #{pfe-local(PaddingTop)});
    margin-bottom: #{pfe-local(region--spacing)};
    margin-right: calc(#{pfe-local(PaddingRight)} * -1);
    margin-left: calc(#{pfe-local(PaddingLeft)} * -1);

    ::slotted(*:not([last])) {
      margin-right: #{pfe-local(spacing--horizontal)};
    }

    ::slotted([pfe-overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(spacing--vertical)});
    }

    :host(:not([has_header])) & {
      display: none;
    }

    :host([has_body],[has_footer]) & ::slotted([pfe-overflow~="bottom"]) {
      --pfe-card__overflow--MarginBottom: calc(#{pfe-local(spacing--vertical)} * -1);
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(spacing--vertical)});
    }

    :host(:not([has_header])) & {
      display: none;
    }
  }
  &__body {
    flex-grow: 1;

    // Start of style declarations for host element
    display: flex;
    flex-direction: #{pfe-local($region: body, $cssvar: FlexDirection)};
    flex-wrap: #{pfe-local($region: body, $cssvar: FlexWrap)};
  
    // Optional hooks, no default styles
    justify-content:  #{pfe-local($region: body, $cssvar: JustifyContent)};
    align-items:      #{pfe-local($region: body, $cssvar: AlignItems)};

    :host([has_footer]) & {
      margin-bottom: #{pfe-local(region--spacing)}
    }

    ::slotted(*:not([last])) {
      margin-bottom: #{pfe-local(spacing--vertical)};
    }

    ::slotted([pfe-overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(PaddingTop)});
      :host([has_header]) & {
        margin-top: calc(-1 * #{pfe-local(region--spacing)});
      }
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(PaddingBottom)});
      :host([has_footer]) & {
        margin-bottom: calc(-1 * #{pfe-local(region--spacing)});
      }
    }
    :host(:not([has_footer])) & {
      margin-bottom: 0;
    }
  }
  &__footer {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true, $selector: last-child);

    z-index: 1;
    // margin-top: auto; // This allows the footer to move to the very bottom

    display: flex;
    flex-direction: #{pfe-local($region: footer, $cssvar: FlexDirection)};
    flex-wrap: #{pfe-local($region: footer, $cssvar: FlexWrap)};

    // Aligns buttons and CTAs
    // align-items: #{pfe-local($region: footer, $cssvar: AlignItems)};
    justify-content: #{pfe-local($region: footer, $cssvar: AlignItems)};

    margin-right: calc(#{pfe-local(spacing--horizontal)} * -1);

    ::slotted(*:not([last])) {
      margin-right: #{pfe-local(spacing--horizontal)};
    }

    :host(:not([has_footer])) & {
      display: none;
    }

    ::slotted([pfe-overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(region--spacing)});
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(PaddingBottom)});
    }

    :host(:not([has_footer])) & {
      display: none;
    }
  }
}
