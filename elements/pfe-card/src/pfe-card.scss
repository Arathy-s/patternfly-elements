@import "../../pfe-sass/pfe-sass";

$LOCAL: card;


$VARIABLES: (
  FlexDirection: column,
  AlignSelf: stretch,

  // Individual padding overrides available
  PaddingTop: calc(#{pfe-var(container-spacer)} * 2),
  PaddingRight: calc(#{pfe-var(container-spacer)} * 2),
  PaddingBottom: calc(#{pfe-var(container-spacer)} * 2),
  PaddingLeft: calc(#{pfe-var(container-spacer)} * 2),

  BorderWidth: 0,
  BorderStyle: solid,
  BorderColor: transparent,
  BorderRadius: pfe-var(surface--border-radius),

  spacing--horizontal: pfe-var(container-spacer),
  spacing--vertical:   pfe-var(container-spacer),

  BackgroundColor: pfe-color(surface--base),
  BackgroundPosition: center center,

  header: (
    Display: block,
    BackgroundColor: rgba(45, 45, 45, #{pfe-var(opacity)}),
    Color: pfe-apply-broadcast(text)
  ),

  footer: (
    AlignItems: baseline,
    FlexDirection: row,
    FlexWrap: wrap
  )
);

// Note: For combination variables to resolve, they must be added at the end
$combos: (
  Border: pfe-local(BorderWidth) pfe-local(BorderStyle) pfe-local(BorderColor),
  BorderTop: pfe-local(BorderWidth) pfe-local(BorderStyle) pfe-local(BorderColor)
);

$VARIABLES: map-collect($VARIABLES, $combos);

:host {  
  // Broadcasted values set to match background color
  @include pfe-set-broadcast-theme(light);

  // Start of style declarations for host element
  display: flex;
  flex-direction: #{pfe-local(FlexDirection)};

  // Optional hooks, no default styles
  justify-content:  #{pfe-local(JustifyContent)};
  align-items:      #{pfe-local(AlignItems)};

  // This allows the card to fill it's container if necessary
  align-self:       #{pfe-local(AlignSelf)};
  position:         relative;

  // padding:       #{pfe-local(Padding)};
  border:        #{pfe-local(Border)};
  border-top:    #{pfe-local(BorderTop)};
  border-radius: #{pfe-local(BorderRadius)};

  // This property ensures that children in the slots do no overflow
  // the border-radius being set on the container
  overflow: hidden;
  position: relative;

  // Base colors
  background-image:       #{pfe-local(BackgroundImage)};
  background-color:       #{pfe-local(BackgroundColor)};
  background-position:    #{pfe-local(BackgroundPosition)};
  background-repeat:      #{pfe-local(BackgroundRepeat)};
  background-size:        #{pfe-local(BackgroundSize)};
  background-attachment:  #{pfe-local(BackgroundAttachment)};
  color:                  #{pfe-apply-broadcast(text)} !important;

  // Add the border to the card for print
  @include pfe-print-media {
    background-color: #fff !important;
    background-image: none !important;
    box-shadow: none !important;
    
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
  }

  // Remove background color for print
  @include pfe-no-print-background;

  @include browser-query(ie11) {
    background-color: #{pfe-color(surface--lightest)} !important;
    color: #{pfe-color(text)} !important;
    background-image: none !important;
    border-radius: #{map-get($pfe-vars, surface--border-radius)};
    border: #{map-get($pfe-vars, surface--border-width) map-get($pfe-vars, surface--border-style) map-get($pfe-colors, surface--border)};
    padding: calc(#{pfe-var(container-spacer)});
  }
}

// Pull in pfe-color settings for all supported surface colors
@include pfe-surfaces;

@include pfe-theme-contexts; // imports on="light" etc support

:host([pfe-size="small"]) {
  --pfe-card--PaddingTop:     #{pfe-var(container-spacer)};
  --pfe-card--PaddingRight:   #{pfe-var(container-spacer)};
  --pfe-card--PaddingBottom:  #{pfe-var(container-spacer)};
  --pfe-card--PaddingLeft:    #{pfe-var(container-spacer)};
}

:host([pfe-border]) {
  --pfe-card--BorderColor:   #{map-get($pfe-colors, surface--border)};
  --pfe-card--BorderWidth:   #{map-get($pfe-vars, surface--border-width)};
}

// Targets the wrappers in the shadow DOM
.pfe-card {
  &--overlay {
    @extend %overlay;
    background-color: #{pfe-local($cssvar: BackgroundColor, $region: overlay)};
    z-index: 0;

    @include pfe-print-media {
      display: none;
    }

    :host([pfe-overlay]) & {
      --pfe-card__overlay--BackgroundColor: rgba(0, 0, 0, #{pfe-var(opacity)});
    }
  }
  &__header,
  &__body,
  &__footer {
    z-index: 1;
    // Left and right padding are consistent throughout the card
    padding-right:  #{pfe-local(PaddingRight)};
    padding-left:   #{pfe-local(PaddingLeft)};

    ::slotted(img) {
      max-width: 100% !important;
      align-self: flex-start; //Don't stretch image 100% with other Flexbox items in card.
      object-fit: cover; // Fix distortion
    }

    @each $direction in (left, right) {
      ::slotted([pfe-overflow~="#{$direction}"]) {
        margin-#{$direction}: -2rem; //IE11 fallback
        margin-#{$direction}: calc(-1 * #{pfe-local(Padding#{str-capitalize($direction)})});

        max-width: calc(100% + 2rem); //IE11 fallback
        max-width: calc(100% + #{pfe-local(Padding#{str-capitalize($direction)})});
      }
    }

    ::slotted(img[pfe-overflow~="right"][pfe-overflow~="left"]) {
      max-width: calc(100% + 4rem) !important; //IE11 fallback
      max-width: calc(100% + calc(#{pfe-local(PaddingRight)} + #{pfe-local(PaddingLeft)})) !important;
    }
  }
  &__header {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true);

    display: #{pfe-local($cssvar: Display, $region: header)};
    z-index: 2;
    
    // Declare the header background color
    background-color: #{pfe-local($cssvar: BackgroundColor, $region: header)};
    color:            #{pfe-local($cssvar: Color, $region: header)};
    
    @include browser-query(ie11) {
      background-color: #{map-get($pfe-colors, surface--lighter)} !important;
      color: #{pfe-color(text)} !important;
    }

    // Padding for the header region
    padding-top:    #{pfe-local(spacing--vertical)};
    padding-bottom: #{pfe-local(spacing--vertical)};

    &:not(:last-child) {
      margin-bottom: #{pfe-local(spacing--vertical)};
    }

    :host(:not([has_body],[has_footer])) & {
      margin-bottom: #{pfe-local(PaddingBottom)};
    }

    ::slotted([pfe-overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(spacing--vertical)}) !important;
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(spacing--vertical)}) !important;
    }
  }
  &__body {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true, $selector: last-child);

    // Padding for the header region
    padding-top:    #{pfe-local(PaddingTop)};
    padding-bottom: #{pfe-local(PaddingBotom)};

    &:not(:last-child) {
      margin-bottom: #{pfe-local(spacing--vertical)};
    }

    :host([has_header]) & {
      padding-top:    #{pfe-local(spacing--vertical)};
    }

    :host([has_footer]) & {
      padding-bottom:    #{pfe-local(spacing--vertical)};
    }

    ::slotted([pfe-overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(PaddingTop)}) !important;
      :host([has_header]) & {
        margin-top: calc(-1 * #{pfe-local(spacing--vertical)});
      }
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(PaddingBottom)}) !important;
      :host([has_footer]) & {
        margin-bottom: calc(-1 * #{pfe-local(spacing--vertical)});
      }
    }
  }
  &__footer {
    @include pfe-clear-spacing($properties: margin-bottom, $important: true, $selector: last-child);

    z-index: 1;
    margin-top: auto; // This allows the footer to move to the very bottom

    display: flex;
    flex-direction: #{pfe-local($cssvar: FlexDirection, $region: footer)};
    flex-wrap: #{pfe-local($cssvar: FlexWrap, $region: footer)};

    // Aligns buttons and CTAs
    align-items: #{pfe-local($cssvar: AlignItems, $region: footer)};

    // Padding for the footer region
    padding-top:    #{pfe-local(spacing--vertical)};
    padding-bottom: #{pfe-local(PaddingBottom)};

    margin-left: calc(#{pfe-local(spacing--horizontal)} * -1);

    ::slotted(*) {
      margin-left: #{pfe-local(spacing--horizontal)};
    }

    ::slotted([pfe-overflow~="top"]) {
      margin-top: -2rem; //IE11 fallback
      margin-top: calc(-1 * #{pfe-local(spacing--vertical)});
    }

    ::slotted([pfe-overflow~="bottom"]) {
      margin-bottom: -2rem; //IE11 fallback
      margin-bottom: calc(-1 * #{pfe-local(PaddingBottom)});
    }
  }
}
